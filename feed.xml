<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2018-02-21T09:51:03+00:00</updated><id>https://ordina-jworks.github.io/</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">HPKP is deprecated. What now?</title><link href="https://ordina-jworks.github.io/security/2018/02/12/HPKP-deprecated-what-now.html" rel="alternate" type="text/html" title="HPKP is deprecated. What now?" /><published>2018-02-12T00:00:00+00:00</published><updated>2018-02-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/security/2018/02/12/HPKP-deprecated-what-now</id><content type="html" xml:base="https://ordina-jworks.github.io/security/2018/02/12/HPKP-deprecated-what-now.html">&lt;h1 id=&quot;hpkp-is-deprecated-what-now&quot;&gt;HPKP is deprecated. What now?&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recently Google announced their intent to &lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/he9tr7p3rZ8/eNMwKPmUBAAJ&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;deprecate support&lt;/a&gt; for Public Key Pinning (HPKP).
Let’s have a look at the reasons for this and what technologies we can use to replace it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;deprecated-why&quot;&gt;Deprecated? Why?&lt;/h2&gt;
&lt;p&gt;As mentioned in the &lt;a href=&quot;/conference/2017/09/18/Browser-security-features.html&quot;&gt;previous blog post&lt;/a&gt;, HPKP carries some very strong risks.
It only takes a small mistake to render your site completely inaccessible, but that’s only 1 of the reasons Google mentions for deprecating support for HPKP.
The other risks they call out are that it’s hard to build a pin-set that’s guaranteed to work and the risk of hostile pinning.
Hostile pinning hasn’t been observed &lt;em&gt;yet&lt;/em&gt;, but it’s an attack that allows someone to take your site hostage should they somehow be able to obtain a valid certificate for your domain.&lt;/p&gt;

&lt;p&gt;Because of the first 2 reasons, adoption rates of HPKP have remained very low and browser vendors have been looking for a viable replacement.&lt;/p&gt;

&lt;h2 id=&quot;expect-ct&quot;&gt;Expect-CT&lt;/h2&gt;
&lt;p&gt;One of the new headers thought up to replace HPKP is &lt;code class=&quot;highlighter-rouge&quot;&gt;Expect-CT&lt;/code&gt; (Expect Certificate Transparency).
This tells the browser to check the &lt;a href=&quot;https://www.certificate-transparency.org/&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Certificate Transparency&lt;/a&gt; (CT) logs to make sure the presented certificate is properly logged.&lt;/p&gt;

&lt;h3 id=&quot;certificate-transparency&quot;&gt;Certificate Transparency&lt;/h3&gt;
&lt;p&gt;CT is a project by Google that provides a framework for monitoring and auditing SSL certificates in (almost) real-time.
One of the reasons for its existence is the 2011 hack of the Dutch CA Diginotar. 
This resulted in the hackers being able to issue more than 500 fake SSL certificates (including for sites like facebook.com and google.com).
In turn, these certificates could then be used by the attacker to perform a Man-in-the-middle (MitM) attack against these sites, without alerting the user that anything fishy was going on.&lt;/p&gt;

&lt;p&gt;CT is a tool that allows you to detect when a fake certificate has been issued. 
When a CA participates in the program, it has to log all certificates they issue in a publicly searchable log.
These logs are monitored by applications which can report to you whenever a new certificate for one of your domains is issued.
If the certificate was issued in error (or maliciously), you can immediately take steps to have it revoked.&lt;/p&gt;

&lt;h3 id=&quot;how-does-expect-ct-help-me-out-here&quot;&gt;How does Expect-CT help me out here?&lt;/h3&gt;
&lt;p&gt;Expect-CT tells the browser that you only want it to trust certificates signed by CAs that have Certificate Transparency enabled.
When the server presents a certificate that’s not issued by such a CA, the browser will reject it and display a warning to the user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-hpkp-deprecation/expect-ct-error.png&quot; alt=&quot;Expect CT error message&quot; class=&quot;image fit&quot; style=&quot;max-width:638px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you combine these 2 points, you can see how this protects your users:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;By monitoring the CT logs, you can quickly identify any fraudulent or misissued certificates for yur domains and have them revoked.&lt;/li&gt;
  &lt;li&gt;If the certificate is issued by a CT that doesn’t pop up in these logs, it’s simply rejected by the browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-monitor-ct-logs&quot;&gt;How to monitor CT logs&lt;/h3&gt;
&lt;p&gt;Of course the whole premise of this solution is that you actually monitor the CT logs for your domains.
If you don’t do this, you’re still at risk of someone obtaining a fraudulent certificate and impersonating you.
Fortunately, there are plenty of companies and tools out there that can help you out with this.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SSLMate offers an open source tool called &lt;a href=&quot;https://github.com/SSLMate/certspotter&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Certspotter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;If you don’t want to run it yourself, you can &lt;a href=&quot;https://sslmate.com/certspotter/&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;pay them&lt;/a&gt; to do it for you.&lt;/li&gt;
  &lt;li&gt;For smaller (personal) projects, you can use &lt;a href=&quot;https://developers.facebook.com/tools/ct/&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Facebook&lt;/a&gt;’s monitor.&lt;/li&gt;
  &lt;li&gt;Or you use one of the other APIs or services that are available.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What’s important is that you get the reports quickly so you can immediately take action.&lt;/p&gt;

&lt;h3 id=&quot;use-the-header&quot;&gt;Use the header&lt;/h3&gt;
&lt;p&gt;Since (to my knowledge) browsers don’t have psychic powers (yet?), you still need to tell it that you expect the CA to have CT enabled.
For that you’ll need to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;Expect-CT&lt;/code&gt; header on your responses.
Obviously it will only look for these on an HTTPS URL, since on a simple HTTP connection it can easily be added or removed by a MitM.&lt;/p&gt;

&lt;p&gt;The header looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http request
Expect-CT: enforce, max-age=31536000, report-uri=&quot;https://example.com&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This tells the browser to &lt;strong&gt;enforce&lt;/strong&gt; the CT rule and to do so for the next year.
Any infractions will be sent to the &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt; you mentioned.
As with all headers that contain a &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt;, you can also use &lt;a href=&quot;https://report-uri.io&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;report-uri.io&lt;/a&gt; to aggregate these logs.&lt;/p&gt;

&lt;p&gt;As with most things that stand a chance of rendering your site inaccessible, it pays to be cautious when adding this header.
Typically you don’t want to start by adding this header as defined above.
Instead, you want to deploy it first &lt;em&gt;without&lt;/em&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;enforce&lt;/code&gt; directive (and preferably a very low &lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt; such as 0)
Doing so will tell the browser that you don’t want it to &lt;strong&gt;block&lt;/strong&gt; connections with a bad certificate, but just to send the error to the &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt;.
This setup allows you to test without impacting your users: you can now monitor this for a while to see if everything still works as expected.
After that, enable the &lt;code class=&quot;highlighter-rouge&quot;&gt;enforce&lt;/code&gt; directive and slowly increase the &lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt; to the point you want it to be.&lt;/p&gt;

&lt;h3 id=&quot;risks&quot;&gt;Risks&lt;/h3&gt;
&lt;p&gt;The risk of adding this header is quite low, if you follow the procedure above.
You should only make sure that your CA actually uses CT.
However, since October 2017 Chrome has made this a requirement in order for CAs to be in the trust-store.
The main risk lies in not monitoring the CT logs properly. 
If you don’t monitor the alerts or don’t have a procedure to deal with misissued certificates, you’re still at risk of impersonation.&lt;/p&gt;

&lt;h3 id=&quot;caveats&quot;&gt;Caveats&lt;/h3&gt;
&lt;p&gt;Unfortunately, there’s one major caveat to using this header.
At the time of writing, only Chrome fully supports Expect-CT.
Mozilla has also indicated that they will support it, but Microsoft so far doesn’t seem to be following suit.&lt;/p&gt;

&lt;h3 id=&quot;should-you-use-it&quot;&gt;Should you use it?&lt;/h3&gt;
&lt;p&gt;Yes. The risk is minimal, the only downside at the moment is the lack of browser support.
At the very least, a large percentage of your users enjoys added protection against MitM attacks.&lt;/p&gt;

&lt;h2 id=&quot;certificate-authority-authorization&quot;&gt;Certificate Authority Authorization&lt;/h2&gt;
&lt;p&gt;The downside of Expect-CT compared to Public Key Pinning (HPKP) is that you need to make sure that your monitoring is handled correctly.
If you don’t notice on time that a certificate has been issued, an attacker may be able to impersonate you for some time.
You can make this a lot harder on the attacker by using Certificate Authority Authorization (CAA).
CAA is a way for you to indicate exactly who is allowed to issue certificates for your domain.&lt;/p&gt;

&lt;h3 id=&quot;how-to-implement&quot;&gt;How to implement?&lt;/h3&gt;
&lt;p&gt;Since the issuance of certificates is not limited to websites, CAA is not implemented through HTTPS response headers, instead it’s a record that you need to put in your DNS settings.
You simply add the correct record to your DNS like this:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;example.com.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CAA&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0 issue &quot;;&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: the example above prevents all CAs from issuing certificates for your site. 
Don’t just copy-paste this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can have multiple CAA records and the value of these tells the CA exactly what you want.
Since this is a bit cryptic, lets look a bit more in detail at what’s happening here.&lt;/p&gt;

&lt;p&gt;The value above consists of 3 parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the flag (&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;the tag (&lt;code class=&quot;highlighter-rouge&quot;&gt;issue&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;the value (&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;;&quot;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The combination of tag and value can be referred to as “the property”.
The whole of CAA is governed by &lt;a href=&quot;https://tools.ietf.org/html/rfc6844&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RFC 6844&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;flags&quot;&gt;Flags&lt;/h4&gt;
&lt;p&gt;Currently, flags can have 2 values: &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;128&lt;/code&gt;.
A value of &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; means the property is non-critical, while a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;128&lt;/code&gt; means that is is critical.
If a property is marked as critical, the CA must completely understand it before it proceeds.
Generally it’s correct to use &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, so it’s advised to always use that value.
There is support for customized flags in the RFC, but that’s beyond the scope of this post.&lt;/p&gt;

&lt;h4 id=&quot;tags&quot;&gt;Tags&lt;/h4&gt;
&lt;p&gt;The current specification has 3 tags you can define:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;issue&lt;/code&gt; specifies which CA is authorized to issue certificates&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;issuewild&lt;/code&gt; indicates which CA is authorized to issue &lt;strong&gt;wildcard&lt;/strong&gt; certificates (e.g. for &lt;code class=&quot;highlighter-rouge&quot;&gt;*.example.com&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iodef&lt;/code&gt; similar to report-uri you can use this to get reports on invalid requests (either to an email address or to an http endpoint)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;issue&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;issue&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;This tag specifies which CA is allowed to issue certificates for the domain and its subdomains.
This includes the wildcard subdomain (meaning that the certificate would be valid for &lt;em&gt;all&lt;/em&gt; subdomains).
A value of “;” indicates that no issuance is allowed.
You’re allowed to define multiple CAs, but you’ll need to use a new DNS record for each one:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;example.com.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CAA&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0 issue &quot;ca1.com&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;example.com.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CAA&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0 issue &quot;otherca.net&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;issuewild&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;issuewild&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;This one is used explicitly for wildcard certificates.
If &lt;code class=&quot;highlighter-rouge&quot;&gt;issuewild&lt;/code&gt; is present, any values in &lt;code class=&quot;highlighter-rouge&quot;&gt;issue&lt;/code&gt; may not be used in the issuance of a wildcard certificate.
You can use this in case you never want a wildcard certificate to be issued or when the list of CAs that are allowed to issue wildcard certificates differs from the original list.&lt;/p&gt;

&lt;h5 id=&quot;iodef&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iodef&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;You can use this tag to report invalid certificate requests:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;example.com.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CAA&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0 iodef &quot;mailto:certificates@example.com&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;example.com.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CAA&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0 iodef &quot;https://certificate.example.com/endpoint&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As you can see, you can either have these reports sent by email, of have them delivered to an HTTP endpoint.
The report is sent in the IODEF format, which also means that your endpoint needs to be &lt;a href=&quot;https://www.ietf.org/rfc/rfc6546.txt&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RFC 6546&lt;/a&gt; compliant.&lt;/p&gt;

&lt;h3 id=&quot;the-easy-way&quot;&gt;The easy way&lt;/h3&gt;
&lt;p&gt;To help you in creating your CAA, SSL Mate has released a useful tool: &lt;a href=&quot;https://sslmate.com/caa/&quot; target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CAA Record Helper&lt;/a&gt;.
It can help you create a CAA record and will tell you how to set it up in your DNS service.
&lt;img src=&quot;/img/2018-hpkp-deprecation/sslmate.png&quot; alt=&quot;CAA Record Helper&quot; class=&quot;image fit&quot; style=&quot;max-width:881px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;risks-1&quot;&gt;Risks&lt;/h3&gt;
&lt;p&gt;A badly implemented CAA record can mean that your CA is not allowed to issue your certificate.
The other risk is that it relies on DNS: DNS records can be spoofed and this might allow an attacker to trick a CA into issuing a fraudulent certificate.
Because of this, the RFC recommends implementing DNSSEC (Domain Name Security Extensions).&lt;/p&gt;

&lt;h3 id=&quot;should-i-use-it&quot;&gt;Should I use it?&lt;/h3&gt;
&lt;p&gt;I’d suggest you do. 
While having an incorrect policy can prevent the CA from issuing a certificate, this situation can be rectified quickly and shouldn’t put your users at risk.
It will make it a lot harder for an attacker to obtain a certificate.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;De Grande&quot;, &quot;twitter&quot;=&gt;&quot;TimDG&quot;, &quot;linkedin&quot;=&gt;&quot;timdegrande&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-de-grande/&quot;, &quot;avatar&quot;=&gt;&quot;tim-de-grande.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Aplication Security&quot;, &quot;email&quot;=&gt;&quot;tim.degrande@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a principal Java Consultant at Ordina who is interested in security, cryptography and privacy. As Compentence Leader Application Security, he keeps his colleagues up to date on the latest security news and works to broaden their understanding by giving workshops and classes.&quot;}</name><email>tim.degrande@ordina.be</email></author><category term="Security" /><category term="Security" /><category term="Browser features" /><category term="Response headers" /><category term="HPKP" /><category term="CAA" /><category term="Expect-CT" /><summary type="html">HPKP is deprecated. What now?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/security/padlock_code.jpg" /></entry><entry><title type="html">Azure Draft</title><link href="https://ordina-jworks.github.io/docker/2018/02/12/Azure-Draft.html" rel="alternate" type="text/html" title="Azure Draft" /><published>2018-02-12T00:00:00+00:00</published><updated>2018-02-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/docker/2018/02/12/Azure-Draft</id><content type="html" xml:base="https://ordina-jworks.github.io/docker/2018/02/12/Azure-Draft.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-draft&quot;&gt;Installing Draft&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-sail-with-draft&quot;&gt;Setting Sail with Draft&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Azure/draft&quot;&gt;Draft&lt;/a&gt; is an open-source tool from Microsoft Azure.
It attempts to make the development for Kubernetes clusters easier, 
by getting Docker and Kubernetes out of the way.&lt;/p&gt;

&lt;p&gt;Developers no longer require Docker,
and can just push their applications to a remote Kubernetes clusters using Draft.
Draft accomplishes this by using only two simple commands.&lt;/p&gt;

&lt;p&gt;The first command is &lt;code class=&quot;highlighter-rouge&quot;&gt;draft create&lt;/code&gt;.
This tool detects the application language, 
and writes out a Dockerfile and a &lt;a href=&quot;https://github.com/kubernetes/helm&quot;&gt;Kubernetes Helm&lt;/a&gt; chart in the source tree.
These files are generated based on Draft “packs”.
These packs are simple scripts that only detect the language
and write out the Dockerfile and Helm charts.
The idea is based on some features of PaaS systems like the CloudFoundry’s &lt;em&gt;buildpacks&lt;/em&gt;.
The only difference is that the build and deployment descriptors are stored in the source tree.&lt;/p&gt;

&lt;p&gt;The second command is &lt;code class=&quot;highlighter-rouge&quot;&gt;draft up&lt;/code&gt;.
First, all source code will be uploaded to any Kubernetes cluster, 
local or remote.
Then, the application is built on the cluster using the generated Dockerfile.
Finally, the built image is deployed to a dev environment using the Helm Chart.&lt;/p&gt;

&lt;p&gt;Draft does not support many languages yet, 
but it currently supports most of the popular languages like Java, Python, Golang, JavaScript, Ruby, Swift, PHP, C# and Clojure.
It also has support for Gradle and Maven projects.
You can see all packs &lt;a href=&quot;https://github.com/Azure/draft/tree/master/packs&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;installing-draft&quot;&gt;Installing Draft&lt;/h2&gt;

&lt;p&gt;Before you can start using Draft,
there are quite a few components that need to be set up.
However, 
if you are using a remote Kubernetes cluster,
you will only need to do the setup once for multiple developers.
Other developers will only need to install the Draft client to benefit.
For this example, we will be using Minikube, 
a local Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;The total list of tools required is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Minikube: a local Kubernetes cluster&lt;/li&gt;
  &lt;li&gt;kubectl: the CLI tool for working with Kubernetes&lt;/li&gt;
  &lt;li&gt;Tiller: the Helm agent running on the Kubernetes cluster which manages installations of your charts.&lt;/li&gt;
  &lt;li&gt;Helm: the Helm client&lt;/li&gt;
  &lt;li&gt;Draftd: the Draft agent running on the Kubernetes cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Downloading all dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will start by installing the latest release of Minikube using &lt;a href=&quot;https://github.com/Homebrew/brew&quot;&gt;Homebrew&lt;/a&gt;.
If you do not have Homebrew,
you can check how to install Minikube &lt;a href=&quot;https://kubernetes.io/docs/tasks/tools/install-minikube/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew cask install minikube
==&amp;gt; Satisfying dependencies
All Formula dependencies satisfied.
==&amp;gt; Downloading https://storage.googleapis.com/minikube/releases/v0.25.0/minikube-darwin-amd64
==&amp;gt; Verifying checksum for Cask minikube
==&amp;gt; Installing Cask minikube
==&amp;gt; Linking Binary 'minikube-darwin-amd64' to '/usr/local/bin/minikube'.
minikube was successfully installed!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After Minikube has been installed,
we can install Azure Draft!
First, we add the Azure Draft repository by adding a Homebrew tap.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew tap azure/draft
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have added the repository,
we can install Draft!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew install draft
==&amp;gt; Installing draft from azure/draft
==&amp;gt; Downloading https://azuredraft.blob.core.windows.net/draft/draft-v0.10.1-darwin-amd64.tar.gz
/usr/local/Cellar/draft/0.10.1: 5 files, 45.9MB, built in 1 second
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you do not use Homebrew,
you can download the latest release of Draft &lt;a href=&quot;https://github.com/Azure/draft/releases&quot;&gt;here&lt;/a&gt;.
You will have to unzip the download and add it to your PATH manually.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Starting Minikube&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we have downloaded all required dependencies,
we can start setting up our cluster.
Let’s start our Kubernetes cluster.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube start
Starting local Kubernetes v1.9.0 cluster...
Starting VM...
Downloading Minikube ISO
Getting VM IP address...
Moving files into cluster...
Downloading localkube binary
Connecting to cluster...
Setting up kubeconfig...
Starting cluster components...
Kubectl is now configured to use the cluster.
Loading cached images from config file.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The cluster is up and ready. 
As you can see from the output,
Minikube also configured our kubectl client by automatically creating a .kubeconfig file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl cluster-info
Kubernetes master is running at https://192.168.99.100:8443

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Enabling the Docker Registry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To be able to use our Draft agent on the server,
we will need to enable the embedded Docker registry on the cluster.
Minikube makes this straightforward using an addon.
We only need to enable it!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube addons enable registry
registry was successfully enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Installing Helm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our Minikube up and running,
we can install the Helm server agent (Tiller) and the Helm client.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ helm init
$HELM_HOME has been configured at /Users/tomverelst/.helm.

Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.
Happy Helming!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even though Tiller is installed now,
you must wait for it to be deployed.
Wait until there is one instance ready!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl -n kube-system get deploy tiller-deploy --watch
NAME            DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
tiller-deploy   1         1         1            1           4m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Installing Draft&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All requirements are set up now for Draft.
Let’s install the final component: Draft!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ draft init --auto-accept
Installing default plugins...
Installation of default plugins complete
Installing default pack repositories...
Installing pack repo from https://github.com/Azure/draft
Error: Unable to update checked out version: exit status 128
Error: exit status 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Uh, oh! Seems like Git cannot clone the Draft pack repo.
According to &lt;a href=&quot;https://github.com/Azure/draft/issues/522&quot;&gt;this GitHub issue&lt;/a&gt;,
this happens with Git version 2.16+.&lt;/p&gt;

&lt;p&gt;If you have this error, the workaround currently is to manually add a specific version of the pack repo.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ draft pack-repo add https://github.com/Azure/draft --version v0.10.0
Installing pack repo from https://github.com/Azure/draft
Installed pack repository github.com/Azure/draft
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We manually installed the Draft pack repo now. 
Let’s try to set up Draft again.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ draft init --auto-accept
Installing default plugins...
Installation of default plugins complete
Installing default pack repositories...
Installation of default pack repositories complete
$DRAFT_HOME has been configured at /Users/tomverelst/.draft.

Draft detected that you are using minikube as your cloud provider. AWESOME!
Draftd has been installed into your Kubernetes Cluster
Happy Sailing!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great.
The workaround works! 
As you can see, Draft is still in alpha and will not properly work yet.&lt;/p&gt;

&lt;p&gt;This setup is of course for local development.
If you want to have a production ready, RBAC enabled, Draft setup on a remote Kubernetes cluster,
you can take a look at the &lt;a href=&quot;https://github.com/Azure/draft/blob/master/docs/install-advanced.md&quot;&gt;Advanced Installation guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setting-sail-with-draft&quot;&gt;Setting Sail with Draft&lt;/h2&gt;

&lt;p&gt;If you managed to get to this point,
you either went through all the effort to set everything up,
or you skipped to this part!&lt;/p&gt;

&lt;p&gt;We can now start drafting up some applications. 
Since I am a fan of Go, 
I will start with drafting up a Go application.
Here is a simple Go application that listens on port 8080 and returns “Hello Draft!”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;net/http&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello Draft!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:8080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s run it to see if it works.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ go run main.go

# Open a separate terminal
$ curl localhost:8080
Hello, Draft!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The application works. 
Now we can let Draft create the Dockerfile and the Helm chart.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ draft create
--&amp;gt; Draft detected Go (100.000000%)
--&amp;gt; Ready to sail
$ ls
Dockerfile	charts		draft.toml	main.go
$ ls charts/go
Chart.yaml	charts		templates	values.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Draft detected that it was a Go application, 
It generated a Dockerfile and the Draft deployment descriptor,
and it also copied the Go pack to the &lt;code class=&quot;highlighter-rouge&quot;&gt;charts&lt;/code&gt; directory.
This is great, as it enables the possibility to customize the pack for this specific application.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the generated Dockerfile.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat Dockerfile
FROM golang:onbuild
ENV PORT 8080
EXPOSE 8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The official Golang &lt;em&gt;onbuild&lt;/em&gt; image is used.
This image is great for development purposes,
but I would not recommend using this image for production purposes,
as it is around &lt;strong&gt;700MB&lt;/strong&gt;, 
while the application is only a few lines of code.&lt;/p&gt;

&lt;p&gt;For demo purposes, 
let’s continue to use this generated Dockerfile,
and try to deploy our application on Kubernetes using Draft.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ draft up
Draft Up Started: 'goapp'
goapp: Building Docker Image: SUCCESS ?  (60.1681s)
goapp: Pushing Docker Image: SUCCESS ?  (63.0775s)
goapp: Releasing Application: SUCCESS ?  (0.5346s)
goapp: Build ID: 01C653GK70A7SR2FMT2325TBHD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Building and pushing this application took around 2 minutes,
which seems pretty long,
but that is highly likely because of the 700MB base Docker image.
This image first needs to be downloaded.
Then it needs to be pushed to the registry.&lt;/p&gt;

&lt;p&gt;We can connect to the application using &lt;code class=&quot;highlighter-rouge&quot;&gt;draft connect&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ draft connect
Connecting to your app...SUCCESS...Connect to your app on localhost:50066
Starting log streaming...
+ exec app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s see how the application is installed on our cluster.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl get deployment
NAME       DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
goapp-go   2         2         2            2           5m

$ kubectl get svc
NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE
goapp-go     ClusterIP   10.103.78.13   &amp;lt;none&amp;gt;        80/TCP    4m
kubernetes   ClusterIP   10.96.0.1      &amp;lt;none&amp;gt;        443/TCP   1h

$ kubectl get pods
NAME                       READY     STATUS    RESTARTS   AGE
goapp-go-88f4b7bc7-4cltn   1/1       Running   0          4m
goapp-go-88f4b7bc7-wt7kx   1/1       Running   0          4m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see,
our application has successfully been deployed to Kubernetes,
and is deployed using a Kubernetes &lt;em&gt;Deployment&lt;/em&gt; resource.&lt;/p&gt;

&lt;p&gt;The services are not exposed by default,
so we will need to either use &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl port-forward &amp;lt;pod&amp;gt; 8080&lt;/code&gt;,
or SSH into our cluster.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube ssh
$ curl 10.103.78.13
Hello Draft! 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to expose your applications automatically using Draft,
you can use a Kubernetes &lt;em&gt;Ingress Controller&lt;/em&gt; for this.
You will need to enable an &lt;em&gt;Ingress Controller&lt;/em&gt; in Kubernetes (&lt;code class=&quot;highlighter-rouge&quot;&gt;minikube addons enable ingress&lt;/code&gt;),
and initialize draft with the &lt;code class=&quot;highlighter-rouge&quot;&gt;--ingress-enabled&lt;/code&gt; flag.
More information about this can be found &lt;a href=&quot;https://github.com/Azure/draft/blob/master/docs/ingress.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploying changes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Draft is meant to be used during development,
so it is important we can push changes.
Let’s make a change to our application.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func handler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, &quot;Bye Draft!&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have made some changes,
let’s try to deploy our new version.
This is done using the same command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ draft up
Draft Up Started: 'goapp'
goapp: Building Docker Image: SUCCESS ?  (12.0163s)
goapp: Pushing Docker Image: SUCCESS ?  (16.0110s)
goapp: Releasing Application: SUCCESS ?  (0.2311s)
goapp: Build ID: 01C65507WTBX5EAJKWWR53T652
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The build time has gone down from 2 minutes, to 28 seconds.
This is because the Golang Docker image no longer needs to be downloaded and/or pushed to the Docker registry.&lt;/p&gt;

&lt;p&gt;The deployment is updated with the new version of the application.
Old pods are taken down by Kubernetes and new ones are started.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl get pods
NAME                        READY     STATUS              RESTARTS   AGE
goapp-go-6fb684d887-2kq69   0/1       ContainerCreating   0          23s
goapp-go-6fb684d887-qmth6   1/1       Running             0          23s
goapp-go-88f4b7bc7-wt7kx    0/1       Terminating         0          19m

$ minikube ssh
$ curl 10.103.78.13
Bye  Draft! 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Our changes are now deployed to the Kubernetes cluster!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Draft is great for local development using Kubernetes.
It is meant to be used before committing and pushing your code.&lt;/p&gt;

&lt;p&gt;Applications can be deployed to Kubernetes within minutes,
without requiring to write Dockerfiles and/or Kubernetes resource files.&lt;/p&gt;

&lt;p&gt;Azure Draft is still experimental for now, 
but the development team is active, 
and I have not run into many issues yet.&lt;/p&gt;

&lt;p&gt;It brings one of CloudFoundry’s best features, namely build packs, to Kubernetes.
It’s definitely worth a try!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://draft.sh&quot;&gt;Draft website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/azure/draft&quot;&gt;Draft GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://helm.sh/&quot;&gt;Helm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tom&quot;, &quot;last_name&quot;=&gt;&quot;Verelst&quot;, &quot;permalink&quot;=&gt;&quot;/author/tom-verelst/&quot;, &quot;avatar&quot;=&gt;&quot;tom-verelst.png&quot;, &quot;twitter&quot;=&gt;&quot;tomverelst&quot;, &quot;linkedin&quot;=&gt;&quot;tomverelst&quot;, &quot;github&quot;=&gt;&quot;tomverelst&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Cloud Native Platforms&quot;, &quot;email&quot;=&gt;&quot;tom.verelst@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tom is a senior software engineer at Ordina Belgium. He is fond of all things Go and DevOps.&quot;}</name><email>tom.verelst@ordina.be</email></author><category term="Docker" /><category term="Azure" /><category term="Draft" /><category term="Kubernetes" /><category term="Helm" /><category term="Docker" /><category term="CloudFoundry" /><category term="PaaS" /><summary type="html">Table of contents Introduction Installing Draft Setting Sail with Draft Conclusion</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-02-12-Azure-Draft/draft-logo.png" /></entry><entry><title type="html">Mocking in Kotlin with MockK</title><link href="https://ordina-jworks.github.io/testing/2018/02/05/Writing-tests-in-Kotlin-with-MockK.html" rel="alternate" type="text/html" title="Mocking in Kotlin with MockK" /><published>2018-02-05T00:00:00+00:00</published><updated>2018-02-05T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2018/02/05/Writing-tests-in-Kotlin-with-MockK</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2018/02/05/Writing-tests-in-Kotlin-with-MockK.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mockito-and-its-shortcomings-in-kotlin&quot;&gt;Mockito and its shortcomings in Kotlin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-idiomatic-mocking-framework-for-kotlin&quot;&gt;The idiomatic mocking framework for Kotlin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summing-it-all-up&quot;&gt;Summing it all up&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#other-useful-links&quot;&gt;Other useful links&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I have been pretty excited about Kotlin since JetBrains released the &lt;a href=&quot;https://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/&quot; target=&quot;_blank&quot;&gt;first official version&lt;/a&gt; on the 15th of February 2016.
It did take me a while before I managed to get my hands dirty, which was in between the version 1.1 and 1.2 release.
Besides developing in Java, which I’m doing full time as a senior Java consultant, 
I’ve also been dabbling in Scala for quite some years with Lightbend’s &lt;a href=&quot;https://www.playframework.com&quot; target=&quot;_blank&quot;&gt;Play Framework&lt;/a&gt;.
Everyone knows how verbose Java is, and how it lags a bit behind the newer, fancier programming languages.
It still misses features such as pattern matching, case/data classes and local-variable type inference.&lt;/p&gt;

&lt;p&gt;Starting from Java 8 with the introduction of Lambdas, we have finally been given the option to add a more functional programming flavour to our code which was due in time.
Scala felt very refreshing for me back then, when I started to use it which was shortly before the JDK 7 release.
It felt clean and powerful, bringing the best of both worlds of object-oriented programming and functional programming.
At the same time, Scala houses a lot of complexity since there are so many ways and styles to tackle problems.
You could compare it a bit to having the toolkit available to build a space rocket when you only plan on building a small airplane. 
And this is where Kotlin comes in, being very similar to Scala but with a focus on practicality and simplicity.
Coming from the industry instead of academia, it focuses on solving problems faced daily by programmers.&lt;/p&gt;

&lt;p&gt;I’m a big fan of Test-Driven Development and thoroughly testing the behaviour of my code by making use of mocks.
&lt;a href=&quot;http://site.mockito.org&quot; target=&quot;_blank&quot;&gt;Mockito&lt;/a&gt; has been my mocking framework of choice combined with &lt;a href=&quot;https://github.com/powermock/powermock&quot; target=&quot;_blank&quot;&gt;PowerMock&lt;/a&gt; for mocking constructors, static and private methods, and more.
As Kotlin also runs on the JVM, it can make use of the huge Java ecosystem.
It was a no-brainer for me to immediately add these testing libraries to my Kotlin project for writing my tests.&lt;/p&gt;

&lt;p&gt;And thus I set off, creating a new Kotlin project to see how it fared.&lt;/p&gt;

&lt;h2 id=&quot;mockito-and-its-shortcomings-in-kotlin&quot;&gt;Mockito and its shortcomings in Kotlin&lt;/h2&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:500px;&quot; alt=&quot;Mockito logo&quot; src=&quot;/img/writing-tests-in-kotlin-with-mockk/mockito.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;I started off with adding the Mockito dependency to my Kotlin project.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.mockito&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mockito-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.13.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And wrote a first simple test in which I wanted to test a &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; class that uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;Generator&lt;/code&gt; to generate a record and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dao&lt;/code&gt; for persisting it.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Random String that's not random&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Inserting &quot;$record&quot;&quot;&quot;&quot;) }
&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mockedRecord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mocked String&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;`when`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verifyNoMoreInteractions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Writing the test went pretty smooth although the code looks a bit funky.
When I ran it, I stumbled on this nice error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;org.mockito.exceptions.base.MockitoException: 
Cannot mock/spy class be.yannickdeturck.HelloTest$Generator
Mockito cannot mock/spy because :
 - final class
 — anonymous classes
 — primitive types
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As all classes and methods are final by default in Kotlin, using Mockito appears to be a bit problematic due to how Mockito creates its mocks.
If you are interested in how Mockito’s mocking works internally you should checkout &lt;a href=&quot;https://stackoverflow.com/a/14447878/1320126&quot; target=&quot;_blank&quot;&gt;this response on StackOverflow&lt;/a&gt; that roughly sums it up.&lt;/p&gt;

&lt;p&gt;I did a bit more research on using Mockito and stumbled upon this &lt;a href=&quot;https://github.com/nhaarman/mockito-kotlin&quot; target=&quot;_blank&quot;&gt;slightly tuned version&lt;/a&gt; for Kotlin, wrapping some of Mockito’s functionalities, providing a simpler API.
I decided to try that one out and replaced my Mockito dependency with it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.nhaarman&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mockito-kotlin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.5.0&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I rewrote my test a bit in order to make use of the cleaner syntax the library had to offer.
Note how both defining and using the mocks is a bit more elegant:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Random String that's not random&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Inserting &quot;$record&quot;&quot;&quot;&quot;) }
&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mockedRecord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mocked String&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;whenever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verifyNoMoreInteractions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sadly, we still have the Mockito error.&lt;/p&gt;

&lt;p&gt;As I said, in Kotlin all classes and methods are final by default which &lt;a href=&quot;https://github.com/mockito/mockito/issues/657&quot; target=&quot;_blank&quot;&gt;Mockito cannot deal with&lt;/a&gt;.
You would have to explicitly make your classes inheritable using the &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; modifier.
Another approach would be to add interfaces to everything.
Changing your code just for the sake of being able to write good tests is something I’m not exactly fond of, and in this case we are also getting around one of the key features of Kotlin.&lt;/p&gt;

&lt;p&gt;Starting from Mockito version &lt;code class=&quot;highlighter-rouge&quot;&gt;2.0.0&lt;/code&gt; it did &lt;a href=&quot;https://github.com/mockito/mockito/wiki/What%27s-new-in-Mockito-2#unmockable&quot; target=&quot;_blank&quot;&gt;became possible to mock final classes&lt;/a&gt; although it is an incubating, opt-in feature.
This however, requires a bit of a setup really.
It basically consists of creating a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;org.mockito.plugins.MockMaker&lt;/code&gt; with as content &lt;code class=&quot;highlighter-rouge&quot;&gt;mock-maker-inline&lt;/code&gt; and placing it under &lt;code class=&quot;highlighter-rouge&quot;&gt;resources/mockito-extensions&lt;/code&gt;.
It felt a bit hacky but apparently this is only a temporary way to set it up.
Although there are supposed to be plans to make it more straightforward.
&lt;a href=&quot;https://twitter.com/hhariri&quot; target=&quot;_blank&quot;&gt;Hadi Hariri&lt;/a&gt; wrote an extensive &lt;a href=&quot;http://hadihariri.com/2016/10/04/Mocking-Kotlin-With-Mockito/&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt; on setting this up and you should check it out if you would like to learn more about it.&lt;/p&gt;

&lt;p&gt;Good, so this makes it possible to create mocks without having to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; modifier to all your classes and methods!
It does’t appear to be completely compatible with Mockito Kotlin even though the library depends on Mockito version &lt;code class=&quot;highlighter-rouge&quot;&gt;2.8.9&lt;/code&gt;.
Trying to run the test resulted in the following error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;org.mockito.exceptions.base.MockitoInitializationException: 
Could not initialize inline Byte Buddy mock maker. (This mock maker is not supported on Android.)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the time of writing there is a version &lt;code class=&quot;highlighter-rouge&quot;&gt;2.0.0&lt;/code&gt; in alpha for Mockito Kotlin so I tried to switch to it to see if it changed anything.
Note that the dependency is a bit different and you need to use the classes in the &lt;code class=&quot;highlighter-rouge&quot;&gt;com.nhaarman.mockitokotlin2&lt;/code&gt; package:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.nhaarman.mockitokotlin2&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mockito-kotlin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.0.0-alpha02&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It got rid of the above error.
I did ran into some unexpected behaviour where my mocks’ behaviour was rather unexpected when I also added partial mocking using spies.
I spent some time to get my head around it and during my quest for answers I stumbled upon this library called &lt;a href=&quot;http://mockk.io&quot; target=&quot;_blank&quot;&gt;MockK&lt;/a&gt;, created by &lt;a href=&quot;https://twitter.com/oleksiyp&quot; target=&quot;_blank&quot;&gt;Oleksiy Pylypenko&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I decided to check it out as I became a bit annoyed with Mockito in Kotlin so far.&lt;/p&gt;

&lt;h2 id=&quot;the-idiomatic-mocking-framework-for-kotlin&quot;&gt;The idiomatic mocking framework for Kotlin&lt;/h2&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:500px;&quot; alt=&quot;MockK logo&quot; src=&quot;/img/writing-tests-in-kotlin-with-mockk/mockk.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Although I am a huge fan of Mockito for mocking in Java, using Mockito in Kotlin just feels a bit too Java-ish when you have this elegant Kotlin code all around in your project. 
MockK’s main philosophy is offering first-class support for Kotlin features and being able to write idiomatic Kotlin code when using it.
Adding MockK is as simple as ever as you only have to add the dependency to your project and you are set to go.&lt;/p&gt;

&lt;p&gt;Maven:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.mockk&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mockk&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.7.1&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Gradle:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;testCompile &quot;io.mockk:mockk:1.7.1&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The available &lt;a href=&quot;http://mockk.io&quot; target=&quot;_blank&quot;&gt;MockK documentation&lt;/a&gt; provides a really nice overview of all the different features with a lot of examples, making it very easy to get started.
If you have used a mocking framework before such as Mockito, everything should come natural as you usually do when writing tests with mocks.
You have the same three parts in which your tests are divided:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Preparing the test data and setting up the mocking&lt;/li&gt;
  &lt;li&gt;Executing the logic that you want to test&lt;/li&gt;
  &lt;li&gt;Performing the necessary validation and verification checks to see if the result and behaviour matches your expectations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The test from above is written as follows:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Random String that's not random&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Inserting &quot;$record&quot;&quot;&quot;&quot;) }
&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mockedRecord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mocked String&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;every&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockedRecord&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;every&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runs&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;verifyAll&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Going over the example, everything should feel familiar but more elegant.
You may however, wonder what the &lt;code class=&quot;highlighter-rouge&quot;&gt;every { dao.insert(mockedRecord) } just Runs&lt;/code&gt; line is doing exactly.
By default in MockK, mocks are strict so you need to provide some behaviour for them.
If we were to omit the line, the test would fail as we would run into the following error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;io.mockk.MockKException: no answer found for: Dao(#2).insert(mocked String)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A feature I was immediately fond of as I like to write strict tests.
Note that you can also define the mock as being a &lt;em&gt;relaxed mock&lt;/em&gt; in order to avoid this strict behaviour:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relaxed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mockito has something similar for verifying with &lt;code class=&quot;highlighter-rouge&quot;&gt;Mockito.verifyNoMoreInteractions(generator, dao)&lt;/code&gt; which I also extensively use to enforce that all calls of mocked objects are verified.
Of course, the above example is only the tip of the iceberg as MockK houses a ton of other features such as annotations to simplify creating mock objects, 
spying to mix mocks and real objects, partial argument matching, capturing arguments, verification order support, matchers, coroutine mocking support, and so much more.&lt;/p&gt;

&lt;p&gt;After fiddling with Mockito, I happily continued using MockK for my little Kotlin project.&lt;/p&gt;

&lt;h2 id=&quot;summing-it-all-up&quot;&gt;Summing it all up&lt;/h2&gt;
&lt;p&gt;Mockito for me felt a bit hacky/unnatural and too Java-ish when using it in a Kotlin project.
I imagine it will probably become better in the near future.&lt;/p&gt;

&lt;p&gt;MockK, being a newer library specifically targeted at Kotlin, felt clean and pleasant to use with excellent documentation.
Oleksiy is also actively working on the library as you can see in the repo’s &lt;a href=&quot;https://github.com/oleksiyp/mockk/releases&quot; target=&quot;_blank&quot;&gt;releases section&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I highly recommend checking out MockK for mocking in a Kotlin project as it is currently a better option in my humble opinion.
Oleksiy is also very active on the &lt;a href=&quot;https://gitter.im/mockk-io/Lobby&quot; target=&quot;_blank&quot;&gt;MockK Gitter&lt;/a&gt; and he helps you out quickly should you have any questions.
He is also open to feedback and enjoys being challenged in order to make MockK an even better library.
If you want to learn more about MockK, you should definitely read Oleksiy’s blog post series in the next section.&lt;/p&gt;

&lt;h2 id=&quot;other-useful-links&quot;&gt;Other useful links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://mockk.io&quot; target=&quot;_blank&quot;&gt;MockK documenation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oleksiyp/mockk&quot; target=&quot;_blank&quot;&gt;MockK GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitter.im/mockk-io/Lobby&quot; target=&quot;_blank&quot;&gt;MockK Gitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/oleksiyp&quot; target=&quot;_blank&quot;&gt;Oleksiy Pylypenko’s Twitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hadihariri.com/2016/10/04/Mocking-Kotlin-With-Mockito/&quot; target=&quot;_blank&quot;&gt;Blog post by Hadi Hariri: Mocking Kotlin with Mockito&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.kotlin-academy.com/mocking-is-not-rocket-science-basics-ae55d0aadf2b&quot; target=&quot;_blank&quot;&gt;Blog post by Oleksiy Pylypenko: Mocking is not rocket science: Basics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.kotlin-academy.com/mocking-is-not-rocket-science-expected-behavior-and-behavior-verification-3862dd0e0f03&quot; target=&quot;_blank&quot;&gt;Blog post by Oleksiy Pylypenko: Mocking is not rocket science: Expected behavior and behavior verification&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.kotlin-academy.com/mocking-is-not-rocket-science-mockk-features-e5d55d735a98&quot; target=&quot;_blank&quot;&gt;Blog post by Oleksiy Pylypenko: Mocking is not rocket science: MockK features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Yannick&quot;, &quot;last_name&quot;=&gt;&quot;De Turck&quot;, &quot;twitter&quot;=&gt;&quot;YannickDeTurck&quot;, &quot;linkedin&quot;=&gt;&quot;yannickdeturck&quot;, &quot;github&quot;=&gt;&quot;yannickdeturck&quot;, &quot;permalink&quot;=&gt;&quot;/author/yannick-de-turck/&quot;, &quot;avatar&quot;=&gt;&quot;yannick-de-turck.jpg&quot;, &quot;title&quot;=&gt;&quot;Senior Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Lead JVM Languages&quot;, &quot;email&quot;=&gt;&quot;Yannick.DeTurck@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Yannick is a senior Java consultant and competence lead of the JVM languages competence center at Ordina Belgium. He's very much interested in everything Java and Spring related as well as reactive programming, Kotlin, Lightbend technologies, software architectures, and coaching and enabling other colleagues.&quot;}</name><email>Yannick.DeTurck@ordina.be</email></author><category term="Testing" /><category term="Kotlin" /><category term="MockK" /><category term="Unit Testing" /><category term="Mocking" /><category term="Mockito" /><category term="TDD" /><category term="Test-Driven Development" /><summary type="html">Table of contents Introduction Mockito and its shortcomings in Kotlin The idiomatic mocking framework for Kotlin Summing it all up Other useful links</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/writing-tests-in-kotlin-with-mockk/mockk.png" /></entry><entry><title type="html">Visualizing your Spring Integration components &amp;amp; flows</title><link href="https://ordina-jworks.github.io/architecture/2018/01/27/Visualizing-your-Spring-Integration-components-and-flows.html" rel="alternate" type="text/html" title="Visualizing your Spring Integration components &amp; flows" /><published>2018-01-27T00:00:00+00:00</published><updated>2018-01-27T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2018/01/27/Visualizing-your-Spring-Integration-components-and-flows</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2018/01/27/Visualizing-your-Spring-Integration-components-and-flows.html">&lt;blockquote&gt;
  &lt;p&gt;This post can be useful for everyone who wants to have insights on their application’s internal architecture when integrating with other systems using Spring Integration.
From the developer that just started in your team and who wants to have an overview, to the seasoned team member that needs to troubleshoot a problem in production.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Currently we are working on the phased roll out of a microservices architecture at one of our clients.
To ensure that everything works as it’s supposed to we are using a lot of &lt;a href=&quot;http://enterpriseintegrationpatterns.com/&quot; target=&quot;_blank&quot;&gt;Enterprise Integration Patterns&lt;/a&gt; to stitch both the old and the new landscape together.
The best way to achieve a solution when using Java, is to use Spring Integration.
A few days ago we wanted to have clear insights on how certain microservices are communicating with the existing systems.&lt;/p&gt;

&lt;h2 id=&quot;creating-your-graph-of-spring-integration-components-and-flows&quot;&gt;Creating your graph of Spring Integration components and flows&lt;/h2&gt;

&lt;p&gt;A first step to expose your Spring Integration components and flows is to add an &lt;code class=&quot;highlighter-rouge&quot;&gt;IntegrationGraphServer&lt;/code&gt; bean to your application.
This class resides in the &lt;code class=&quot;highlighter-rouge&quot;&gt;o.s.i.support.management.graph&lt;/code&gt; package, between all the required classes to collect, build and render the runtime state of Spring Integration components as a single tree-like &lt;code class=&quot;highlighter-rouge&quot;&gt;Graph&lt;/code&gt; object.&lt;/p&gt;

&lt;h2 id=&quot;exposing-the-graph&quot;&gt;Exposing the graph&lt;/h2&gt;

&lt;p&gt;Using the Spring Integration HTTP module you can easily expose the &lt;code class=&quot;highlighter-rouge&quot;&gt;IntegrationGraphServer&lt;/code&gt; functionality as a REST service.
Just add the &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableIntegrationGraphController&lt;/code&gt; annotation to your application, and you’re good to go!
Or, in case you are using XML config, add the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;int-http:graph-controller/&amp;gt;&lt;/code&gt; XML element to your setup.
Be sure to edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;allowedOrigins&lt;/code&gt; attribute of the annotation in case you’re accessing the endpoint between 2 domains.
Sidenote: your application needs to be deployed on a web container, or it needs to use an embedded web container in case you are building on top of Spring Boot.&lt;/p&gt;

&lt;h2 id=&quot;visualizing-the-exposed-graph-of-components-and-flows&quot;&gt;Visualizing the exposed graph of components and flows&lt;/h2&gt;

&lt;p&gt;With &lt;a href=&quot;https://d3js.org/&quot; target=&quot;_blank&quot;&gt;D3.js&lt;/a&gt; we are able to visualize everything within our graph.
In &lt;a href=&quot;https://gist.github.com/TYsewyn/99f86b42ec4fbedf06db611a1a04bea4&quot; target=&quot;_blank&quot;&gt;this quick &amp;amp; dirty gist&lt;/a&gt; I created, you can find a simple example of a possible visualisation.
Download the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file, point the script to the correct endpoint by editing the &lt;code class=&quot;highlighter-rouge&quot;&gt;graphEndpoint&lt;/code&gt; variable, open the file in your browser and you should see every component and flow!&lt;/p&gt;

&lt;p&gt;As Gary Russell pointed out in &lt;a href=&quot;https://twitter.com/gprussell/status/957370937741111296&quot; target=&quot;_blank&quot;&gt;his reply&lt;/a&gt; to my tweet you can also use Spring Flo for the visualization.
Spring Flo is an Angular based, embeddable graphical component for pipeline/graph building and editing.
This is used as the basis of the stream builder in Spring Cloud Data Flow.
You can find the sample application &lt;a href=&quot;https://github.com/spring-projects/spring-flo/tree/angular-1.x/samples/spring-flo-si&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;taking-it-one-step-further&quot;&gt;Taking it one step further&lt;/h2&gt;

&lt;p&gt;If you add the &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableIntegrationManagement&lt;/code&gt; annotation or the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;int:management /&amp;gt;&lt;/code&gt; XML element to your setup, the graph will even expose all the metrics of your Spring Integration components.
This will definitely help you out when you want to monitor your components and flows, enabling you to troubleshoot problems even faster in case something goes wrong in production.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;Ysewyn&quot;, &quot;avatar&quot;=&gt;&quot;tim-ysewyn.png&quot;, &quot;twitter&quot;=&gt;&quot;TYsewyn&quot;, &quot;linkedin&quot;=&gt;&quot;tysewyn&quot;, &quot;github&quot;=&gt;&quot;TYsewyn&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-ysewyn/&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader API &amp; Microservices&quot;, &quot;email&quot;=&gt;&quot;Tim.Ysewyn@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a Principal Consultant at Ordina, where he helps fellow developers discovering top-notch technologies and methodologies as a Competence Leader for API &amp; Microservices. You can also find him working on various parts of the &lt;a href=\&quot;https://www.spring.io\&quot; target=\&quot;_blank\&quot;&gt;Spring&lt;/a&gt; framework or helping out at &lt;a href=\&quot;https://ng-be.org\&quot; target=\&quot;_blank\&quot;&gt;NG-BE&lt;/a&gt;. When you can\\'t get a hold of him, he will probably be under water since he is also an underwater photographer &amp; rescue diver.&quot;}</name><email>Tim.Ysewyn@ordina.be</email></author><category term="Architecture" /><category term="Spring" /><category term="Integration" /><category term="Spring Integration" /><category term="EIP" /><category term="Microservices" /><summary type="html">This post can be useful for everyone who wants to have insights on their application’s internal architecture when integrating with other systems using Spring Integration. From the developer that just started in your team and who wants to have an overview, to the seasoned team member that needs to troubleshoot a problem in production.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-01-27-Visualizing-your-Spring-Integration-components-and-flows/post-image.jpg" /></entry><entry><title type="html">The JWorks Tech Radar</title><link href="https://ordina-jworks.github.io/tech/2018/01/20/JWorks-Tech-Blog.html" rel="alternate" type="text/html" title="The JWorks Tech Radar" /><published>2018-01-20T00:00:00+00:00</published><updated>2018-01-20T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/tech/2018/01/20/JWorks-Tech-Blog</id><content type="html" xml:base="https://ordina-jworks.github.io/tech/2018/01/20/JWorks-Tech-Blog.html">&lt;blockquote&gt;
  &lt;p&gt;The JWorks Technology Radar is intended to showcase our opinion on the most important tech trends we see today.
It is based on the Thoughtworks Technology Radar and uses its open source framework for visualization.
We adopted the mechanics and methodology from Thoughtworks, as described below.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our tech radar can be reached through &lt;a href=&quot;https://ordina-jworks.github.io/tech-radar&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-radar&quot;&gt;The Radar&lt;/h2&gt;

&lt;p&gt;The Radar is a document that sets out the changes that we think are currently interesting in software development - things in motion that we think you should pay attention to and consider using in your projects.
It reflects the idiosyncratic opinion of a bunch of senior technologists and is based on our day-to-day work and experiences.
While we think this is interesting, it shouldn’t be taken as a deep market analysis.&lt;/p&gt;

&lt;h2 id=&quot;quadrants&quot;&gt;Quadrants&lt;/h2&gt;

&lt;p&gt;The quadrants are a categorization of the type of blips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Programming Languages and Frameworks.&lt;/strong&gt; Quite straight-forward, languages and software frameworks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tools.&lt;/strong&gt; These can be components, such as databases, software development tools, such as Versions Control Systems; or more generic categories of tools, such as the notion of polyglot persistence.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Platforms.&lt;/strong&gt; Things that we build software on top of such as mobile technologies like Android, virtual platforms like the JVM, or generic kinds of platforms like hybrid clouds.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Techniques.&lt;/strong&gt; These include elements of a software development process, such as experience design; and ways of structuring software, such as microservices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We don’t make a big deal out of the quadrants - they’re really just a way to break up the Radar into topic areas. We don’t think it’s important which quadrant a blip goes into, unlike the rings - which generate a lot of discussion.&lt;/p&gt;

&lt;h2 id=&quot;rings&quot;&gt;Rings&lt;/h2&gt;

&lt;p&gt;The metaphor of a radar says that the closer a blip is to you, the sooner it will be on top of you. Like most metaphors, you can’t take it too seriously, but there’s an essential sense to it.&lt;/p&gt;

&lt;p&gt;Our Radar has four rings, which we’ll describe starting from the middle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;Adopt&lt;/strong&gt; ring represents blips that we think you should be using now. We don’t say that you should use these for every project; any tool should only be used in an appropriate context. However we do think that a blip in the Adopt ring represents something where there’s no doubt that it’s proven and mature for use.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;Trial&lt;/strong&gt; ring is for blips that we think are ready for use, but not as completely proven as those in the Adopt ring. So for most organizations we think you should use these on a trial basis, to decide whether they should be part of your toolkit. Typically we’re happy to use trial blips now, but we realize that most readers will be more cautious than us.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;Assess&lt;/strong&gt; ring are things that you should look at closely, but not necessarily trial yet - unless you think they would be a particularly good fit for you. Typically, blips in the Assess ring are things that we’re currently trialling, on our projects.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;Hold&lt;/strong&gt; ring is for things that are getting attention in the industry, but we don’t think are ready for use. Sometimes this is because we don’t think they’re mature enough yet: sometimes it means we think they’re irredeemably flawed. We don’t have an “avoid” ring, but we do throw things in the Hold ring that we wish our clients wouldn’t use.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unlike the quadrants, we do have some quite passionate arguments about which ring a blip should go into. We don’t tend to have angry debates, but rings are what generate the most energetic discussions. Over the course of making the Radar we’ve come up with some useful rules of thumb to help us put things into rings.&lt;/p&gt;

&lt;p&gt;We can only put blips into the Trial ring when we have experience of that blip on a real project. This can mean we sometimes look behind the technology curve, because we may like the look of a technology but haven’t yet persuaded a client to try it out - and until we do that blip cannot pass into Trial.&lt;/p&gt;

&lt;p&gt;For the Adopt ring, we only include items when we think it would be a poor and potentially irresponsible choice not to use them given the appropriate project context.&lt;/p&gt;

&lt;p&gt;More information can be found on the &lt;a href=&quot;https://www.thoughtworks.com/radar/faq&quot;&gt;Thoughtworks website&lt;/a&gt;.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Andreas&quot;, &quot;last_name&quot;=&gt;&quot;Evers&quot;, &quot;permalink&quot;=&gt;&quot;/author/andreas-evers/&quot;, &quot;avatar&quot;=&gt;&quot;andreas-evers.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;email&quot;=&gt;&quot;andreas.evers@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;andreasevers&quot;, &quot;github&quot;=&gt;&quot;andreasevers&quot;, &quot;title2&quot;=&gt;&quot;Practice Leader Backend&quot;, &quot;linkedin&quot;=&gt;&quot;eversandreas&quot;, &quot;bio&quot;=&gt;&quot;Andreas is a Principal Java consultant at Ordina, passionate about the Spring ecosystem, microservices, REST, clean code and best practices in general. An avid open source enthusiast and Spring contributor. Helps fellow developers as Competence Center leader for architecture and best practices by giving workshops, talks and courses about the newest technologies.&quot;}</name><email>andreas.evers@ordina.be</email></author><category term="Tech" /><category term="Tech Radar" /><summary type="html">The JWorks Technology Radar is intended to showcase our opinion on the most important tech trends we see today. It is based on the Thoughtworks Technology Radar and uses its open source framework for visualization. We adopted the mechanics and methodology from Thoughtworks, as described below.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/techradar/TechRadar.png" /></entry><entry><title type="html">Automated testing with Gauge</title><link href="https://ordina-jworks.github.io/testing/2018/01/05/Gauge-automated-testing.html" rel="alternate" type="text/html" title="Automated testing with Gauge" /><published>2018-01-05T00:00:00+00:00</published><updated>2018-01-05T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2018/01/05/Gauge-automated-testing</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2018/01/05/Gauge-automated-testing.html">&lt;p&gt;After finishing a new feature in your web app, you test whether it works.
However, while working on that new feature, you may have broken something else.
If you want to know for sure, you have to test everything.
Clicking around, filling in forms, … will cost you some valuable time.
So, you’ll probably end up not doing it thorough enough or even not at all, assuming everything else still works fine.
That’s exactly why you should have automated tests do it for you!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://getgauge.io/&quot; target=&quot;_blank&quot;&gt;Gauge&lt;/a&gt; is yet another test automation tool that serves that purpose.
The founder is &lt;a href=&quot;https://www.thoughtworks.com/&quot; target=&quot;_blank&quot;&gt;ThoughtWorks&lt;/a&gt;, the company that also created  &lt;a href=&quot;http://www.seleniumhq.org/&quot; target=&quot;_blank&quot;&gt;Selenium&lt;/a&gt; and &lt;a href=&quot;https://www.gocd.org/&quot; target=&quot;_blank&quot;&gt;GoCD&lt;/a&gt;.
It’s still in beta at the moment of writing, but it already works terrific!
Gauge is comparable with Protractor or JUnit extended with Cucumber (if you haven’t heard of these, they are worth checking out).
In this blog we’ll be mainly talking about automating browser testing using Selenium WebDriver, although that isn’t the sole purpose of Gauge.
If you don’t know WebDriver, it’s what allows you to interact with the browser to traverse the DOM, click on elements and so on.&lt;/p&gt;

&lt;p&gt;Now, unlike Cucumber, Gauge itself only supports three languages at the moment: Java, Ruby and C#.
Others may be supported by the community like JavaScript.
You can define steps written in either one of those languages.
These are the actual tests and can be identified by a sentence you can choose yourself.
By combining these sentences, you can write test scenarios which are written in Markdown.
That means you don’t need any programming experience to write test scenarios.
You could create some sort of dictionary with the step sentences that others can use for the scenarios or the other way around.
In other words, anyone is able to read and write test scenarios.
The actual implementation of the steps does require some technical knowledge.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#writing-tests&quot;&gt;Writing tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running-the-specs&quot;&gt;Running the specs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#environments-and-configuration&quot;&gt;Environments and configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reports&quot;&gt;Reports&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;Gauge offers an installer which can be downloaded &lt;a href=&quot;https://getgauge.io/get-started.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.
During the install, you can select which core plugins to install.
In this blog the tests are written in Java, so we would need the Java core plugin.
After the install, you’ll be able to run &lt;code class=&quot;highlighter-rouge&quot;&gt;gauge&lt;/code&gt; from the command line.
It can, for example, be used to install more plugins (as well as core plugins &lt;code class=&quot;highlighter-rouge&quot;&gt;gauge install java&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Next, in order to use WebDriver in our tests, we’ll need the Java SDK and Maven.
When you’re a Java developer, you probably already have those installed.
If not, you’ll find enough on Google on how to install those.&lt;/p&gt;

&lt;p&gt;To start a new project, create a new folder and run &lt;code class=&quot;highlighter-rouge&quot;&gt;gauge init java&lt;/code&gt; in it.
This will setup a basic Gauge project.
Then we need to add a &lt;a href=&quot;https://github.com/getgauge-examples/java-maven-selenium/blob/master/pom.xml&quot; target=&quot;_blank&quot;&gt;pom.xml&lt;/a&gt; file ourselves, because we need some dependencies such as Selenium WebDriver.
Next, WebDriver needs to be set up in our test code.
A good example of how you could do that can be found &lt;a href=&quot;https://github.com/getgauge-examples/java-maven-selenium/tree/master/src/test/java/utils&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.
They created a &lt;code class=&quot;highlighter-rouge&quot;&gt;DriverFactory&lt;/code&gt; so you can easily switch between browsers using environment variables (we’ll get to that).
Gauge hooks are used to start and stop WebDriver when running the test suite.
Just copy those pieces of code into your own project.
Or, you could start from the &lt;em&gt;Maven + Selenium&lt;/em&gt; example provided by Gauge which can be found on &lt;a href=&quot;https://github.com/getgauge-examples/java-maven-selenium&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;.
That way you’d have some examples to start from.&lt;/p&gt;

&lt;p&gt;Now we can start writing tests.&lt;/p&gt;

&lt;h1 id=&quot;writing-tests&quot;&gt;Writing tests&lt;/h1&gt;
&lt;p&gt;On the lowest level we have our Java functions that control the browser using WebDriver commands.
To these functions we can assign a &lt;code class=&quot;highlighter-rouge&quot;&gt;@Step&lt;/code&gt; annotation to be able to identify it.
It’s usually a sentence describing the action being performed.
The sentences can then be used to write the scenarios of our tests (or specs).
If you’d like to combine multiple steps into once sentence, you can do so by creating so called “concepts”.&lt;/p&gt;

&lt;p&gt;A typical folder structure for a Gauge setup using WebDriver and Java is as follows:&lt;/p&gt;
&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;max-width:194px&quot; alt=&quot;Gauge Maven project structure&quot; src=&quot;/img/2018-01-05-gauge-automated-testing/files.jpg&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;writing-the-specs&quot;&gt;Writing the specs&lt;/h3&gt;
&lt;p&gt;The specs are written in Markdown.
Each spec file starts with a title and is underlined with &lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;.
Next, some steps can be defined that will be run before each scenario.
When listing steps, you need to prefix each step with an asterix (*) as in a Markdown list.
After that, the actual scenarios can be written.
They start with a title and are underlined with &lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt;.
Again, the steps for a scenario should be listed as in a Markdown list.
You can also add some tags which can be used to only run certain specs and to search in the HTML reports.
Here’s an example specification:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;Customer sign-up
================
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;
*&lt;/span&gt; Go to sign up page

&lt;span class=&quot;gh&quot;&gt;Customer sign-up
----------------
&lt;/span&gt;tags: sign-up, customer
&lt;span class=&quot;p&quot;&gt;
*&lt;/span&gt; Sign up a new customer with name &quot;JWorks&quot; email &quot;jworks@ordina.be&quot; and &quot;password&quot;
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Check if the sign up was successful
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;writing-the-steps&quot;&gt;Writing the steps&lt;/h3&gt;
&lt;p&gt;The sentences we wrote in the specs still need to be linked to Java functions.
We can do so by simply adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;@Step&lt;/code&gt; annotation to a Java function.
It doesn’t matter in which class you put the functions, you’re free to choose how to organize them.
As long as they are under the &lt;code class=&quot;highlighter-rouge&quot;&gt;src/test/java&lt;/code&gt; folder.
You could, for example, group them per page or feature.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomerSignup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sign up as &amp;lt;customer&amp;gt; with email &amp;lt;customer@example.com&amp;gt; and &amp;lt;password&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerCustomerWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WebDriver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webDriver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WebElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;new_user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user[username]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user[email]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user[password]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user[password_confirmation]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;commit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Check if the sign up was successful&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkSignUpSuccessful&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WebDriver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webDriver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WebElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You have been signed up successfully!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As shown in the example above, you can easily pass parameters to steps.
You simply have to wrap the keywords in &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;gt;&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Step&lt;/code&gt; annotation
and list the same keywords as parameters in the actual Java function.
Obviously, you can then use them in your Java code.&lt;/p&gt;

&lt;h3 id=&quot;page-object-pattern&quot;&gt;Page object pattern&lt;/h3&gt;
&lt;p&gt;A clean way to organize all your code would be to use the page object pattern.
This means that for every page in your web app, you should create a class.
Such a class contains all code to interact with that specific page.&lt;/p&gt;

&lt;p&gt;The example we saw earlier, could be transformed into this:&lt;/p&gt;

&lt;p&gt;Page object:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SignUpPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usernameField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passwordField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passwordConfirmField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commitButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;SignUpPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WebDriver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webDriver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WebElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;new_user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;usernameField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user[username]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;emailField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user[email]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;passwordField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user[password]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;passwordConfirmField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user[password_confirmation]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commitButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;commit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Step definition:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomerSignup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SignUpPage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signUpPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SignUpPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sign up as &amp;lt;customer&amp;gt; with email &amp;lt;customer@example.com&amp;gt; and &amp;lt;password&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerCustomerWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signUpPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;usernameField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signUpPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;emailField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signUpPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;passwordField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signUpPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;passwordConfirmField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signUpPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commitButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The great benefit of this approach is that you can reuse a lot of the code.
You only have to locate the elements once instead of in every step.
Functions can be added to the page objects as well.
Suppose you have a dropdown, you first have to click to open it and then select an option from the list.
You can write a function doing all that.
In your step definition, you then simply have to call that function to select something from a dropdown.
It’s a good way to avoid too much code duplication.&lt;/p&gt;

&lt;h3 id=&quot;concepts&quot;&gt;Concepts&lt;/h3&gt;
&lt;p&gt;If you find yourself repeating the same sequence of steps over and over,
you could combine those steps into one step using concepts.
These are also written in Markdown and you can pass arguments the same way as in the Java &lt;code class=&quot;highlighter-rouge&quot;&gt;@Step&lt;/code&gt; annotations.
They should be placed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/specs/concepts&lt;/code&gt; folder and use the *.cpt extension.&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;# Sign up a new customer with name &amp;lt;name&amp;gt; email &amp;lt;email&amp;gt; and &amp;lt;password&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Sign up as &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt; with email &lt;span class=&quot;nt&quot;&gt;&amp;lt;email&amp;gt;&lt;/span&gt; and &lt;span class=&quot;nt&quot;&gt;&amp;lt;password&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Show a message &quot;Thank you for signing up! You are now logged in.&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cucumber only offers this feature in some implementations, they don’t in Cucumber.js for example.
They refuse to implement it because they believe this creates too much abstraction and makes you lose sight of the overall picture.
Gauge does offer it, so it’s up to you whether you want to make use of it or not.&lt;/p&gt;

&lt;h1 id=&quot;running-the-specs&quot;&gt;Running the specs&lt;/h1&gt;
&lt;p&gt;Since the project is setup with Maven, the tests can be run with &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn test&lt;/code&gt;.
However, if you want to pass any arguments, you’ll need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn gauge:execute&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;tags&quot;&gt;Tags&lt;/h3&gt;

&lt;p&gt;You may have noticed in the spec files that tags can be added.
They can be used to run only certain specs.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mvn gauge:execute -DspecsDir=specs -Dtags=&quot;sign-up &amp;amp; customer&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;parallel&quot;&gt;Parallel&lt;/h3&gt;
&lt;p&gt;So far, Gauge didn’t stand out from other automated testing solutions.
Although there’s one thing that really does stand out and that’s how easy it is to use parallel execution!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mvn gauge:execute -DspecsDir=specs -DinParallel=true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Running this command will start up a stream for each CPU core your computer has.
For each stream it will open a browser window and execute the specs.
So if you have four CPU cores, four browser windows will be opened.
You can overwrite the number of parallel executors, but it’s recommended not to exceed the number of CPU cores.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mvn gauge:execute -DspecsDir=specs -DinParallel=true -Dnodes=2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, some specs may take longer to run than others.
By default, specs are divided dynamically over the streams.
So when a spec has finished, it will take the next one from the list of specs that still need to be executed.
It’s possible to change this so the specs are divided on startup, but the command is deprecated and will be removed.&lt;/p&gt;

&lt;h3 id=&quot;making-tests-independent&quot;&gt;Making tests independent&lt;/h3&gt;
&lt;p&gt;To make use of this parallel execution, you’ll have to make sure that your tests don’t rely on each other.
I think it’s pretty clear why you shouldn’t do that.
Anyway, suppose you test the sign up and sign in.
If your sign in relies on the user being signed up through a previous test, these tests should be run synchronously.
However, if you would want to test whether a user can sign in after having signed up, you should do so in one test.
That immediately solves our problem and we are safe to use the parallel execution!&lt;/p&gt;

&lt;h1 id=&quot;environments-and-configuration&quot;&gt;Environments and configuration&lt;/h1&gt;
&lt;p&gt;The config files are located under &lt;code class=&quot;highlighter-rouge&quot;&gt;env/default&lt;/code&gt;.
You should have three files in that folder: &lt;code class=&quot;highlighter-rouge&quot;&gt;default.properties&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;java.properties&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;user.properties&lt;/code&gt;.
In the &lt;a href=&quot;https://github.com/getgauge-examples/java-maven-selenium&quot; target=&quot;_blank&quot;&gt;example by Gauge&lt;/a&gt;, they have an &lt;code class=&quot;highlighter-rouge&quot;&gt;APP_URL&lt;/code&gt; parameter in that last file.
I recommend using that approach as well, you can get parameters in your Java code using &lt;code class=&quot;highlighter-rouge&quot;&gt;System.getenv(&quot;APP_URL&quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s possible to create different environments by simply creating a new folder.
There you can add &lt;code class=&quot;highlighter-rouge&quot;&gt;*.properties&lt;/code&gt; files containing additional properties or properties overwriting the ones in the default folder.
So, that means you don’t need to copy the whole configuration. 
Gauge will always load all the default properties. 
Then it will load those defined for the environment you wish to use. 
If a property is defined for an environment and it already exists in the default configuration, it will use the one defined for that environment instead.
Now, suppose you want a different configuration for your CI-tool, you can create a folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;ci&lt;/code&gt;.
When running the specs, simply pass an argument stating the environment.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mvn gauge:execute -Denv=&quot;ci&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Environments can also be used to run gauge with another browser like in the &lt;a href=&quot;https://github.com/getgauge-examples/java-maven-selenium&quot; target=&quot;_blank&quot;&gt;example by Gauge&lt;/a&gt;.
Create a folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;firefox&lt;/code&gt; for example and add a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;browser.properties&lt;/code&gt;.
In that file you add &lt;code class=&quot;highlighter-rouge&quot;&gt;browser = FIREFOX&lt;/code&gt;.
When you then run the tests with the &lt;code class=&quot;highlighter-rouge&quot;&gt;firefox&lt;/code&gt; environment, it will use FireFox as a browser instead.
(This only works if you have your project set up like in the example, the &lt;a href=&quot;https://github.com/getgauge-examples/java-maven-selenium/tree/master/src/test/java/utils/driver&quot; target=&quot;_blank&quot;&gt;Driver&lt;/a&gt; and &lt;a href=&quot;https://github.com/getgauge-examples/java-maven-selenium/tree/master/src/test/java/utils/driver&quot; target=&quot;_blank&quot;&gt;DriverFactory&lt;/a&gt; files are required here.)&lt;/p&gt;

&lt;h1 id=&quot;reports&quot;&gt;Reports&lt;/h1&gt;
&lt;p&gt;To get a HTML report, the plugin has to be installed first: &lt;code class=&quot;highlighter-rouge&quot;&gt;gauge install html-report&lt;/code&gt;.
That’s about it!
After running the specs, a nice HTML report will be outputted to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/reports&lt;/code&gt; folder.
It shows which tests succeeded and which failed with some additional graphs.
In the report you’ll even find how long it took to run a test and each of its steps.
There’s also a search functionality to quickly find a certain spec.&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; alt=&quot;Gauge HTML report&quot; src=&quot;/img/2018-01-05-gauge-automated-testing/gauge-report.jpg&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;It’s a good idea to write automated tests.
If you do it well, you don’t have to spend a lot of time manually testing your application.
The chance of something being broken by your changes will decrease dramatically.
Also, be sure to use the page object pattern and create functions for repetitive actions.
It avoids code duplication and having to update the same code in multiple places.&lt;/p&gt;

&lt;p&gt;If you’re starting a new project or starting from scratch with writing browser tests, you should consider using Gauge.
Even though it’s still in beta.
With ThoughtWorks as the main force behind this tool, it’s here to stay!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Martijn&quot;, &quot;last_name&quot;=&gt;&quot;Willekens&quot;, &quot;linkedin&quot;=&gt;&quot;mwillekens&quot;, &quot;permalink&quot;=&gt;&quot;/author/martijn-willekens/&quot;, &quot;avatar&quot;=&gt;&quot;martijn-willekens.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend developer&quot;, &quot;email&quot;=&gt;&quot;martijn.willekens@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Martijn is a frontend developer at Ordina Belgium. He primarily devotes himself to building Angular and Ionic apps written in TypeScript. ReactiveX is his favorite set of tools to work with.&quot;}</name><email>martijn.willekens@ordina.be</email></author><category term="Testing" /><category term="Gauge" /><category term="E2E" /><category term="End to end" /><category term="Testing" /><category term="Test automation" /><category term="Automation" /><summary type="html">After finishing a new feature in your web app, you test whether it works. However, while working on that new feature, you may have broken something else. If you want to know for sure, you have to test everything. Clicking around, filling in forms, … will cost you some valuable time. So, you’ll probably end up not doing it thorough enough or even not at all, assuming everything else still works fine. That’s exactly why you should have automated tests do it for you!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2018-01-05-gauge-automated-testing/gauge.png" /></entry><entry><title type="html">3 Stages of API testing</title><link href="https://ordina-jworks.github.io/testing/2018/01/04/3-stages-api-testing.html" rel="alternate" type="text/html" title="3 Stages of API testing" /><published>2018-01-04T00:00:00+00:00</published><updated>2018-01-04T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/testing/2018/01/04/3-stages-api-testing</id><content type="html" xml:base="https://ordina-jworks.github.io/testing/2018/01/04/3-stages-api-testing.html">&lt;blockquote&gt;
  &lt;p&gt;Continuous Integration with automated testing is more and more incorporated in the culture of software delivery companies.
Running tests in different stages is a big part of it.
In this post, we’ll have a look at our three stages of API testing we are promoting at Ordina.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;About the setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stage-1-unit-testing-the-communication-layer-front-and-back-end&quot;&gt;Stage 1: Unit testing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stage-2-testing-against-a-mock-end&quot;&gt;Stage 2: Testing against a mock-end&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stage-3-testing-full-environment&quot;&gt;Stage 3: Testing full environment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;

&lt;p&gt;The example we are going to use is part of a bigger microfrontend/microservice setup.
The front-end part of this example is the actual header of this microfrontend setup. It’s the top bar, developed as a separate front-end application.
This header provides the user with a search input field, where the user can search our database of competence centers.
This part is written in Angular (5).
The app gets dockerized after the unit tests (and build) are successfully completed.
It is served by a simple Express server inside a Docker container.
The back-end part provides the data of the competence centers.
It’s nothing more than a simple REST API written in TypeScript using the Nest.js framework.
The data provided by this service is a JSON file.
Its content is parsed into memory and is exposed through this REST API.&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:575px;&quot; alt=&quot;Easy client server setup&quot; src=&quot;/img/3-stages-api-testing/setup.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The front-end (header) is providing the user with an input field.
This field allows the user to perform a search on our back-end service.
It also provides a &lt;code class=&quot;highlighter-rouge&quot;&gt;clear&lt;/code&gt; button, so the user can remove the content from the input field and reset the local cache of search results.
A second button is the &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; button.
When pressed, it will emit an event that can be listened to by other microfrontends.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterCCs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPlatformBrowser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;platformId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CustomEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'filterCCs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;needle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;needle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterStats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;needle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_updateData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_updateData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_ccService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getStats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;needle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resetSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;needle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When resetting the content with the &lt;code class=&quot;highlighter-rouge&quot;&gt;clear&lt;/code&gt; button, we’re not sending a request.
When there’s nothing to search for, the result would be an empty array.
So we’re just resetting our local data to an empty array.&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:925px;&quot; alt=&quot;Easy client server setup&quot; src=&quot;/img/3-stages-api-testing/header.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The back-end API is exposing three endpoints:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAllCCs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ccs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_ccsService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllCCs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ccs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/search'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;searchCCs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'needle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;searchString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filtered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_ccsService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchCCs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filtered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/:id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_ccsService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The header will always trigger the endpoint at &lt;code class=&quot;highlighter-rouge&quot;&gt;search&lt;/code&gt; with a needle.
When the needle is undefined (or an empty string), the search endpoint will return an empty list.&lt;/p&gt;

&lt;h1 id=&quot;stage-1-unit-testing-the-communication-layer-front-and-back-end&quot;&gt;Stage 1: Unit testing the communication layer (front and back-end)&lt;/h1&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:575px;&quot; alt=&quot;decoupled&quot; src=&quot;/img/3-stages-api-testing/unit.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The first stage is unit testing each component. This step is almost always part of the component’s build. Let’s take a quick look at each component.&lt;/p&gt;

&lt;h3 id=&quot;unit-testing-the-communication-part-of-the-ui&quot;&gt;Unit testing the communication part of the UI&lt;/h3&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:325px;&quot; alt=&quot;Easy client server setup&quot; src=&quot;/img/3-stages-api-testing/unit-client.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;For unit testing our front-end Angular 5 application, we are going to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;import { MockBackend } from '@angular/http/testing';&lt;/code&gt; from Angular itself to mock our back-end.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;TestBed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configureTestingModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;CCService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// our service that is handling the communication&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;provide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XHRBackend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;useClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MockBackend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// our mock&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compileComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Should query ccs with an observable'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Should return data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CCService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XHRBackend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ccService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockBackend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;mockBackend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ccs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockRespond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ResponseOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ccs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})));&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ccService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getStats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tim'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ccs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ccs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ccs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clEmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tim.vierbergen@ordina.be'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Angular framework handles the communication part.
We want to mock the &lt;code class=&quot;highlighter-rouge&quot;&gt;$http&lt;/code&gt; call and see how we are handling the result.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;mockBackend&lt;/code&gt; is working inbetween our own code and the provided &lt;code class=&quot;highlighter-rouge&quot;&gt;$http&lt;/code&gt; part.
Every call is triggering the &lt;code class=&quot;highlighter-rouge&quot;&gt;mockBackend.connections&lt;/code&gt;, so the subscribers are triggered.
We are providing our own data and returning it as the response of the &lt;code class=&quot;highlighter-rouge&quot;&gt;$http&lt;/code&gt; call.&lt;/p&gt;

&lt;h3 id=&quot;unit-testing-the-communication-layer-of-the-service&quot;&gt;Unit testing the communication layer of the service&lt;/h3&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:325px&quot; alt=&quot;Easy client server setup&quot; src=&quot;/img/3-stages-api-testing/unit-service.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;For unit testing our back-end, we are using Jest.
&lt;a href=&quot;https://facebook.github.io/jest/&quot; target=&quot;_blank&quot;&gt;Jest&lt;/a&gt; is a testing framework by Facebook.
If you are interested in Jest, make sure to watch this blog, as a post around this topic is in the making.
Just as with our front-end, we trust the framework to correctly handle the communication itself.&lt;/p&gt;

&lt;p&gt;Our unit tests will start at the controller level of our API.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'searchCCs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should return a filtered array of competence centers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ccsController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchCCs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'tim'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clEmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tim.vierbergen@ordina.be'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where mockResponse is exactly that.
A simple mock of the response object.&lt;/p&gt;

&lt;h3 id=&quot;purpose-of-these-unit-tests&quot;&gt;Purpose of these unit tests&lt;/h3&gt;

&lt;p&gt;The goal of these unit tests is to make sure that the functions inside the components are working as expected.
This way the next stage of testing can only fail due to errors from outside this component.
However, to make sure this is the case, the mock data should be as close to production data when it comes to data specific characteristics.
This is more important for your front-end because you have less control over the data itself.
Your back-end API is only responding to request params that are defined in the specs.
So it’s easier to control them, or ignore unknowns.&lt;/p&gt;

&lt;h1 id=&quot;stage-2-testing-against-a-mock-end&quot;&gt;Stage 2: Testing against a mock-end&lt;/h1&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:575px&quot; alt=&quot;Easy client server setup&quot; src=&quot;/img/3-stages-api-testing/mock-end.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In our second stage we are going to use a mock service to test against.
This means that we are going to mock ‘the other’ component by replacing it with an easy to use solution.
Although we are mocking some parts, this can be seen as an end-to-end test for each component itself.
We want to test our component by means of external services, just as it is supposed to work in a complete environment.&lt;/p&gt;

&lt;h3 id=&quot;mocking-our-back-end-to-test-our-front-end&quot;&gt;Mocking our back-end to test our front-end.&lt;/h3&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:575px&quot; alt=&quot;Mocking the back-end&quot; src=&quot;/img/3-stages-api-testing/front-end-mock.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;For our front-end component (user interface), we are going to mock the back-end.
Some front-ends are performing calls even without human interaction.
However, in most cases, front-end communication is depending on human interaction.
To end-to-end test this part, we are also in need of a framework to mock this user interaction.
&lt;a href=&quot;https://getgauge.io/&quot; target=&quot;_blank&quot;&gt;Gauge&lt;/a&gt;, &lt;a href=&quot;http://www.protractortest.org/&quot; target=&quot;_blank&quot;&gt;Protractor&lt;/a&gt; and &lt;a href=&quot;http://nightwatchjs.org/&quot; target=&quot;_blank&quot;&gt;Nightwatch.js&lt;/a&gt; are some examples of these frameworks.
Most of them depend on ‘Selenium WebDriver’.&lt;/p&gt;

&lt;h4 id=&quot;node-red-for-back-end-mocking&quot;&gt;Node-RED for back-end mocking&lt;/h4&gt;

&lt;p&gt;We are using Node-RED for our back-end mock because it’s so easy to setup and dockerize.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://nodered.org&quot; target=&quot;_blank&quot;&gt;Node-RED&lt;/a&gt; is a programming tool for wiring together hardware devices, APIs and online services in new and interesting ways.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Node-RED is much more than just a tool to mock a back-end or any other service.
It comes with a great User Interface to define your flows and to deploy them on your server.&lt;/p&gt;

&lt;p&gt;For this example we will mock our three endpoints and return test data.
This test data can come from different sources.
Node-RED provides multiple ways of working with data.
You can include a simple MongoDB in your setup and read (even write) data from it.
Or you can just use functions where you hard code your data.
To keep it simple, we will use the latter in our setup.&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:875px&quot; alt=&quot;Mocking the back-end&quot; src=&quot;/img/3-stages-api-testing/node-red-flow.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;A simple mock for a http-call consists out of three parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The entry point definition itself (input)&lt;/li&gt;
  &lt;li&gt;The function that handles the data (can be static or database or …)&lt;/li&gt;
  &lt;li&gt;The response definition&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:425px;&quot; alt=&quot;Data function config&quot; src=&quot;/img/3-stages-api-testing/node-red-data.png&quot; /&gt;
&lt;/p&gt;

&lt;h4 id=&quot;user-interface-automation&quot;&gt;User interface automation&lt;/h4&gt;

&lt;p&gt;In this setup we are using Protractor for the e2e tests.
The user input is limited to an input field to trigger the search REST-call and two buttons, one button for clearing the input and one for sending the search string to other microfrontend components.&lt;/p&gt;

&lt;p&gt;Some of the use cases, such as ‘clearing’ the input, are already covered in the unit tests.
Depending on the effort you can always retest them in these e2e tests, but for this example, those are not important.
We want to trigger the search REST call by sending the search string &lt;code class=&quot;highlighter-rouge&quot;&gt;tim&lt;/code&gt; to the input field, and testing the outcome in the user interface.&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:925px;&quot; alt=&quot;Data function config&quot; src=&quot;/img/3-stages-api-testing/search-e2e.png&quot; /&gt;
&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Searching with Tim should show 2 results'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setSeachText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mySearchString'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Input field should contain 'tim'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSearchText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tim'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Result should show 2 entries&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;will show the number 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getResultNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;will show a dropdown with 2 results&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getResultList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;conclusion-for-our-front-end&quot;&gt;Conclusion for our front-end&lt;/h4&gt;

&lt;p&gt;This mock e2e test is depending on a mock back-end and a user input automation system.
We are running these tests on our &lt;a href=&quot;https://www.gocd.org/&quot; target=&quot;_blank&quot;&gt;GoCD&lt;/a&gt; setup with dockerized elastic agents.
To run these tests, we are in need of a go-agent that can run these e2e test with Protractor, but we also need an environment where we can serve this front-end and the mocked service.
We are doing this with a go-agent that first spins up a docker-compose (for our front-end and mock-end), runs the protractor tests to this new environment and then brings down the environment when tests are finished.&lt;/p&gt;

&lt;h3 id=&quot;mocking-our-front-end-to-test-our-back-end&quot;&gt;Mocking our front-end to test our back-end.&lt;/h3&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:500px;&quot; alt=&quot;Mocking the back-end&quot; src=&quot;/img/3-stages-api-testing/back-end-mock.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;For testing our back-end service, we only need one other service.
This service will need to fire REST calls to our back-end service and analyse the response.
We can use &lt;a href=&quot;https://www.getpostman.com/&quot; target=&quot;_blank&quot;&gt;Postman&lt;/a&gt; to set this up.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Postman is the complete toolchain for API developers, used by more than 3 million developers and 30000 companies worldwide.
Postman makes working with APIs faster and easier by supporting developers at every stage of their workflow.
It’s available for Mac OS X, Windows, Linux and Chrome users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can use Postman for more than just API testing.
In our setup, we need to create a testing scenario and just run it against our back-end service.
Postman provides a user interface to do so.
However, because we are running our tests on a cloud elastic go-agent, we need to find a way to automate this step.
Luckily, Postman also provides a command-line tool called &lt;a href=&quot;https://github.com/postmanlabs/newman&quot; target=&quot;_blank&quot;&gt;Newman&lt;/a&gt;.
Newman let’s you run your test scenarios from your command line.
You can first configure everything through the user interface and then just export the scenario so you can use it through the CLI.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can read more about Postman and Newman in our blogpost &lt;a href=&quot;https://ordina-jworks.github.io/testing/2016/09/16/Automation-testing-with-postman.html&quot; target=&quot;_blank&quot;&gt;API Testing with Postman and Newman&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Below, you can find a part of the exported JSON configuration.
This part will send a GET request to the search endpoint, providing the search string &lt;code class=&quot;highlighter-rouge&quot;&gt;tim&lt;/code&gt;.
It will then analyse the response and check if the resulting array contains 2 entries and verifies the data.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Search existing ccs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;s2&quot;&gt;&quot;listen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;s2&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
					&lt;span class=&quot;s2&quot;&gt;&quot;var jsonData = JSON.parse(responseBody);&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;s2&quot;&gt;&quot;var firstResult = jsonData[0];&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;s2&quot;&gt;&quot;tests[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Status code is 200&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;] = responseCode.code === 200;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;s2&quot;&gt;&quot;tests[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;4 results returned&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;] = jsonData.length === 2;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;s2&quot;&gt;&quot;tests[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;First result contains id &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;] ='id' in firstResult;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;s2&quot;&gt;&quot;tests[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Cl name contains tim vierbergen&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;] = firstResult.cl === &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Tim Vierbergen&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;&quot;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;s2&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;:/ccs/search?needle=tim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
				&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
			&lt;span class=&quot;s2&quot;&gt;&quot;port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
				&lt;span class=&quot;s2&quot;&gt;&quot;ccs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;s2&quot;&gt;&quot;search&quot;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
			&lt;span class=&quot;s2&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;needle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;s2&quot;&gt;&quot;equals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
			&lt;span class=&quot;s2&quot;&gt;&quot;variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;s2&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
		&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
		&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;response&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our continuous integration system, we are running these tests on a simple go-agent that can run these Newman tests.
This agent spins up our service container, runs these tests and bring down that container.&lt;/p&gt;

&lt;h4 id=&quot;conclusion-for-our-back-end&quot;&gt;Conclusion for our back-end&lt;/h4&gt;

&lt;p&gt;Testing this back-end service with a mock front-end is pretty easy.
Since our data is included in this service and it is limited to a simple JSON file, we are not running performance tests.
However, when your back-end needs to communicate with a database and/or make calculations, you can and should already include some performance tests in this stage.
You can, for example, include some &lt;a href=&quot;https://gatling.io/&quot; target=&quot;_blank&quot;&gt;Gatling&lt;/a&gt; tests in this stage and put some load on this service to check response times.&lt;/p&gt;

&lt;p&gt;The goal of this stage is to test the whole component, including the frameworks we are using for the communication.
It is still a decoupled system.
Failures in this stage will show you that some integrations are failing and you know exactly where to look for the errors.&lt;/p&gt;

&lt;h1 id=&quot;stage-3-testing-full-environment&quot;&gt;Stage 3: Testing full environment&lt;/h1&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:575px;&quot; alt=&quot;No more mocking&quot; src=&quot;/img/3-stages-api-testing/full-env.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We now want to end-to-end test the whole system.
We can use docker-compose to spin up this environment and then again run tests against the user interface.
It will communicate with the real back-end to query its data and show the results in the user interface.
Again, we want to run those tests on an elastic go-agent, so we are in need of an automated system.
Right, we already used this in the previous stage where we were testing the user interface against a mocked back-end.&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:575px;&quot; alt=&quot;No more mocking&quot; src=&quot;/img/3-stages-api-testing/full-env-ui.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;This elastic go-agent must be able to run the Protractor tests (obviously). It will first need to spin up this environment, run the tests and tear down the environment. Same goes for performance tests in this stage.
You can use some frameworks to put extra load on your front-end to see how it’s behaving when it needs to handle more REST-calls for different parts.
Or you can run more instances of the user interface, resulting in more load on the back-end service.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Decoupling your system and running tests in different stages will make it easier to debug when something is going wrong.
Finding errors earlier will also save you some time and resources.
Being able to find bugs before taking it to the next stage and spinning up complete environments will reduce the cost of your system (cloud).&lt;/p&gt;

&lt;p&gt;Yes, writing tests can be more expensive in time and resources in the short run, but it will save you a lot more time and resources in the long run.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;Vierbergen&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-vierbergen/&quot;, &quot;avatar&quot;=&gt;&quot;tim-vierbergen.jpg&quot;, &quot;twitter&quot;=&gt;&quot;vierbergentim&quot;, &quot;linkedin&quot;=&gt;&quot;tim-vierbergen-82557834&quot;, &quot;github&quot;=&gt;&quot;VeeTeeDev&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;title2&quot;=&gt;&quot;Principal Consultant &amp; Competence Lead CI/CD&quot;, &quot;email&quot;=&gt;&quot;tim.vierbergen@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a senior developer and architect at Jworks Ordina Belgium. Tim has a DevOps culture mindset and is experienced in many different domains. From frontend to backend to pipelining and automation. Tim is keen on learning new technologies.&lt;br /&gt;&lt;br /&gt;Tim is a true sportsman and spends part of his free time running and working out. Tim is also very passionate about surfing and is learing how to snowboard.&quot;}</name><email>tim.vierbergen@ordina.be</email></author><category term="Testing" /><category term="Node-RED" /><category term="angular" /><category term="nestjs" /><category term="jest" /><category term="GoCD" /><category term="docker" /><category term="ci" /><summary type="html">Continuous Integration with automated testing is more and more incorporated in the culture of software delivery companies. Running tests in different stages is a big part of it. In this post, we’ll have a look at our three stages of API testing we are promoting at Ordina.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/3-stages-api-testing/overview.png" /></entry><entry><title type="html">JSConf Budapest 2017 Day 2</title><link href="https://ordina-jworks.github.io/conference/2018/01/03/JS-Conf-Budapest-day-2.html" rel="alternate" type="text/html" title="JSConf Budapest 2017 Day 2" /><published>2018-01-03T00:00:00+00:00</published><updated>2018-01-03T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2018/01/03/JS-Conf-Budapest-day-2</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2018/01/03/JS-Conf-Budapest-day-2.html">&lt;h2 id=&quot;from-jsconf-budapest-with-love&quot;&gt;From JSConf Budapest with love&lt;/h2&gt;

&lt;p&gt;This year’s edition of JS Conf Budapest returned to the first venue at &lt;a href=&quot;http://www.urania-nf.hu/&quot;&gt;Urania National Movie theater&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Uránia Cinema in the middle of the city, near the party-district.
Designed by Henrik Schmahl in the late 1890’s, the interior is characterized by the ornamental motifs of the Venetian Gothic and Moor styles.
The place is listed as the world’s 3rd most beautiful cinema on Bored Panda.
Many tech conferences were hosted here recently, such as TEDx and Strech Conference, because of the unique atmosphere.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JS Conf Budapest 2017 is hosted by &lt;a href=&quot;https://twitter.com/glenmaddern&quot;&gt;Glen Maddern&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/superhighfives&quot;&gt;Charlie Gleason&lt;/a&gt;.
At 10:00 the second day of the conference started. Enough time to drink great coffee and enjoy the breakfast.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/js-conf-budapest-2017/js-conf-budapest-2017-collage.jpg&quot; alt=&quot;JS Conf Budapest 2017 Photo Collage&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-2-talks&quot;&gt;Day 2: Talks&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#don-burks-mvc---what-a-web-app-and-a-mozart-violin-concerto-have-in-common&quot;&gt;Don Burks: MVC - What a web app and a Mozart Violin Concerto have in common&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#opher-vishnia-web-animation-from-disney-to-sass&quot;&gt;Opher Vishnia: Web Animation: from Disney to SASS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#imad-elyafi-migrating-pinterest-profiles-to-react&quot;&gt;Imad Elyafi: Migrating Pinterest profiles to React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#laura-carvajal-yes-your-site-can-and-should-be-accessible-too-lessons-learned-in-building-ftcom&quot;&gt;Laura Carvajal: YES, your site can (and should) be accessible too. Lessons learned in building FT.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nikita-baksalyar-exploring-the-p2p-world-with-webrtc--javascript&quot;&gt;Nikita Baksalyar: Exploring the P2P world with WebRTC &amp;amp; JavaScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#vaidehi-joshi-goldilocks-and-the-three-code-reviews&quot;&gt;Vaidehi Joshi: Goldilocks And The Three Code Reviews&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-2-morning&quot;&gt;Day 2: Morning&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Don Burks&quot; src=&quot;/img/js-conf-budapest-2017/speaker-don.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;don-burks-mvc---what-a-web-app-and-a-mozart-violin-concerto-have-in-common&quot;&gt;Don Burks: MVC - What a web app and a Mozart Violin Concerto have in common&lt;/h3&gt;

&lt;p&gt;You can find him on Twitter using the handle &lt;a href=&quot;https://twitter.com/don_burks&quot;&gt;@don_burks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The presentation can be found &lt;a href=&quot;https://donburks.com/2017-10-27-jsconfbp-presentation/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
Composers and developers of applications have more in common than you might think. In his talk, Don Burks pointed out the similarities in structure between music and apps.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;An app has a certain structure, being the architecture or the configuration of how all the different components interact with each other. 
The same applies to a composition, where the structure represents the different themes in the composition. 
When you look at an application, you see a system of databases, web servers, load balancers, etc. 
All these components are part of the system. Composers have the same vision on their composition.&lt;/p&gt;

&lt;p&gt;When creating the flow of an application, developers start from a certain point and move forward from one step to another, where each step describes an action or event in the app. 
These steps are like a melody in music that moves everything forward. 
Developers also think vertically to visualize the architecture of the application. 
All the technologies that are used, are represented in a vertical stack.&lt;/p&gt;

&lt;p&gt;The goal of the application is to deliver a complete package, where the horizontal problem-solving and the vertical architecture should be transparent to the user. 
In music it is important that every tune is played on time. 
The musician must deliver the right tune at the right time in order to create the music like the composer intended it to be. 
An app should run the same way: it has to deliver the right “tune” at the desired time to provide the best user experience.&lt;/p&gt;

&lt;p class=&quot;image&quot;&gt;&lt;img src=&quot;/img/js-conf-budapest-2017/don-burks-summary.png&quot; alt=&quot;Composing music is an art and so is coding&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The talk gave us more insight about various aspects in development, seen from a musician’s perspective. Composing music is an art and so is coding.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;opher-vishnia-web-animation-from-disney-to-sass&quot;&gt;Opher Vishnia: Web Animation: from Disney to SASS&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Opher Vishnia&quot; src=&quot;/img/js-conf-budapest-2017/speaker-opher.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You can find Opher on Twitter using the handle &lt;a href=&quot;https://twitter.com/opherv&quot;&gt;@opherv&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The presentation can be found &lt;a href=&quot;http://slides.com/opherv/jsconfbp2017/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
Opher is a designer and developer. In his talk, Opher shared his vision on how animations come to live.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;After we got introduced to Opher’s cute dog named &lt;em&gt;Blizzard&lt;/em&gt;, which grew up to a direwolf that can be casted directly in a TV show about dragons and an upcoming winter, Opher started his talk with some child nostalgia from Disney. He shared his amazement about the animations used in old animated movies such as &lt;em&gt;The Lion King&lt;/em&gt;, especially since they were hand drawn, and how these animation bring the characters and surroundings to life.&lt;/p&gt;

&lt;p&gt;Now, how do animations come to life? Two of the influencing factors are &lt;em&gt;Follow Through&lt;/em&gt; and &lt;em&gt;Overlapping Actions&lt;/em&gt;, which are part of the 12 basic principles of animation. The Follow Through principle defines that not every part of a moving entity moves the same way and stops the same way. Rather when one part of an entity stops, the other parts will follow through and come back. To illustrate this, Opher showed us an animation of a moving carrot that stopped suddenly, causing the leaves to go further before they stopped moving as well.&lt;/p&gt;

&lt;p&gt;The Overlapping Action principle means that when an entity is moving, its looser parts start moving later. The animation of the moving carrot clearly showed that the carrot itself moved in a smooth way, while the leaves were being dragged behind the carrot.&lt;/p&gt;

&lt;p&gt;These animation principles are applied by design specifications of huge companies such as the Material Design specs of Google. By taking these principles into account, you can give components and also the flow of your application more realism, for example when responding to events such as user input.&lt;/p&gt;

&lt;p&gt;Now, how can we implement these animations in our app? Opher discussed three implementations with us by means of an animation he has been working on:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CSS&lt;/li&gt;
  &lt;li&gt;GSAP, GreenSock Animation Platform&lt;/li&gt;
  &lt;li&gt;WAAPI, Web Animation API&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;css&quot;&gt;CSS&lt;/h4&gt;
&lt;p&gt;With the CSS implementation, Opher’s animation performed well across different devices and was directly understood by the browser. However, he stumbled upon the limitations of CSS, which made it tricky to implement complex animations and dynamic animations were even a complete no-go. Besides that, debugging was not a joy.&lt;/p&gt;

&lt;h4 id=&quot;gsap&quot;&gt;GSAP&lt;/h4&gt;
&lt;p&gt;GSAP provides a great, robust API to implement animations and even dynamic animations. It also deals with inconsistencies of browsers, which makes the life of a developer easier. Unfortunately, there are some downsides too. One of them is that you depend on an extra lib. Additionally, the JavaScript where GSAP is based on is implementation-sensitive and more advanced features of GSAP are not free.&lt;/p&gt;

&lt;h4 id=&quot;waapi&quot;&gt;WAAPI&lt;/h4&gt;
&lt;p&gt;WAAPI provides a native JavaScript API for animations. Basically you query for the desired elements in JS and call the animation function of those elements where you configure the animation. The animate function accepts two parameters: the keyframes and the duration of the animation. The keyframes should be an array of objects, where each object defines the state of the object at a certain time. The second parameter can also be replaced by an options object which enables you to configure the animation way better, such as adding delays or repeating the animation infinitely. The downside is that WAAPI is not supported by many browsers, but there is nothing a good polyfill cannot fix.&lt;/p&gt;

&lt;p&gt;So, which one should you use in your next project? As for most situations, this depends on your specific requirements and your expertise with the different implementations. It is recommended to keep these principles in mind when implementing animations in the future. With a little effort you can bring your own app to life, just like the animators of Disney did in their fairy tales.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;imad-elyafi-migrating-pinterest-profiles-to-react&quot;&gt;Imad Elyafi: Migrating Pinterest profiles to React&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Imad Elyafi&quot; src=&quot;/img/js-conf-budapest-2017/speaker-imad.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You can find Imad on Twitter using the handle &lt;a href=&quot;https://twitter.com/eelyafi&quot;&gt;@eelyafi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The presentation can be found &lt;a href=&quot;https://assets.contentful.com/nn534z2fqr9f/3RwYa1gv9SyQqsyscwws0A/be3e79ee3073cb973038395648bd249a/Imad_Elyafi_How_We_Migrated_Pinterest_Profiles_to_React.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A similar presentation was recorded on PolyConf 2017 and can be found on &lt;a href=&quot;https://www.youtube.com/watch?v=OtEsmImvYeo&quot;&gt;YouTube&lt;/a&gt;.
A detailed write-out of that presentation can be found on &lt;a href=&quot;https://medium.com/@Pinterest_Engineering/migrating-pinterest-profiles-to-react-479f4f7306aa&quot;&gt;Medium&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
Imad Elyafi is a software engineer at Pinterest. 
In this talk Imad tells you the story of how Pinterest migrated to React, explaining the techniques they tried and challenges they faced.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;With the current availability of fantastic modern frameworks, Pinterest decided to migrate from their outdated Denzel framework to React.&lt;/p&gt;

&lt;h5 id=&quot;why-react&quot;&gt;Why React?&lt;/h5&gt;
&lt;p&gt;Imad started off by saying they had a list of requirements for the new framework.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Large developer community&lt;/li&gt;
  &lt;li&gt;Design patterns that are compatible with the existing stack to make the migration easier&lt;/li&gt;
  &lt;li&gt;Isomorphic rendering, therefore being able to reuse templates on server- and client-side&lt;/li&gt;
  &lt;li&gt;Performance&lt;/li&gt;
  &lt;li&gt;Developer Experience&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;road-to-react&quot;&gt;Road to React&lt;/h5&gt;
&lt;p&gt;Rewriting the whole app from scratch would be risky and expensive.
Also, Pinterest did not want to freeze code and stop shipping new features.
So they had to migrate a service that is constantly changing. 
A very complicated challenge Imad compares to changing the engines of an airplane while mid-flight.&lt;/p&gt;

&lt;p&gt;The solution was to rewrite the app piece by piece. 
That resulted in creating a so called hybrid app where two frameworks can exist together for the time it takes to migrate from the old framework to the new one.&lt;/p&gt;

&lt;p&gt;The very first step they had to take to make this hybrid app was to change their infrastructure and enable server-side JavaScript rendering.
Before they used the &lt;em&gt;Jinja&lt;/em&gt; templating engine for server-side rendering in Python and the JavaScript equivalent &lt;em&gt;Nunjucks&lt;/em&gt; for client-side rendering.
By also enabling Nunjucks rendering on a stand-alone NodeJS server, they now achieved pure isomorphic rendering with JavaScript on the server and on the client.&lt;/p&gt;

&lt;p&gt;Secondly, Pinterest had to render React components in their old Denzel framework. 
So they added React-specific bindings to Nunjucks’ templating language with a new keyword (component), to represent the “bridge” between Denzel and React.&lt;/p&gt;

&lt;p&gt;An example of a Nunjucks template with a React-Denzel bridge:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% if in_react %}
  {{ component('MyReactComponent', {pinId: '123'}) }}
{% else %}
  {{ module('MyDenzelComponent', pinId='123') }}
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, they had to create adapters for the old data resources. 
To do so, they used a technique called High-Order Components (HOC).
A HOC is a function that takes a component and returns another component.&lt;/p&gt;

&lt;p&gt;This technique allowed them to compose components with a resource.
When the component is added to the DOM, it will create the resource and send a request to the API.
A callback function will update its state and trigger the rendering of the given component. 
With this approach, you can keep your components and data in sync all the time.&lt;/p&gt;

&lt;p&gt;You can read more about HOCs &lt;a href=&quot;https://reactjs.org/docs/higher-order-components.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;ui-experiments&quot;&gt;UI experiments&lt;/h5&gt;
&lt;p&gt;Imad explained that they used an A/B testing framework to measure the impact of the migration.
By doing this they managed to see consistent performance and engagement improvements, both of these metrics have improved by 20 percent.&lt;/p&gt;

&lt;p&gt;Last but not least, migrating to React was also great for the developers: less duplicated code, 
a single language on client and server and a large developer community Imad was definitely happy to be a part of.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;laura-carvajal-yes-your-site-can-and-should-be-accessible-too-lessons-learned-in-building-ftcom&quot;&gt;Laura Carvajal: YES, your site can (and should) be accessible too. Lessons learned in building FT.com&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Laura Carvajal&quot; src=&quot;/img/js-conf-budapest-2017/speaker-laura.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You can find Laura on Twitter using the handle &lt;a href=&quot;https://twitter.com/lc512k&quot;&gt;@lc512k&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The presentation can be found &lt;a href=&quot;https://speakerdeck.com/lc512k/yes-your-site-can-and-should-be-accessible&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
Laura Carvajali works at the Financial Times. 
She's responsible for the accessibility of their website so that even blind people are able to use it.
In her talk, she explained how to achieve this.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Accessibility doesn’t happen by accident, you have to make it happen yourself.
A good starting point is to install pa11y (with npm).
It checks your HTML and points out where you can improve.
Color contrast issues, no or bad alt text for images and no related label for input fields are very common issues pa11y reports on.
Pa11y-ci can be used to integrate it with your CI and can break the build when there are errors.&lt;/p&gt;

&lt;p&gt;Next, there are some extra steps that can be taken.
The most expensive one is getting an external audit to get more feedback.
They have people that test with voice control, keyboard only mode, text to speech and other tools.
A cheaper option is to do customer research and user testing with users with various disabilities.
Instead of having other people doing the testing, you could learn how to use the tools for people with disabilities yourself.
This is of course the cheapest option.
A MacBook for example already has a lot of tools built in for people with disabilities!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-2-afternoon&quot;&gt;Day 2 afternoon&lt;/h2&gt;

&lt;h3 id=&quot;nikita-baksalyar-exploring-the-p2p-world-with-webrtc--javascript&quot;&gt;Nikita Baksalyar: Exploring the P2P world with WebRTC &amp;amp; JavaScript&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Nikita Baksalyar&quot; src=&quot;/img/js-conf-budapest-2017/speaker-nikita.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You can find Nikita on Twitter using the handle &lt;a href=&quot;https://twitter.com/nbaksalyar&quot;&gt;@nbaksalyar&lt;/a&gt;.
A similar presentation as the one given at JSConf can be found &lt;a href=&quot;https://www.slideshare.net/nbaksalyar/exploring-decentralized-networks-with-webrtc&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
Nikita Baksalyar is a Software Engineer at MaidSafe. During his talk he explained how we could use newer and not so new technologies to decentralize the web to its former state.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The web becomes increasingly centralized. We trust our private data to be stored in data centers despite news about data leaks. We exchange our messages and they are handled to three-letter agencies without you knowing about it. Can we do better and return the web to its decentralized roots? A combination of proven and emerging technologies like WebRTC can help us.&lt;/p&gt;

&lt;h5 id=&quot;what-is-webrtc&quot;&gt;What is WebRTC?&lt;/h5&gt;

&lt;p&gt;Whenever you visit a webpage, you’d typically enter a web address or click a link to view a page. A request is made to the server and that server provides the webpage you’ve requested. The key here is that you make a HTTP request to a locatable server and get a response back.
Let’s say that you want to do a video chat with mom. Mom’s computer is probably not a web-server, so how will she receive my audio and video data? Enter WebRTC.&lt;/p&gt;

&lt;p&gt;WebRTC stands for web real-time communications. It is a very exciting, powerful, and highly disruptive cutting-edge technology and standard. WebRTC leverages a set of plugin-free APIs that can be used in both desktop and mobile browsers and is progressively becoming supported by all major modern browser vendors.&lt;/p&gt;

&lt;p&gt;The primary benefit of WebRTC is real-time peer-to-peer audio and video communication. In order to communicate with another person (i.e., peer) via a web browser, each person’s web browser must agree to begin communication, know how to locate one another and transmit all multimedia communications in real-time.&lt;/p&gt;

&lt;h5 id=&quot;decentralized-networks&quot;&gt;Decentralized networks&lt;/h5&gt;

&lt;p&gt;When you think of networks you immediately start thinking of network providers, hubs and the likes. We are moving away from the initial idea of the internet, which was supposed to be a decentralized network. Now what is a decentralized network? A good example of a decentralized network is BitCoin. Data is shared over multiple nodes and those nodes get updated by sending update events.&lt;/p&gt;

&lt;h4 id=&quot;the-way-forward&quot;&gt;The way forward&lt;/h4&gt;

&lt;p&gt;The Internet started as a way to have data spread across the world to make sure that in case of a disaster, natural or human made, data would be preserved.
Peer 2 Peer communication is key in both a decentralized and the internet of old. We are making moves towards this redecentralization with the power of WebRTC and other more commonly known technologies such as BitTorrent for file sharing, Distributed git for code, etc.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;vaidehi-joshi-goldilocks-and-the-three-code-reviews&quot;&gt;Vaidehi Joshi: Goldilocks And The Three Code Reviews&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Vaidehi Joshi&quot; src=&quot;/img/js-conf-budapest-2017/speaker-vaidehi.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You can find Vaidehi on Twitter using the handle &lt;a href=&quot;https://twitter.com/vaidehijoshi&quot;&gt;@vaidehijoshi&lt;/a&gt;.
The presentation can be found &lt;a href=&quot;http://slides.com/vaidehijoshi/better-code-reviews/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A similar presentation was recorded on RailsConf 2017 and can be found on &lt;a href=&quot;https://www.youtube.com/watch?v=-6EzycFNwzY&quot;&gt;YouTube&lt;/a&gt;.
A detailed write-out of that presentation can be found on &lt;a href=&quot;https://medium.com/@vaidehijoshi/crafting-better-code-reviews-1a5fc00a9312&quot;&gt;Medium&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
The original intent behind code reviews was that they would help us take collective ownership in the creation of our software.
In other words, we’d each be stakeholders in our development process by having a hand in controlling the quality of our products.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;While code reviews are generally understood as being a necessity to catch problems at the “lowest-value” stages (the time at which the least investment has been made and at which the cost to correct the problem is the lowest), Vaidehi Joshi asks whether they actually work and, if not, how can we try to improve upon the process.
Based on Code Complete by Steve McConnell, she identified 3 major formats of code review:&lt;/p&gt;

&lt;h5 id=&quot;1-inspections&quot;&gt;1. Inspections&lt;/h5&gt;

&lt;p&gt;Inspections are longer, deeper code reviews that typically catch about 60% of defects in a program.&lt;/p&gt;

&lt;h5 id=&quot;2-walkthroughs&quot;&gt;2. Walkthroughs&lt;/h5&gt;

&lt;p&gt;A walkthrough is shorter and is usually intended to provide teaching opportunities for senior developers to newer programmers, while giving junior developers the chance to change old methodologies.
Typically, they catch about 20 to 40% of the defects in a program.&lt;/p&gt;

&lt;h5 id=&quot;3-short-code-reviews&quot;&gt;3. Short code reviews&lt;/h5&gt;

&lt;p&gt;Short reviews are faster, but still in-depth. They focus on small changes, including single-line changes, that tend to be the most error-prone.&lt;/p&gt;

&lt;p&gt;McConnell’s research uncovered the following about shorter code review:&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;
An organization that introduced reviews for one-line changes found that its error rate went from 55 percent before reviews to 2 percent afterward.
A telecommunications organization in the late 80’s went from 86 percent correct before reviewing code changes to 99.6 percent afterward.
&lt;/blockquote&gt;

&lt;h4 id=&quot;but-what-do-developers-think-of-code-reviews&quot;&gt;But what do developers think of code reviews?&lt;/h4&gt;

&lt;p&gt;To know this, Vaidehi did a &lt;a href=&quot;https://twitter.com/vaidehijoshi/status/835597499813494788&quot;&gt;survey on Twitter&lt;/a&gt; and got about 500 responses.
The survey had questions with a scale of 1 to 10, where 1 was strongly disagree and 10 was strongly agree.
These are the stats:&lt;/p&gt;

&lt;h5 id=&quot;the-quantitive-data&quot;&gt;The quantitive data&lt;/h5&gt;

&lt;p&gt;The question “Code reviews are beneficial to my team” had a clear answer.
The average score was around 9 for most languages, with the top 3 containing Swift at an average of 9.46, Ruby at an average of 9.19 and JavaScript at an average of 9.1.&lt;/p&gt;
&lt;p class=&quot;image&quot;&gt;&lt;img src=&quot;/img/js-conf-budapest-2017/vaidehi-joshi-beneficial.jpeg&quot; alt=&quot;Code reviews are beneficial to my team&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another question was “How many pull requests are reviewed”, on which the majority answered that all pull request were reviewed.
However, about 10% of the answers indicated that pull requests where only reviewed when someone was explicitly requested to review.&lt;/p&gt;
&lt;p class=&quot;image&quot;&gt;&lt;img src=&quot;/img/js-conf-budapest-2017/vaidehi-joshi-how-many-pull-request-reviews.jpeg&quot; alt=&quot;How many pull requests are reviewed&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;the-qualitative-data&quot;&gt;The qualitative data&lt;/h5&gt;

&lt;p&gt;So, most developers think code reviews are needed and state that all code is being reviewed.
But what do they think of the quality of code reviews?&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
Ultimately, what seemed to make or break a code review experience depended upon two things: how much energy was spent during the review process and how much substance the review itself had.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;A code review was bad (and left a bad taste in the reviewer’s and reviewee’s mouth) if there wasn’t enough energy spent on the review, or if it lacked substance.
On the other hand, if a code review process was thorough and time was spent reviewing aspects of the code in a substantive way, it left a much more positive impression overall on both the reviewer and the reviewee.&lt;/p&gt;

&lt;h6 id=&quot;energy&quot;&gt;ENERGY&lt;/h6&gt;

&lt;p&gt;On the question “Who all is doing the review and how much time are they spending on it?”, a lot of things could be learned.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A developer blindly thumbs-up everything or the second or third reviewer is more likely to agree when already seeing an approval.
This makes the code review a formality, which doesn’t carry any weight.&lt;/li&gt;
  &lt;li&gt;A review is performed different depending on who submits.
Seniors get no feedback, while juniors are picked to death.
The reviews are unfair and can break confidence.&lt;/li&gt;
  &lt;li&gt;Commits are too big, which cause long review time, which in turn has a bad effect on future branches/PRs/merges.
Long review times take too much energy, which causes them to be postponed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;substance&quot;&gt;SUBSTANCE&lt;/h6&gt;

&lt;p&gt;The question “What exactly is someone saying, doing, or making another person feel while they review their code?” brought these answers.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An assessor who takes all the feedback for his own account, having a mentality of “see red squiggle, fix red squiggle”.
They just change the code without second thought, as long as it makes the reviewer happy.&lt;/li&gt;
  &lt;li&gt;A reviewer’s comment is not clearly explained.
The reviewee just has to change their code to the reviewers vision.&lt;/li&gt;
  &lt;li&gt;A reviewer is unable to distinguish between stylistic preference and functional difference, which causes nitpicking at syntax.
Multiple reviewers might even have conflicting visions.&lt;/li&gt;
  &lt;li&gt;Words matter, an unkind review might break confidence.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;how-can-one-do-better&quot;&gt;How can one do better?&lt;/h4&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
A bad code review almost made me leave the company. A great code review leaves me feeling better equipped to tackle future projects.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Use PR templates.
Github provides some default templates for a PR, in which a couple of questions need to be answered short and clearly.&lt;/li&gt;
  &lt;li&gt;Include screenshots/gifs, providing more context on what is changed and why.&lt;/li&gt;
  &lt;li&gt;Use linters to eliminate style and syntax nitpicking.&lt;/li&gt;
  &lt;li&gt;Encapsulating PRs into small packages, aiming for small commits.&lt;/li&gt;
  &lt;li&gt;Assign specific reviewers, so they may provide valuable input and/or teach or learn something.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;but-even-more-important&quot;&gt;But even more important&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Review everyone: it’s a good horse that never stumbles.
A senior developer is not infallible and might even be overconfident.&lt;/li&gt;
  &lt;li&gt;Develop empathy: call out the good stuff, too.
Make people feel less vulnerable, push for a culture that values vulnerability — both in actions and in words.&lt;/li&gt;
  &lt;li&gt;Most importantly, iterate: start a conversation when feeling that the code review flow doesn’t work well.
Give everyone the chance to propose their suggestions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This survey answer summarized the importance of the last part perfectly:&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
I love code reviews in theory. In practice, they are only as good as the group that’s responsible for conducting them in the right manner.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;afterparty-at-extra-budapest-by-epam&quot;&gt;Afterparty at EXTRA Budapest by EPAM&lt;/h3&gt;

&lt;p&gt;EPAM invited everyone to chill, have some drinks and games at the EXTRA ruinpub after JSConf Budapest. Beer and a selection of soft drinks and juices are on the house.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;after-movie&quot;&gt;After Movie&lt;/h2&gt;
&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/fysiFabvGnQ&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;got-triggered&quot;&gt;Got triggered?&lt;/h2&gt;

&lt;p&gt;All talks were recorded by the JSconf team. You can view them &lt;a href=&quot;https://www.youtube.com/playlist?list=PL37ZVnwpeshH9ztZfHqvQhF1_Zm4VcCTD&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;/conference/2018/01/03/JS-Conf-Budapest-day-1.html&quot;&gt;Read our full report on day 1 of JS Conf Budapest 2017 here!&lt;/a&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Frédéric&quot;, &quot;last_name&quot;=&gt;&quot;Ghijselinck&quot;, &quot;github&quot;=&gt;&quot;fredericghijselinck&quot;, &quot;twitter&quot;=&gt;&quot;f_ghijselinck&quot;, &quot;linkedin&quot;=&gt;&quot;fredericghijselinck&quot;, &quot;permalink&quot;=&gt;&quot;/author/frederic-ghijselinck/&quot;, &quot;avatar&quot;=&gt;&quot;frederic-ghijselinck.jpg&quot;, &quot;title&quot;=&gt;&quot;Competence Lead JavaScript&quot;, &quot;email&quot;=&gt;&quot;frederic.ghijselinck@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Frédéric is a Senior developer at Ordina Belgium, focussing on Frontend Development with technologies as Angular and TypeScript. Next to frontend development, he continues to maintain his backend development skills using the Spring technology stack. Frédéric is also Competence Lead for the JavaScript Competence Center where he gives workshops, talks and courses about the newest technologies.&quot;}</name><email>frederic.ghijselinck@ordina.be</email></author><category term="Conference" /><category term="JS Conf Budapest" /><category term="JavaScript" /><category term="Conference" /><summary type="html">From JSConf Budapest with love</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/js-conf-budapest-2017/header.png" /></entry><entry><title type="html">JSConf Budapest 2017 Day 1</title><link href="https://ordina-jworks.github.io/conference/2018/01/03/JS-Conf-Budapest-day-1.html" rel="alternate" type="text/html" title="JSConf Budapest 2017 Day 1" /><published>2018-01-03T00:00:00+00:00</published><updated>2018-01-03T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2018/01/03/JS-Conf-Budapest-day-1</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2018/01/03/JS-Conf-Budapest-day-1.html">&lt;h2 id=&quot;from-jsconf-budapest-with-love&quot;&gt;From JSConf Budapest with love&lt;/h2&gt;

&lt;p&gt;This year’s edition of JS Conf Budapest returned to the first venue at &lt;a href=&quot;http://www.urania-nf.hu/&quot;&gt;Urania National Movie theater&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Uránia Cinema in the middle of the city, near the party-district.
Designed by Henrik Schmahl in the late 1890’s, the interior is characterized by the ornamental motifs of the Venetian Gothic and Moor styles.
The place is listed as the world’s 3rd most beautiful cinema on Bored Panda. 
Many tech conferences were hosted here recently, such as TEDx and Strech Conference, because of the unique atmosphere.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JS Conf Budapest 2017 is hosted by &lt;a href=&quot;https://twitter.com/glenmaddern&quot;&gt;Glen Maddern&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/superhighfives&quot;&gt;Charlie Gleason&lt;/a&gt;.
First thing to do when entering the building was getting our badges.
Then we could have breakfast at some standing tables on the first floor.
For the coffee lovers, professional baristas served the best coffee possible. With a nice heart drawn on top if it.
At 9:45 the conference would officially start so we went to the conference room.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; src=&quot;/img/js-conf-budapest-2017/js-conf-budapest-2017-collage.jpg&quot; alt=&quot;JS Conf Budapest 2017 Photo Collage&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-1-talks&quot;&gt;Day 1: Talks&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#bodil-stokke-you-have-nothing-to-lose-but-your-chains&quot;&gt;Bodil Stokke: You Have Nothing To Lose But Your Chains&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stefan-judis-watch-your-back-browser-youre-being-observed&quot;&gt;Stefan Judis: Watch your back, Browser! You’re being observed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jonathan-martin-async-patterns-to-scale-your-multicore-javascript-elegantly&quot;&gt;Jonathan Martin: Async patterns to scale your multicore JavaScript… elegantly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#madeleine-neumann-impostor-syndrome---am-i-suffering-enough-to-talk-about-it&quot;&gt;Madeleine Neumann: Impostor syndrome - am I suffering enough to talk about it?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#eirik-vullum-javascript-metaprogramming---es6-proxy-use-and-abuse&quot;&gt;Eirik Vullum: JavaScript Metaprogramming - ES6 Proxy Use and Abuse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sandrina-pereira-how-can-javascript-improve-your-css-mixins&quot;&gt;Sandrina Pereira: How can Javascript improve your CSS mixins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#kacper-sokołowski-you-use-content-security-policy-dont-you&quot;&gt;Kacper Sokołowski: You use Content Security Policy, don’t you?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dan-callahan-practical-webassembly&quot;&gt;Dan Callahan: Practical WebAssembly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#luke-bonaccorsi-how-i-ended-up-automating-my-curtains-and-shouting-at-my-laptop&quot;&gt;Luke Bonaccorsi: How I ended up automating my curtains and shouting at my laptop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-1-morning&quot;&gt;Day 1: Morning&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Bodil Stokke&quot; src=&quot;/img/js-conf-budapest-2017/speaker-bodil.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;bodil-stokke-you-have-nothing-to-lose-but-your-chains&quot;&gt;Bodil Stokke: You Have Nothing To Lose But Your Chains&lt;/h3&gt;

&lt;p&gt;You can find her on Twitter using the handle &lt;a href=&quot;https://twitter.com/bodil&quot;&gt;@bodil&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The presentation she gave can be found at her &lt;a href=&quot;https://bodil.lol/join-us-now/&quot;&gt;personal website&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
A talk about the open source movement and the Free Software movement it grew out of
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The talk started with a story about Richard and a Xerox printer. Richard is a developer suffering from a minor
usability flaw in the Xerox printer at his office. Like the good developer he is, he wants to fix the issue and share
it with the world for everybody’s benefit. Therefore, he needs access to the code. However, it turns out that Xerox’ 
code for that particular printer is not publicly available. So, Richard can’t fix the issue. He will have to live 
with the inconvenience, as well as everyone at the office and even everyone using that same printer. The clue here is 
that a minor fix has to wait until someone at Xerox finds the time to solve the issue. Considering the minor status of 
the issue, it’s not even likely to happen… ever. With open source software this fix could be done by a motivated user 
in a few moments.&lt;/p&gt;

&lt;p&gt;This little intro sets the mood for the talk. One can consider it a bit opinionated, but there are with no doubt some 
powerful arguments for open source software. The talk also covers the free software movement that all started it and 
from which the open source movement branched of. The difference though is just in its philosophy. First of all, a common
misunderstanding is that free software does not mean one can get it with zero cost. It says that anyone can get the code 
and is free to do with it as pleased. Modify, change, sell or use it for another purpose. On the other hand, open source 
software provides some restrictions. Therefore, open source software is more popular and used more widely, because it 
gives control.&lt;/p&gt;

&lt;p&gt;For example: a concurring company might purchase your proprietary software and then have access to the code. They could 
copy your product and sell it for a lower price. This can be done with Free software, but open source software has some 
licenses defined to prevent this. In the talk some of these licenses are covered. I took the liberty to list some of them here with a 
short explanation. Click trough to see how easily it is to use them and have a legal basis to rely on.&lt;/p&gt;

&lt;p&gt;The most popular and widely used licenses are:&lt;/p&gt;
&lt;h4 id=&quot;apache-license-20&quot;&gt;&lt;a href=&quot;https://opensource.org/licenses/Apache-2.0&quot;&gt;Apache License 2.0&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Designed to be simple and easy to comply with, but more extensive than the previous versions. One can use the licensed 
software for any purpose, to change and redistribute. Changes can be distributed under other licenses, but unchanged 
code needs to be distributed under the same license.&lt;/p&gt;

&lt;h4 id=&quot;3-clause-bsd-license&quot;&gt;&lt;a href=&quot;https://opensource.org/licenses/BSD-3-Clause&quot;&gt;3-clause BSD license&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Designed to be simple and short. It allows unlimited redistribution for any purpose as long as its copyright notices 
and the license’s disclaimers of warranty are maintained. The license also contains a clause restricting use of the 
names of contributors for endorsement of a derived work without specific permission. In the 2-clause version that 
restriction is left out.&lt;/p&gt;

&lt;h4 id=&quot;gnu-general-public-license&quot;&gt;&lt;a href=&quot;https://opensource.org/licenses/GPL-3.0&quot;&gt;GNU General Public License&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Software under GNU GPL is free (as in: do with it as you please). The main restrictions defined by this license are that
you should always mention the authors of the software and it must always stay under the GNU GPL license.&lt;/p&gt;

&lt;h4 id=&quot;mit-license&quot;&gt;&lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT License&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Created by Massachusetts Institute of Technology. It has one simple rule: the copyright statement should stay in any
copy of the software. ‘Copyright (c) &amp;lt;year&amp;gt; &amp;lt;copyright holders&amp;gt;’&lt;/p&gt;

&lt;h4 id=&quot;mozilla-public-license-20&quot;&gt;&lt;a href=&quot;https://opensource.org/licenses/MPL-2.0&quot;&gt;Mozilla Public License 2.0&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Code under MPL can be copied or changed, but must stay under MPL. The code can be combined with closed source files.&lt;/p&gt;

&lt;p&gt;Open source should be considered by many companies, since many can benefit from open source. SpaceX for example benefits 
from open source software, non the less their own code is closed. Another company by the same founder, Elon Musk, has 
its code publicly available: Tesla, the electric car manufacturer. Here’s a part I found on 
 &lt;a href=&quot;https://www.tesla.com/blog/all-our-patent-are-belong-you&quot;&gt;Tesla’s own blog&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
 At Tesla we felt compelled to create patents out of concern that the big car companies would copy our technology and 
 then use their massive manufacturing, sales and marketing power to overwhelm Tesla. We couldn’t have been more wrong. 
 The unfortunate reality is the opposite: electric car programs (or programs for any vehicle that doesn’t burn 
 hydrocarbons) at the major manufacturers are small to non-existent, constituting an average of far less than 1% of 
 their total vehicle sales.
 &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;While the competition might benefit from sharing your code, so does the world. This counts for Tesla in particular. 
While there might be a huge market for electric vehicles, we also need them as fast a possible. Open source software 
can help us achieve that goal.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Stefan Judis&quot; src=&quot;/img/js-conf-budapest-2017/speaker-stefan.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;stefan-judis-watch-your-back-browser-youre-being-observed&quot;&gt;Stefan Judis: Watch your back, Browser! You’re being observed&lt;/h3&gt;

&lt;p&gt;You can find Stefan on Twitter using the handle &lt;a href=&quot;https://twitter.com/stefanjudis&quot;&gt;@stefanjudis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The presentation can be found on &lt;a href=&quot;https://speakerdeck.com/stefanjudis/watch-your-back-browser-youre-being-observed&quot;&gt;speakerdeck&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
To get information from a browser, you always had to do a pull. However, it's now also possible to ask the browser to push this information to you when something has changed by using observables!
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Verifying whether an element has become visible in the viewport is a very common use case. 
If you have to pull that information from the browser, it’s also a very heavy one since the piece of code doing that verification, is run each time a scroll event is fired. 
A better way would be to have the browser letting us know when an element has reached the viewport. 
Therefore, browsers offer a so called &lt;code class=&quot;highlighter-rouge&quot;&gt;IntersectionObserver&lt;/code&gt; through JavaScript. 
When creating an &lt;code class=&quot;highlighter-rouge&quot;&gt;IntersectionObserver&lt;/code&gt; you can pass it a callback function which will be fired when the observed elements enter or leave the viewport. 
Optionally you can also pass some options such as how much of the element should become visible/hidden in the viewport.
Unfortunately Safari doesn’t support this feature yet, but luckily, it’s polyfillable.&lt;/p&gt;

&lt;p&gt;There are several more observers such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MutationObserver&lt;/code&gt; - fires when an attribute of an observed element has changed (supported by all major browsers)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ResizeObserver&lt;/code&gt; - fires when an element is resized (behind a flag in Chrome, not yet supported in other major browsers)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PerformanceObserver&lt;/code&gt; - emits metrics about the performance of the web page (e.g. time to paint, &lt;code class=&quot;highlighter-rouge&quot;&gt;mark&lt;/code&gt; statements, navigation time…) (supported by all major browsers except Edge)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another great benefit of these observers is that all functions RxJS offers us (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;skip&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pairwise&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; …), can be used as well!
The emitted values of the observers are collections so we can use functions such as &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; there as well.
As mentioned in the presentation, these two combined gives us “Collection super powers!”.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Jonathan Martin&quot; src=&quot;/img/js-conf-budapest-2017/speaker-jonathan.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;jonathan-martin-async-patterns-to-scale-your-multicore-javascript-elegantly&quot;&gt;Jonathan Martin: Async patterns to scale your multicore JavaScript… elegantly&lt;/h3&gt;

&lt;p&gt;You can find Jonathan on Twitter using the handle &lt;a href=&quot;https://twitter.com/nybblr&quot;&gt;@nybblr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The presentation can be found on &lt;a href=&quot;https://speakerdeck.com/nybblr/async-patterns-to-scale-your-multicore-javascript-dot-dot-dot-elegantly&quot;&gt;speakerdeck&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
“JavaScript is single-threaded, so it doesn’t scale. JavaScript is a toy language because it doesn’t support multithreading.”
Outside (and inside) the web community, statements like these are common.

In a way, it’s true: JavaScript’s event loop means your program does one thing at a time.
This intentional design decision shields us from an entire class of multithreading woes,
but it has also birthed the misconception that JavaScript can’t handle concurrency.

In fact, JavaScript’s design is well-suited for solving a plethora of concurrency problems
without succumbing to the “gotchas” of other multithreaded languages. You might say that JavaScript is single-threaded…
just so it can be multithreaded!
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Before diving into solving concurrency problems, Jonathan explained how the (V8) JavaScript runtime actually works and reacts under the hood.
Next, he told us how the call stack, event loop WebAPIs and the callback queue works and how it handles synchronous (blocking) and asynchronous (non-blocking) code.
Explaining that would be an entire blog post on its own. Luckily he gave us a great link to a video that explains it very clearly, so I’ll add that instead.&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/96425312&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/96425312&quot; target=&quot;_blank&quot;&gt;Philip Roberts: Help, I&amp;#039;m stuck in an event-loop.&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;what-is-concurrency-multi-threading-and-parallelism&quot;&gt;What is concurrency, multi threading and parallelism&lt;/h4&gt;
&lt;p&gt;So if you’ve just watched the video above, you know that JavaScript has one call stack (a single thread) and executes the functions in sequence.
With multithreading, as the word says, we have multiple threads.
This means that the program can assign these tasks to multiple stacks so that multiple tasks get executed at the same time.&lt;/p&gt;

&lt;p&gt;In a computer with a single processor and single core, to do multi threading,
the processor would alternate between these tasks really fast so that they appear to be happening at the same time.
Back in the early days of computing, this was the only option we had. This is called &lt;b&gt;concurrency&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Around 2005 Intel, AMD and the other chip manufacturers started creating processors with multiple cores. 
This meant it could actually do multiple things at the same time, since it had multiple “brains”.
Processors could now assign different tasks to different cores and they would run at the same time. 
This is what we call &lt;b&gt;parallelism&lt;/b&gt;&lt;/p&gt;

&lt;h3 id=&quot;javascript-multi-threading-impossible&quot;&gt;JavaScript multi threading: impossible?&lt;/h3&gt;
&lt;p&gt;Although your JavaScript code is single-threaded and only does one thing at a time, the JavaScript Runtime and Web APIs are multithreaded!
When you pass a callback function to &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt; or start an AJAX request with &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch()&lt;/code&gt;,
you are essentially spinning up a background thread in the runtime. 
Once that background thread completes and the current call stack finishes executing, your callback function is pushed onto the (now empty) call stack and run-to-completion.
So your JavaScript code itself is single-threaded, but it orchestrates legions of threads!&lt;/p&gt;

&lt;h3 id=&quot;es2017-async-functions&quot;&gt;ES2017 async functions&lt;/h3&gt;
&lt;p&gt;The title of his talk contained the word ‘Elegant’ and this is where the ES2017 async/await functionality comes in.
This is a great alternative for dealing with promises in JavaScript. 
If you’re a JavaScript developer you probably know what ‘callback hell’ is, or at least heard of it.
When writing complex programs, we could find ourselves in a situation where we would have to create multiple nested Promises to make sure we have the results of one call to continue with the next and so on.&lt;/p&gt;

&lt;p&gt;Async - declares an asynchronous function (&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;someName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Automatically transforms a regular function into a Promise.&lt;/li&gt;
  &lt;li&gt;When called, async functions resolve to whatever is returned in their body.&lt;/li&gt;
  &lt;li&gt;Async functions enable the use of await.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Await - pauses the execution of async functions. (&lt;code class=&quot;highlighter-rouge&quot;&gt;var result = await someAsyncCall();&lt;/code&gt;).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When placed in front of a Promise call, await forces the rest of the code to wait until that Promise finishes and returns a result.&lt;/li&gt;
  &lt;li&gt;Await works only with Promises, it does not work with callbacks.&lt;/li&gt;
  &lt;li&gt;Await can only be used inside async functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Promise approach&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// To make the function blocking we manually create a Promise.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://myurl.com/example.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// The data from the request is available in a .then block&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// We return the result using resolve.&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Async/Await approach&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// The async keyword will automatically create a new Promise and return it.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getJSONAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The await keyword saves us from having to write a .then() block.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://myurl.com/example.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The result of the GET request is available in the json variable.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We return it just like in a regular synchronous function.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re a beginner with async functions and want to learn more this topic, check out &lt;a href=&quot;https://www.youtube.com/watch?v=568g8hxJJp4&amp;amp;t=362s&quot; target=&quot;_blank&quot;&gt;this video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For further reading on how Jonathan used async patterns for multicore JavaScript, he has written an &lt;a href=&quot;https://www.bignerdranch.com/blog/cross-stitching-elegant-concurrency-patterns-for-javascript/&quot; target=&quot;_blank&quot;&gt;elaborate blog post&lt;/a&gt; about it. 
We suggest you go check it out!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Madeleine Neumann&quot; src=&quot;/img/js-conf-budapest-2017/speaker-madeleine.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;madeleine-neumann-impostor-syndrome---am-i-suffering-enough-to-talk-about-it&quot;&gt;Madeleine Neumann: Impostor syndrome - am I suffering enough to talk about it?&lt;/h3&gt;

&lt;p&gt;Madeleine is a front-end developer at 9Elements. She’s also a conference organiser of RuhrJS.
You can find Madeleine on Twitter using the handle &lt;a href=&quot;https://twitter.com/maggysche&quot;&gt;@maggysche&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The presentation can be found on &lt;a href=&quot;https://www.slideshare.net/MadeleineNeumann/jsconf-budapest-impostor-syndrome-am-i-suffering-enough-to-talk-about-it&quot;&gt;slideshare&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
The reason we struggle with insecurity is because we compare our behind the scenes with everyone else’s highlight reel.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Madeleine wanted to share her life experience with us. 
While she attended secondary school, Madeleine was the creepy loner. 
&lt;em&gt;‘What’s wrong with me?’&lt;/em&gt;, &lt;em&gt;‘What did I do wrong?’&lt;/em&gt; she asked herself on several occasions. 
&lt;em&gt;‘My behaviour must be wrong, I have to change’&lt;/em&gt;. 
So she decided to take up programming in high school and felt truly belonged.
After Madeleine graduated high school, she started to work as a front-end developer where she was learning a lot, very quickly! 
However, she soon discovered that the speed at which she was learning gradually stagnated. 
She had mixed feelings about her profession and abilities, thinking she did not belong there and had no idea what she was doing.
So, she decided to work even harder. 
All of her friends and colleagues congratulated her for her effort and hard work, but Madeleine still wasn’t satisfied. 
Shortly after, she learned about &lt;em&gt;“the imposter syndrome”&lt;/em&gt;.
Here are some common signs that someone might experience, where one feels like an imposter:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Does everyone overestimate you?&lt;/li&gt;
  &lt;li&gt;Do you tend to discuss yourself?&lt;/li&gt;
  &lt;li&gt;Do you compare your ability to those around you and think they’re more intelligent than you are?&lt;/li&gt;
  &lt;li&gt;Does the fear of failure freak you out?&lt;/li&gt;
  &lt;li&gt;Sometimes you’re afraid others will discover how much knowledge you really lack?&lt;/li&gt;
  &lt;li&gt;You can’t understand the compliments you receive?&lt;/li&gt;
  &lt;li&gt;You feel bad when you’re not ‘the best’ or at least ‘very special’?&lt;/li&gt;
  &lt;li&gt;You avoid evaluations if possible and have a dread of others evaluating you?&lt;/li&gt;
  &lt;li&gt;Do you focus more on what you haven’t done?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Madeleine discovered that her answer to all the previous questions was ‘yes’ and came to the conclusion she sabotaged herself. 
Now, how do you escape the ‘imposter zone’?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You aren’t born to live a life of another person&lt;/li&gt;
  &lt;li&gt;Learn to be a healthy perfectionist&lt;/li&gt;
  &lt;li&gt;Answer on the following question ‘What would I do, if I was not afraid?’&lt;/li&gt;
  &lt;li&gt;Ask for help&lt;/li&gt;
  &lt;li&gt;Mentor people what you’re doing&lt;/li&gt;
  &lt;li&gt;It’s a good thing to know, what you don’t know&lt;/li&gt;
  &lt;li&gt;Talk about it&lt;/li&gt;
  &lt;li&gt;Bribe your friends&lt;/li&gt;
  &lt;li&gt;Being wrong doesn’t make you a fraud&lt;/li&gt;
  &lt;li&gt;Focus on providing value and write it down&lt;/li&gt;
  &lt;li&gt;Keep a file of nice things someone has said about you&lt;/li&gt;
  &lt;li&gt;Stop commenting compliments&lt;/li&gt;
  &lt;li&gt;And finally, take time for yourself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Madeleine learned that sometimes, it’s not that bad to be an imposter. 
Because if you are an imposter, you are an overachiever and you can surprise people with your talent.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-1-afternoon&quot;&gt;Day 1 afternoon&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Eirik Vullum&quot; src=&quot;/img/js-conf-budapest-2017/speaker-eirik.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;eirik-vullum-javascript-metaprogramming---es6-proxy-use-and-abuse&quot;&gt;Eirik Vullum: JavaScript Metaprogramming - ES6 Proxy Use and Abuse&lt;/h3&gt;

&lt;p&gt;You can find Eirik on Twitter using the handle &lt;a href=&quot;https://twitter.com/eiriklv&quot;&gt;@eiriklv&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The presentation can be found &lt;a href=&quot;http://slides.com/eiriklv/javascript-metaprogramming-with-proxies/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
This very interesting talk handles metaprogramming in JavaScript. Recently a new feature in ES6 was added to all 
major browsers, making JavaScript even more exciting! 
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;First of all, what is metaprogramming? According to wikipedia: &lt;em&gt;‘The ability to read, generate, analyse or transform 
other programs, and even modify itself while running’&lt;/em&gt;. That is clear enough in my opinion.&lt;/p&gt;

&lt;p&gt;In metaprogramming one can define 2 branches. The first branch could be described as macros to extend your language. 
This happens during compile/transpile time. The second branch is called reflection and happens at runtime. There are 
three forms of reflection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Introspection: the ability to examine itself&lt;/li&gt;
  &lt;li&gt;Self-modification: the ability to alter its structure&lt;/li&gt;
  &lt;li&gt;Intercession: the ability to alter its behaviour&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In JavaScript they are possible by default. Lets call it a perk of this beautiful scripting language. However, it seldom 
results in readable code and you’ll probably need to write a lot of code for something we can now achieve in a much 
easier way.&lt;/p&gt;

&lt;p&gt;This talk covers some of the possibilities of proxies. Proxies couldn’t be used until recently, because it isn’t
polyfillable. It’s a feature that needs to be supported by the engine, where reflection truly happens. 
Therefore, nor typescript, nor babel, nor any other JavaScript preprocessor could solve that for you. 
By the way, preprocessors extend your language through macros, since their magic happens at transpile time.&lt;/p&gt;

&lt;p&gt;So what is this proxy I am so exited about? It’s called a proxy after the same principle we use in networking.
A proxy is middleware that intercepts interaction with an interface. Therefore, it has access to the communication 
stream and it needs access to the interface it’s routing to. That’s very similar to how we can use proxies in 
JavaScript. We can wrap any object with a proxy and define a handler. That handler is an object containing traps. 
A trap is a function that ‘mocks’ a property or function from the object that is being proxied. The proxy then knows 
which actions will be performed (before they are actually performed) and can choose how to handle them. It could do 
something totally different or even nothing at all.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do what you desire (alter the value for example);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this wil execute the default setter&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to indicate success&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    
    &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this wil execute the default getter&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do what you desire&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mySquare&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myProxySquare&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mySquare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above handler will intercept all &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; calls to a proxied class. &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; methods here are so 
called traps. For what purposes can we use this? One of the main purposes is to create developer friendly interfaces. 
In the slides you’ll find some nice examples of great uses. My favorite is the url builder, it’s glorious in its 
simplicity, &lt;a href=&quot;http://slides.com/eiriklv/javascript-metaprogramming-with-proxies/#/46&quot;&gt;check it out here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now to wrap it all up, proxies are awesome, we can create powerful abstractions, be lazy and write less code and add
functionality in a transparent way. Even though it might seem like magic for anyone else than yourself and despite a 
small performance cost, it’s still perfect if you want to create clean interfaces for others to enjoy.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Sandrina Pereira&quot; src=&quot;/img/js-conf-budapest-2017/speaker-sandrina.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;sandrina-pereira-how-can-javascript-improve-your-css-mixins&quot;&gt;Sandrina Pereira: How can Javascript improve your CSS mixins&lt;/h3&gt;

&lt;p&gt;Sandrina is UI Developer at Farfetch. You can find Sandrina on Twitter using the handle &lt;a href=&quot;https://twitter.com/a_sandrina_p&quot;&gt;@a_sandrina_p&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All code can be found on her &lt;a href=&quot;https://github.com/sandrina-p/css-mixins-on-javascript-with-unit-tests&quot;&gt;GitHub&lt;/a&gt; page and the slides &lt;a href=&quot;https://docs.google.com/presentation/d/19v8jkgS_0F7DrGw-8SzHktzy7nkC9W9XCNDqeXzB2wg/edit#slide=id.g235012375a_0_0&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
To write good tests, you have to know exactly what you need to do. 
When you know what to do, you do less.
When you do less, you can do better!
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;CSS and JavaScript work together more than ever these days. 
Using the good parts of both worlds ensures us that we can get better in web development. 
One of the reasons is because CSS primarily doesn’t have logic behind it. 
It’s simple and straightforward. 
However, when you have to start using logic in your CSS, you can for example add a loop with SCSS.
When you find yourself reusing the same CSS code over and over, you can write a &lt;em&gt;mixin&lt;/em&gt;.
However, at the end of the day, things can get ugly. 
Therefore, many programmers use PostCSS to write logic in their CSS code. 
There are more than half a million downloads per month of PostCSS plugins!&lt;/p&gt;

&lt;p&gt;Here’s how you write a mixin in CSS:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// index.css &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mixin&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 	&lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;avatar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;mixin&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is how it works in JavaScript:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// size.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mixinNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// postcss.config.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...  &lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'postcss-mixins'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)({&lt;/span&gt;
 			&lt;span class=&quot;na&quot;&gt;mixindsDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../src/mixins/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
		&lt;span class=&quot;c1&quot;&gt;// ... &lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// index.css&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;avatar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;mixin&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we can’t test logic in CSS, but in JavaScript we can!&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// size.test.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../src/mixins/size.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Size returns width and height'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'24px'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'24px'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'24px'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So you started to use CSS mixins with JavaScript and ended up with a folder full of mixins to improve your CSS. 
Instead of using a series of mixins in the CSS file itself that only improve &lt;strong&gt;your&lt;/strong&gt; project, 
we can create a custom property with the PostCSS plugin called &lt;em&gt;‘Boilerplate’&lt;/em&gt;.
Using that, we can do the following:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// index.css&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;avatar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// index.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postcss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'postcss'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;postcss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'postcss-size'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// let’s transform CSS with JS&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;walkDecls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'size'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 1. get the size value &lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 2. add “width” &amp;amp; “height” properties&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;decl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cloneBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'width'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;decl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cloneBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'height'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 3. remove “size” property &lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;decl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// index.test.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./index.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postcss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'postcss'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Sets width and height'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'.foo { size: 1px; }'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'.foo { width: 1px; height: 1px; }'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After you execute the command &lt;code class=&quot;highlighter-rouge&quot;&gt;npm publish&lt;/code&gt; in the console, you aren’t only going to improve your own project, but everyone’s projects.
You can find other popular PostCSS plugins &lt;a href=&quot;https://github.com/postcss/postcss/blob/master/docs/plugins.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
That’s why I came here today. To share something that improved my project and might improve yours as well. 
I believe sharing is what make us better.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Kacper Sokołowski&quot; src=&quot;/img/js-conf-budapest-2017/speaker-kacper.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;kacper-sokołowski-you-use-content-security-policy-dont-you&quot;&gt;Kacper Sokołowski: You use Content Security Policy, don’t you?&lt;/h3&gt;

&lt;p&gt;Kacper is a front-end developer for Codewise.
He’s also a speaker and community organiser for KrakowJS.
You can find Kacper on Twitter using the handle &lt;a href=&quot;https://twitter.com/kaapa_s&quot;&gt;@kaapa_s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The presentation can be found &lt;a href=&quot;http://slides.com/kaapa/deck/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
Everyone knows that security is important right?
The biggest companies like Facebook and Google spend tons of money on bug bounty programs to ensure that their products are secure.
But is there a way that we can make our website prone to some of the most popular attacks?
There is one security mechanism which can help, but yet not everyone knows and uses it.
It’s called Content Security Policy.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Kacper started his presentation with an example to demonstrate why security is &lt;strong&gt;hard&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
In 2005, Kamkar released the Samy worm, the first self-propagating cross-site scripting worm, onto MySpace.
The worm carried a payload that would display the string &quot;but most of all, Samy is my hero&quot; on a victim's profile and cause the victim to unknowingly send a friend request to Kamkar.
When a user viewed that profile, they would have the payload planted on their page.
Within just 20 hours of its October 4, 2005 release, over one million users had run the payload, making it the fastest spreading virus of all time.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id=&quot;xss&quot;&gt;XSS&lt;/h4&gt;
&lt;p&gt;Cross Site Scripting (XSS) was used to inject and spread the virus.
It’s a technique to inject and execute any JavaScript code in the context of the page.&lt;/p&gt;

&lt;p&gt;What can you do with XSS?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Steal cookies&lt;/li&gt;
  &lt;li&gt;Steal localstorage data&lt;/li&gt;
  &lt;li&gt;Break the layout and style of the page&lt;/li&gt;
  &lt;li&gt;Whatever you can do with JavaScript…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find a lot of information about XSS and other vulnerabilities on this website: &lt;a href=&quot;https://www.owasp.org&quot;&gt;https://www.owasp.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;how-to-be-safe&quot;&gt;HOW TO BE SAFE?!&lt;/h4&gt;

&lt;h5 id=&quot;csp&quot;&gt;CSP&lt;/h5&gt;
&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks.&lt;/p&gt;

&lt;p&gt;Inline code is considered harmful so don’t use something like this:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello JSConfBP!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Instead externalise your code and do something like this:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;http-headers&quot;&gt;HTTP HEADERS&lt;/h5&gt;

&lt;p&gt;When you have externalised your scripts, you need to make sure your site only loads these scripts.
To enable CSP, you need to configure your web server to return the Content-Security-Policy HTTP header.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Specifying your policy:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content-Security-Policy:&lt;/strong&gt; script-src ‘self’ http://google.com …&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Specifying your directive(s):&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Content-Security-Policy: &lt;strong&gt;script-src&lt;/strong&gt; ‘self’ http://google.com …&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Specifying the URL list:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Content-Security-Policy: script-src &lt;strong&gt;‘self’ http://google.com …&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Other directives you can use:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;connect-src&lt;/li&gt;
  &lt;li&gt;img-src&lt;/li&gt;
  &lt;li&gt;script-src&lt;/li&gt;
  &lt;li&gt;style-src&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use the fallback directive for other resource types that don’t have policies of their own: &lt;strong&gt;default-src&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h5&gt;

&lt;p&gt;Many parts of your website &lt;strong&gt;will probably break&lt;/strong&gt; when you CSP for the first time.
So, start using it as early as possible!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Dan Callahan&quot; src=&quot;/img/js-conf-budapest-2017/speaker-dan.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;dan-callahan-practical-webassembly&quot;&gt;Dan Callahan: Practical WebAssembly&lt;/h3&gt;

&lt;p&gt;You can find Dan on Twitter using the handle &lt;a href=&quot;https://twitter.com/callahad&quot;&gt;@callahad&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;In this talk Dan explained what WebAssembly is all about. 
How it works, what it's for, the features that are already there and which features are yet to come.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;WebAssembly, what is it?
Well, according to &lt;a target=&quot;_blank&quot; href=&quot;http://webassembly.org/&quot;&gt;http://webassembly.org/&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote class=&quot;clear&quot;&gt;&quot;WebAssembly or wasm is a new portable, size- and load-time-efficient format suitable for compilation to the web.&quot;&lt;/blockquote&gt;

&lt;p&gt;&lt;b&gt;A compiler for the web:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Low-level, binary format for programs:&lt;br /&gt;
  WebAssembly is a fast, portable, compact, cross-browser binary format for compilation to the web.&lt;/li&gt;
  &lt;li&gt;It’s an &lt;i&gt;open standard&lt;i&gt; supported by &lt;i&gt;all major browsers&lt;/i&gt;. &lt;a href=&quot;https://caniuse.com/#feat=wasm&quot; target=&quot;_blank&quot;&gt;caniuse.com&lt;/a&gt;&lt;/i&gt;&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;Direct successor of asm.js&lt;/li&gt;
  &lt;li&gt;General purpose virtual architecture&lt;/li&gt;
  &lt;li&gt;It allows new types of applications and heavy 3D games to run efficiently in browsers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Why?&lt;/h3&gt;

&lt;h5 id=&quot;performance&quot;&gt;Performance!&lt;/h5&gt;

&lt;p&gt;WebAssembly is a binary format for JS.
It has 2 major benefits:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The JS engine can skip the parsing step&lt;/li&gt;
  &lt;li&gt;It’s much more compact than the JS original source&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;portability&quot;&gt;Portability&lt;/h5&gt;

&lt;p&gt;At the moment of writing this blog, there are two languages that can compile into wasm, those are C/C++ and Rust.
This is great for portability since code written in C works on Mac, Linux and Windows.&lt;/p&gt;

&lt;h3 id=&quot;is-javascript-dead&quot;&gt;Is JavaScript dead?&lt;/h3&gt;

&lt;p&gt;JavaScript is alive, but its client-side monopoly is dead.
WebAssembly doesn’t replace JavaScript, but does expand the web and complements JavaScript:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;High Level (JS) vs. Low Level (WASM)&lt;/li&gt;
  &lt;li&gt;Text (JS) vs. Binary (WASM)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;unity-support&quot;&gt;Unity Support&lt;/h3&gt;

&lt;p&gt;When it comes to creating 3D games, Unity also has experimental support for WebAssembly.&lt;br /&gt;
Check out &lt;b&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://webassembly.org/demo/&quot;&gt;this demo&lt;/a&gt; of an in browser game&lt;/b&gt;&lt;/p&gt;

&lt;h3 id=&quot;unreal-engine&quot;&gt;Unreal Engine&lt;/h3&gt;

&lt;p&gt;This is a video of Epic’s “Zen Garden” demo running in Firefox.
The demo is built with WebAssembly and WebGL 2, both emerging standards that enable amazing video games and applications in the browser.&lt;/p&gt;

&lt;div class=&quot;responsive-video m-b&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/TwuIRcpeUWE?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;what-about-older-browsers&quot;&gt;What about older browsers&lt;/h3&gt;

&lt;p&gt;Use asm.js as a fallback.&lt;/p&gt;

&lt;p&gt;When using Binaryen with Emscripten, it can load the compiled code using one of several methods.&lt;/p&gt;

&lt;p&gt;By setting &lt;code&gt;-s BINARYEN_METHOD='..'&lt;/code&gt; you can specify those methods, as a comma-separated list. 
It will try them one by one, which allows fallbacks.&lt;/p&gt;

&lt;p&gt;By default, it will try native support. The full list of methods is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;native-wasm: Use native binary wasm support in the browser.&lt;/li&gt;
  &lt;li&gt;interpret-s-expr: Load a .wast, which contains wasm in s-expression format and interpret it.&lt;/li&gt;
  &lt;li&gt;nterpret-binary: Load a .wasm, which contains wasm in binary format and interpret it.&lt;/li&gt;
  &lt;li&gt;interpret-asm2wasm: Load .asm.js, compile to wasm on the fly and interpret that.&lt;/li&gt;
  &lt;li&gt;asmjs: Load .asm.js and just run it, no wasm. Useful for comparisons or as a fallback for browsers without WebAssembly support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;can-i-compile-js-to-wasm&quot;&gt;Can I compile JS to WASM?&lt;/h3&gt;

&lt;p&gt;Don’t do that!
Browsers will still have native JavaScript VM along-side wasm.
There’s no reason to compile JS to wasm because you would also have to include a whole JavaScript VM.
The resulting code would be huge and slower than the JS VM natively provided.&lt;/p&gt;

&lt;h3 id=&quot;interesting-links&quot;&gt;Interesting Links:&lt;/h3&gt;

&lt;ul&gt;
    &lt;li&gt;
        &lt;a href=&quot;https://mbebenita.github.io/WasmExplorer/&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; you can translate C/C++ to WebAssembly and see the machine code generated by the browser.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;a href=&quot;https://youtu.be/3GHJ4cbxsVQ&quot; target=&quot;_blank&quot;&gt;YouTube video&lt;/a&gt; on what WebAssembly means for React
    &lt;/li&gt;
    &lt;li&gt;Tanks demo Unity game on &lt;a target=&quot;_blank&quot; href=&quot;http://webassembly.org/demo/&quot;&gt;webassembly.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Luke Bonaccors&quot; src=&quot;/img/js-conf-budapest-2017/speaker-luke.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;luke-bonaccorsi-how-i-ended-up-automating-my-curtains-and-shouting-at-my-laptop&quot;&gt;Luke Bonaccorsi: How I ended up automating my curtains and shouting at my laptop&lt;/h3&gt;

&lt;p&gt;You can find Luke on Twitter using the handle &lt;a href=&quot;https://twitter.com/lukeb_uk&quot;&gt;@lukeb_uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The presentation can be found &lt;a href=&quot;https://docs.google.com/presentation/d/1lG5SmhHLaFwqw1jSKiyNkjipm2UwxSfaPvxKX-C8VVI/edit#slide=id.p&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
Being lazy can lead to some great out of the box thinking and finding innovative solutions for common everyday stuff.
Luke talks about how he created a chatbot that automates things for him to make them a bit less common and/or boring.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;woodhouse&quot;&gt;Woodhouse&lt;/h3&gt;

&lt;div&gt;
&lt;p style=&quot;width: 60%;&quot;&gt;
&lt;img src=&quot;/img/js-conf-budapest-2017/luke-woodhouse.jpg&quot; alt=&quot;Woodhouse&quot; style=&quot;float: left; padding: 5px;&quot; height=&quot;100px&quot; /&gt;
He would have named it Jarvis, but since this would be a far worse butler than Jarvis was, he named it Woodhouse after the butler character from the tv-series 'Archer'.
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Around mid-2014 he started working on a chatbot that does little bits in his house. 
Basically, he put together a Raspberry Pi running JavaScript code that actually serves as a router with some core functionality built in like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Broadcasting&lt;/li&gt;
  &lt;li&gt;Preference storage&lt;/li&gt;
  &lt;li&gt;Scheduling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s two types of modules that make it up:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Plugins do all the heavy-lifting so you can interface with hardware (as long as it’s possible with JavaScript or the node ecosystem) or get it to send a message. You could for example let it connect to API’s to get it to do your builds on your CI tools.&lt;/li&gt;
  &lt;li&gt;The interfaces which are basically chat systems. They are the way to talk to the chat bots. If the system has a way for you to build stuff for it in JavaScript, you can connect to it and let it do stuff on for example: Facebook, Slack, HipChat and many more…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;open-source&quot;&gt;Open source&lt;/h3&gt;
&lt;p&gt;All of it is open source (MIT) and is avaiable on &lt;a href=&quot;https://github.com/Woodhouse/core&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;. 
It’s written in JavaScript and runs on NodeJs.&lt;/p&gt;

&lt;h3 id=&quot;automating-lamps&quot;&gt;Automating Lamps&lt;/h3&gt;
&lt;div class=&quot;responsive-video m-b&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/5YNmMdTzfaQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Sending a message in a chat application that gets picked up by Woodhouse and he/it then turns on his lamps at home.
So, as he walks down the street getting to his house, instead of coming home and stumbling over things searching for the light switch in the dark,
he can just send a message and the lights will be on when he gets there.&lt;/p&gt;

&lt;p&gt;
&lt;img src=&quot;/img/js-conf-budapest-2017/luke-lamp-plugs.jpg&quot; alt=&quot;Lamp plugs image&quot; class=&quot;image left fit&quot; /&gt;
&lt;b&gt;Lamp plugs&lt;/b&gt; (they are from China, so super safe, right?). Maybe not, but they cost about £15 and are great for poking around.
After doing so, he found out that there was a Google group that had been hacking around with them and found the SSH password for it.
It turned out it runs &lt;a href=&quot;https://openwrt.org/&quot; target=&quot;_blank&quot;&gt;OpenWrt&lt;/a&gt; which is a router firmware based on Linux.
So, after being able to SSH into it and work with the Linux installed on it, you can run basic scripts on it (it has limited memory so you can’t just install everything you like on it).
But most importantly, it’s got a web server built into it, so you can hit an endpoint and make the relay turn on. That’s how his relay works.
There’s an endpoint on the plug and when he goes to that endpoint, it switches it on or off depending on a parameter.
&lt;/p&gt;

&lt;h3 id=&quot;automating-the-curtains&quot;&gt;Automating the curtains&lt;/h3&gt;
&lt;p&gt;For giving talks about the application, he wanted to add something new to the application and so… he automated his curtains.&lt;/p&gt;

&lt;div class=&quot;responsive-video m-b&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/Crudcsaheoc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;The setup and parts for it are very basic and simple. It’s basically some string, plastic wheels, a servo and an esp82266.&lt;/p&gt;

&lt;div style=&quot;display: block;&quot;&gt;
&lt;p&gt;
&lt;img src=&quot;/img/js-conf-budapest-2017/luke-esp8266.jpg&quot; alt=&quot;esp8266 board and components&quot; class=&quot;image left fit&quot; /&gt;
The esp8266 is a wireless Arduino type board, but the cheap Chinese version so you can buy loads of them and connect them
to your network. So for about £2 each you can control stuff over your network from anywhere. 
It runs &lt;a href=&quot;https://mongoose-os.com/&quot; target=&quot;_blank&quot;&gt;Mongoose OS&lt;/a&gt;
which lets you write JavaScript on your hardware, it takes away a lot of the complexities of the lower level code and lets you use a language you know.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;shouting-at-his-laptop&quot;&gt;Shouting at his laptop&lt;/h3&gt;

&lt;p&gt;Not out of frustration or anything like that. Besides the chatbot, he wanted to add voice control to the application so that he could tell his laptop to open/close the curtains or turn on/off the lights.&lt;/p&gt;

&lt;div class=&quot;responsive-video m-b&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/CQzn16TzZ0w&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;It uses a NodeJs library for offline ‘hot words’ detection. So instead of having it constantly listening to him,
he can just shout ‘Woodhouse’ which will make it reply to say that it’s listening. The rest of the complex speech to text is done by Google,
since they have a lot more data than him. There are open source systems for doing speech to text, but you would have to train it yourself and well, we’re doing all this because we want to be lazy…
So he created a few of these voice control units and spread them around the house and let them connect to one central instance. So he can activate it from wherever he is in the house.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-1&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So instead of being lazy, he admits to being the stupid kind of lazy. 
He has spent about hundreds of hours coding for it to do simple stuff.
So it’s not really about being lazy, but more being not driven to do those simple things.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;party-feat-livejs-by-sinnerschrader&quot;&gt;Party feat Live:JS by SINNERSCHRADER&lt;/h3&gt;

&lt;p&gt;After a long day of JavaScript fun we were invited to a rooftop party at &lt;a href=&quot;https://corvinteto.hu/&quot;&gt;Corvinteto&lt;/a&gt; located near the venue.
Imagine a party with awesome visuals, music &amp;amp; beats, and lights - all powered and created by JavaScript!
More info about the concept can be found here: &lt;a href=&quot;http://livejs.network&quot;&gt;LiveJS&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;responsive-video&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/G4nIMBWy1bQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-1-conclusion&quot;&gt;Day 1: Conclusion&lt;/h2&gt;

&lt;p&gt;At the first day of the conference we were already inspired by some good talks. Wondering what day 2 would bring.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/conference/2018/01/03/JS-Conf-Budapest-day-2.html&quot;&gt;Read our full report on day 2 of JS Conf Budapest 2017 here!&lt;/a&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Frédéric&quot;, &quot;last_name&quot;=&gt;&quot;Ghijselinck&quot;, &quot;github&quot;=&gt;&quot;fredericghijselinck&quot;, &quot;twitter&quot;=&gt;&quot;f_ghijselinck&quot;, &quot;linkedin&quot;=&gt;&quot;fredericghijselinck&quot;, &quot;permalink&quot;=&gt;&quot;/author/frederic-ghijselinck/&quot;, &quot;avatar&quot;=&gt;&quot;frederic-ghijselinck.jpg&quot;, &quot;title&quot;=&gt;&quot;Competence Lead JavaScript&quot;, &quot;email&quot;=&gt;&quot;frederic.ghijselinck@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Frédéric is a Senior developer at Ordina Belgium, focussing on Frontend Development with technologies as Angular and TypeScript. Next to frontend development, he continues to maintain his backend development skills using the Spring technology stack. Frédéric is also Competence Lead for the JavaScript Competence Center where he gives workshops, talks and courses about the newest technologies.&quot;}</name><email>frederic.ghijselinck@ordina.be</email></author><category term="Conference" /><category term="JS Conf Budapest" /><category term="JavaScript" /><category term="Conference" /><summary type="html">From JSConf Budapest with love</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/js-conf-budapest-2017/header.png" /></entry><entry><title type="html">Securing your cloud-native microservice architecture in Spring: part 2</title><link href="https://ordina-jworks.github.io/microservices/2017/12/30/Secure-your-architecture-part2.html" rel="alternate" type="text/html" title="Securing your cloud-native microservice architecture in Spring: part 2" /><published>2017-12-30T00:00:00+00:00</published><updated>2017-12-30T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/microservices/2017/12/30/Secure-your-architecture-part2</id><content type="html" xml:base="https://ordina-jworks.github.io/microservices/2017/12/30/Secure-your-architecture-part2.html">&lt;p&gt;Since the rise of the digital era, most enterprises keep their data in a digital format.
But if their sensitive data lacks security, it can cause the data to be unreliable, unstable and unavailable to their business.
We have to be prepared if an attacker breaches into our network and tries to hack our sensitive data.
Whether it is in motion or at rest, encrypting our data and using the proper protection mechanisms will make it worthless for the hacker to use.&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ordina-jworks.github.io/microservices/2017/09/26/Secure-your-architecture-part1.html&quot;&gt;Securing your cloud-native microservice architechture in Spring: Part 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cryptographic-algorithms&quot;&gt;Cryptographic Algorithms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#key-mechanics&quot;&gt;Key Mechanics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cloud-hosted-key-management-service&quot;&gt;Cloud-hosted Key management service&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-cloud-config-server&quot;&gt;Spring Cloud Config Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cryptographic-algorithms&quot;&gt;Cryptographic Algorithms&lt;/h2&gt;
&lt;p&gt;When implementing our application, every programming language will provide us with a set of known libraries for cryptographic algorithms. 
A big flaw is implementing an algorithm by yourself, the known algorithms have been reviewed, patched and been known for their excellent security. 
These are the most used types that you can use for encryption at rest:&lt;/p&gt;

&lt;h3 id=&quot;symmetric-encryption&quot;&gt;Symmetric Encryption&lt;/h3&gt;
&lt;p&gt;The key used in encrypting data at rest is used for both encrypting and decrypting the data.
This key becomes very vulnerable if anyone gets a hold on it.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Well known: &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&quot; target=&quot;_blank&quot;&gt;Advanced Encryption Standard encryption&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;asymmetric-encryption&quot;&gt;Asymmetric Encryption&lt;/h3&gt;
&lt;p&gt;In asymmetric encryption, a pair of keys are used. A public key that is exposed and encrypts your data and a private key that is only known by the owner that decrypts your data.
This key-pair can also be used to sign your data, so the application knows that it can trust the source of the data.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Well known:  &lt;a href=&quot;https://en.wikipedia.org/wiki/RSA_(cryptosystem)&quot; target=&quot;_blank&quot;&gt;Rivest–Shamir–Adleman encryption&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-mechanics&quot;&gt;Key Mechanics&lt;/h2&gt;
&lt;p&gt;Encryption keys are another aspect of encryption, handling the keys becomes just as sensitive as the data itself. 
That’s why we need mechanisms on how keys are stored and shared so attackers can’t get a hold on them.&lt;/p&gt;

&lt;h3 id=&quot;key-rotation&quot;&gt;Key rotation&lt;/h3&gt;
&lt;p&gt;Encryption key rotation will provide protection especially when the certificate expires, is corrupted or the key management admin is no longer part of the company. 
Lets say, you got a good eye at detecting patterns and detect that the same key is being used for encrypting data.
To avoid this, you rotate your keys, and every time the same data field is encrypted it will result in a different encrypted message.&lt;/p&gt;

&lt;h3 id=&quot;json-web-key-set&quot;&gt;JSON Web Key (Set)&lt;/h3&gt;
&lt;p&gt;We discussed in the &lt;a href=&quot;https://ordina-jworks.github.io/microservices/2017/09/26/Secure-your-architecture-part1.html&quot;&gt;previous post&lt;/a&gt; about retrieving a JWK(S) to verify our JSON Web Token in our microservice. 
A JWK is a JSON object that represents a cryptographic key that consists of information to verify a JWT. 
If you like to dive into signing JSON documents you can check out this blog post on &lt;a href=&quot;https://ordina-jworks.github.io//security/2016/03/12/Digitally-signing-your-JSON-documents.html#jwk&quot; target=&quot;_blank&quot;&gt;Digitally signing your JSON documents&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;JWKS example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;keys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;alg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;RS256&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kty&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;RSA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;use&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sig&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;x5c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MIIC+DCCAeCgAwIBAgIJBIGjYW6hFpn2MA0GCSqGSIb3DQEBBQUAMCMxITAfBgNVBAMTGGN1c3RvbWVyLWRlbW9zLmF1dGgwLmNvbTAeFw0xNjExMjIyMjIyMDVaFw0zMDA4MDEyMjIyMDVaMCMxITAfBgNVBAMTGGN1c3RvbWVyLWRlbW9zLmF1dGgwLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMnjZc5bm/eGIHq09N9HKHahM7Y31P0ul+A2wwP4lSpIwFrWHzxw88/7Dwk9QMc+orGXX95R6av4GF+Es/nG3uK45ooMVMa/hYCh0Mtx3gnSuoTavQEkLzCvSwTqVwzZ+5noukWVqJuMKNwjL77GNcPLY7Xy2/skMCT5bR8UoWaufooQvYq6SyPcRAU4BtdquZRiBT4U5f+4pwNTxSvey7ki50yc1tG49Per/0zA4O6Tlpv8x7Red6m1bCNHt7+Z5nSl3RX/QYyAEUX1a28VcYmR41Osy+o2OUCXYdUAphDaHo4/8rbKTJhlu8jEcc1KoMXAKjgaVZtG/v5ltx6AXY0CAwEAAaMvMC0wDAYDVR0TBAUwAwEB/zAdBgNVHQ4EFgQUQxFG602h1cG+pnyvJoy9pGJJoCswDQYJKoZIhvcNAQEFBQADggEBAGvtCbzGNBUJPLICth3mLsX0Z4z8T8iu4tyoiuAshP/Ry/ZBnFnXmhD8vwgMZ2lTgUWwlrvlgN+fAtYKnwFO2G3BOCFw96Nm8So9sjTda9CCZ3dhoH57F/hVMBB0K6xhklAc0b5ZxUpCIN92v/w+xZoz1XQBHe8ZbRHaP1HpRM4M7DJk2G5cgUCyu3UBvYS41sHvzrxQ3z7vIePRA4WF4bEkfX12gvny0RsPkrbVMXX1Rj9t6V7QXrbPYBAO+43JvDGYawxYVvLhz+BJ45x50GFQmHszfY3BR9TPK8xmMmQwtIvLu1PMttNCs7niCYkSiUv2sc2mlq1i3IashGkkgmo=&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yeNlzlub94YgerT030codqEztjfU_S6X4DbDA_iVKkjAWtYfPHDzz_sPCT1Axz6isZdf3lHpq_gYX4Sz-cbe4rjmigxUxr-FgKHQy3HeCdK6hNq9ASQvMK9LBOpXDNn7mei6RZWom4wo3CMvvsY1w8tjtfLb-yQwJPltHxShZq5-ihC9irpLI9xEBTgG12q5lGIFPhTl_7inA1PFK97LuSLnTJzW0bj096v_TMDg7pOWm_zHtF53qbVsI0e3v5nmdKXdFf9BjIARRfVrbxVxiZHjU6zL6jY5QJdh1QCmENoejj_ytspMmGW7yMRxzUqgxcAqOBpVm0b-_mW3HoBdjQ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AQAB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NjVBRjY5MDlCMUIwNzU4RTA2QzZFMDQ4QzQ2MDAyQjVDNjk1RTM2Qg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;x5t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NjVBRjY5MDlCMUIwNzU4RTA2QzZFMDQ4QzQ2MDAyQjVDNjk1RTM2Qg&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Explanation properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alg&lt;/code&gt;: is the algorithm for the key&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kty&lt;/code&gt;: is the key type&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt;: is how the key was meant to be used. For the example above sig represents signature.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x5c&lt;/code&gt;: is the x.509 certificate chain&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;: is the exponent for a standard pem&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;: is the modulus for a standard pem&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kid&lt;/code&gt;: is the unique identifier for the key&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x5t&lt;/code&gt;: is the thumbprint of the x.509 cert (SHA-1 thumbprint)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cloud-hosted-key-management-service&quot;&gt;Cloud-hosted Key management service&lt;/h2&gt;
&lt;p&gt;KMS is a fully managed service that allows you to manage your encryption keys in the cloud.
Most of these KMSs offer the best way for encryption and generate, rotate and destroy your keys. 
But the KMS is vendor lock-in so all your keys will stay on the platform.
To avoid vendor lock-in, we can implement our own open source version for managing our encryption keys.&lt;/p&gt;

&lt;p&gt;A few examples to get an idea of KMS:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/kms/&quot; target=&quot;_blank&quot;&gt;Google Cloud KMS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/kms/&quot; target=&quot;_blank&quot;&gt;AWS KMS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/services/key-vault/&quot; target=&quot;_blank&quot;&gt;Azure Vault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A few examples of open-source variants:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-config/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Config Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vaultproject.io/&quot; target=&quot;_blank&quot;&gt;HashiCorp’s Vault&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://square.github.io/keywhiz/&quot; target=&quot;_blank&quot;&gt;Keywhiz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;spring-cloud-config-server&quot;&gt;Spring Cloud Config Server&lt;/h2&gt;
&lt;p&gt;The Spring Cloud Config Server provides a centralized external configuration management backed optionally by a Git repository or database.
Using a REST API for external configuration, Config Server supports encryption and decryption of properties and yml files. 
First step is downloading the Java Cryptography Extension on our local pc.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;JCE provides a framework and implementation for encryption, key generation, key agreement and message authentication code algorithms. 
You’re not installing JCE itself, because it’s packaged within the Java SE binary.
However, you do need to update its policy files from time to time.
Downloads are available for Java &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html&quot; target=&quot;_blank&quot;&gt;6&lt;/a&gt;, &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html&quot; target=&quot;_blank&quot;&gt;7&lt;/a&gt; and &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html&quot; target=&quot;_blank&quot;&gt;8&lt;/a&gt;.
This will allow the config server to use the encryption tool of the JCE.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the download, the next step will be securing the config server by adding Spring Security to the classpath and configuring your Basic/OAuth2 authentication.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-maven&quot; data-lang=&quot;maven&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;key-management&quot;&gt;Key Management&lt;/h3&gt;
&lt;p&gt;The config server supports encryption and decryption with a symmetric key or an asymmetric key-pair.
The choice of which key you will need is within your security terms. 
The symmetric key is the easiest way to set up but less secure than the asymmetric one. 
To set up a symmetric key, you just assign a string to the key holder: 
&lt;code class=&quot;highlighter-rouge&quot;&gt;encrypt.key=&amp;lt;key&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To configure these asymmetric keys, we will need a keystore created by the keytool utility from the JDK.
The public key will encrypt and the private key will decrypt your data.&lt;/p&gt;

&lt;p&gt;To create a keystore you can do something like this in your command line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; keytool &lt;span class=&quot;nt&quot;&gt;-genkeypair&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-alias&lt;/span&gt; &amp;lt;keyname&amp;gt; &lt;span class=&quot;nt&quot;&gt;-keyalg&lt;/span&gt; RSA &lt;span class=&quot;nt&quot;&gt;-keysize&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;-sigalg&lt;/span&gt; SHA512withRSA &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-dname&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CN=Config Server,OU=JWorks,O=Ordina,L=Mechelen,S=State,C=BE&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-keypass&lt;/span&gt; &amp;lt;secret&amp;gt; &lt;span class=&quot;nt&quot;&gt;-keystore&lt;/span&gt; config-server.jks &lt;span class=&quot;nt&quot;&gt;-storepass&lt;/span&gt; &amp;lt;password&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will generate a keystore for the config server to use. 
Place it in your repository project and configure it in your yml.&lt;/p&gt;

&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt;&lt;i class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/i&gt; &lt;b&gt;Warning:&lt;/b&gt; Be aware if you package your keystore within your application jar/war file, the same encryption keys will be used across all of your environments!&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
Example yml in the config server:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;na&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;key-store&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;classpath:config-server.jks // resource location&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;password&amp;gt; // to unlock the keystore&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;config-server-key // to identify which key in the store is to be used&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;secret&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;encryption&quot;&gt;Encryption&lt;/h3&gt;
&lt;p&gt;To encrypt the data, start up your config server locally and enter this in your command line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SECRET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;--data-urlencode&lt;/span&gt; secret http://user:password@localhost:&amp;lt;port&amp;gt;/encrypt&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;datasource.password=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SECRET&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; application-dev.yml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When the encryption is done, we get an encrypted piece of data in your configuration in the form of:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;datasource&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dbuser&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{cipher}FKSAJDFGYOS8F7GLHAKERGFHLSAJ'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;what-to-store-where&quot;&gt;What to store where?&lt;/h3&gt;
&lt;p&gt;When designing your config server, you have different options on where and to which our config server has access.&lt;/p&gt;

&lt;h4 id=&quot;using-a-git-repository&quot;&gt;Using a Git repository&lt;/h4&gt;
&lt;p&gt;The default and most common way most of us use is via private Git repositories where we store our sensitive data where the config server can fetch it.
Be aware, never put configuration inside your code repository, it violates &lt;a href=&quot;https://12factor.net/&quot; target=&quot;_blank&quot;&gt;the twelve-factor app&lt;/a&gt; which requires strict separation of config from code. 
Config varies substantially across deploys, code does not.&lt;/p&gt;

&lt;h5 id=&quot;health-checks&quot;&gt;Health checks&lt;/h5&gt;
&lt;p&gt;You can enable the health check to the config server within the application.
If you do this, always look at which version control would be the best fit, always check when they go into maintenance. 
It could be that they host it in another timezone, which could lead to a cascading failure.
In my opinion, you can just disable the health checks with &lt;code class=&quot;highlighter-rouge&quot;&gt;spring.cloud.config.server.health.enabled=false&lt;/code&gt; and avoid further failures. 
If you expect that the config server might go down temporarily when your client app starts, please provide a retry mechanism after a failure. 
To enable a retry, first add &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-retry&lt;/code&gt; to your classpath with &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableRetry&lt;/code&gt; annotation and &lt;code class=&quot;highlighter-rouge&quot;&gt;spring.cloud.config.failFast=true&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;using-jdbc&quot;&gt;Using JDBC&lt;/h4&gt;
&lt;p&gt;New to this list is the support for JDBC. This enables us to store configuration properties inside a relational database. 
By switching the active spring profile to &lt;code class=&quot;highlighter-rouge&quot;&gt;JDBC&lt;/code&gt; and adding the dependency of &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-jdbc&lt;/code&gt; to your classpath, Spring Boot will configure the datasource you included on the classpath.
To store the data you will need to set up new tables in your database.
For more information: &lt;a href=&quot;http://cloud.spring.io/spring-cloud-static/spring-cloud-config/1.4.0.RELEASE/single/spring-cloud-config.html#_jdbc_backend&quot; target=&quot;_blank&quot;&gt;using JDBC&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;using-vault&quot;&gt;Using Vault&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.vaultproject.io/&quot; target=&quot;_blank&quot;&gt;HashiCorp’s Vault&lt;/a&gt; provides a centralized external management server. 
Vault can manage static and dynamic secrets such as username/password for remote applications/resources and provide credentials for external services such as MySQL, PostgreSQL, Apache Cassandra, MongoDB, Consul, AWS and more.
Spring supports using the &lt;a href=&quot;http://cloud.spring.io/spring-cloud-static/spring-cloud-config/1.4.0.RELEASE/single/spring-cloud-config.html#_vault_backend&quot; target=&quot;_blank&quot;&gt;Vault as a backend&lt;/a&gt; for Spring Cloud Config.
If you are using Spring Boot, a quick way to enable Vault is to set your spring profile to &lt;code class=&quot;highlighter-rouge&quot;&gt;vault&lt;/code&gt;. 
Spring Boot’s conditionals will activate all the auto configuration for a connection with the Vault server.&lt;/p&gt;

&lt;h4 id=&quot;using-file-system&quot;&gt;Using File System&lt;/h4&gt;
&lt;p&gt;So when you’re working locally on your machine, you can always look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;native&lt;/code&gt; profile to activate the file system as your “backend”.
But I don’t recommend it for use in a deployment environment since it comes with various problems and extra setup.
One of those problems would be high availability, unlike Eureka, the config server doesn’t have the concept of peers.
The obvious option is to use a shared file system but it requires extra setup.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;With the latest technologies coming up, you can expect that our data will be stored in an immutable ledger that is secured by cryptography.
But we have to be aware of the arrival of quantum computers. 
This could make the best encryption algorithms useless. 
But as always, we will find a way to protect ourselves…&lt;/p&gt;

&lt;h1 id=&quot;sources&quot;&gt;Sources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&quot; target=&quot;_blank&quot;&gt;Advanced Encryption Standard encryption&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/RSA_(cryptosystem)&quot; target=&quot;_blank&quot;&gt;Rivest–Shamir–Adleman encryption&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/kms/&quot; target=&quot;_blank&quot;&gt;Google Cloud KMS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/kms/&quot; target=&quot;_blank&quot;&gt;AWS KMS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/services/key-vault/&quot; target=&quot;_blank&quot;&gt;Azure Vault&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://12factor.net/&quot; target=&quot;_blank&quot;&gt;The twelve-factor app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cloud.spring.io/spring-cloud-static/spring-cloud-config/1.4.0.RELEASE/single/spring-cloud-config.html#_jdbc_backend&quot; target=&quot;_blank&quot;&gt;Using JDBC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vaultproject.io/&quot; target=&quot;_blank&quot;&gt;HashiCorp’s Vault&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cloud.spring.io/spring-cloud-static/spring-cloud-config/1.4.0.RELEASE/single/spring-cloud-config.html#_vault_backend&quot; target=&quot;_blank&quot;&gt;Vault as a backend&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-config/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Config Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://square.github.io/keywhiz/&quot; target=&quot;_blank&quot;&gt;Keywhiz&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html&quot; target=&quot;_blank&quot;&gt;JCE 6&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html&quot; target=&quot;_blank&quot;&gt;JCE 7&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html&quot; target=&quot;_blank&quot;&gt;JCE 8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van Houtte&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-houtte/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-houtte.jpg&quot;, &quot;twitter&quot;=&gt;&quot;KevinVHoutte&quot;, &quot;linkedin&quot;=&gt;&quot;kevin-van-houtte-55ba936a&quot;, &quot;github&quot;=&gt;&quot;KevinVHoutte&quot;, &quot;title&quot;=&gt;&quot;Software Consultant Java&quot;, &quot;email&quot;=&gt;&quot;kevin.vanhoutte@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin Van Houtte is a Software Engineer at Ordina Belgium. Passionate in the Spring ecosystem, Kevin is eager to discover new and efficient ways to solve problems. He enjoys a good challenge and is interested in cutting edge technologies. Kevin has a strong focus on building cloud native architectures with the right mindset on security and API design.&quot;}</name><email>kevin.vanhoutte@ordina.be</email></author><category term="Microservices" /><category term="Microservices" /><category term="Security" /><category term="Encryption" /><category term="Spring" /><category term="Cloud" /><category term="Config" /><summary type="html">Since the rise of the digital era, most enterprises keep their data in a digital format. But if their sensitive data lacks security, it can cause the data to be unreliable, unstable and unavailable to their business. We have to be prepared if an attacker breaches into our network and tries to hack our sensitive data. Whether it is in motion or at rest, encrypting our data and using the proper protection mechanisms will make it worthless for the hacker to use.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/microservices/part2/part2logo.jpg" /></entry></feed>