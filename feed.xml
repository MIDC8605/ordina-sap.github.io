<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2017-09-26T08:21:24+00:00</updated><id>https://ordina-jworks.github.io/</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">Securing your cloud-native microservice architecture in Spring: part 1</title><link href="https://ordina-jworks.github.io/microservices/2017/09/26/Secure-your-architecture-part1.html" rel="alternate" type="text/html" title="Securing your cloud-native microservice architecture in Spring: part 1" /><published>2017-09-26T00:00:00+00:00</published><updated>2017-09-26T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/microservices/2017/09/26/Secure-your-architecture-part1</id><content type="html" xml:base="https://ordina-jworks.github.io/microservices/2017/09/26/Secure-your-architecture-part1.html">&lt;p&gt;When developing cloud-native microservices, we need to think about securing the data that is being propagated from one service to another service and securing the data at rest. 
So how much security is enough to secure our architecture? Is it the user that identifies itself and decides what data he has access to?&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#our-cloud-native-architecture&quot;&gt;Our cloud-native architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#where-our-journey-begins&quot;&gt;Authentication &amp;amp; Authorization Principle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-the-oauth2-protocol&quot;&gt;Using the OAuth2 Protocol&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jwt&quot;&gt;Understanding JSON Web Tokens&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#uaa&quot;&gt;Using a User Authentication &amp;amp; Authorization Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#securing-your-microservice&quot;&gt;Securing your microservice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;our-cloud-native-architecture&quot;&gt;Our cloud-native architecture&lt;/h1&gt;
&lt;p&gt;In this blog series we will cover these questions and guide you in applying the security layer to your cloud-native blueprint.
With this blueprint, we are going to use the &lt;a href=&quot;https://spring.io/&quot; target=&quot;_blank&quot;&gt;Spring ecosystem&lt;/a&gt; throughout the series.
Solving the following problems is crucial for building a cloud-native microservices architecture, but it should be technology-agnostic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User Authentication &amp;amp; Authorization Server: &lt;a href=&quot;https://spring.io/guides/tutorials/spring-boot-oauth2/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Security OAuth2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Load Balancer &amp;amp; Routing: &lt;a href=&quot;https://spring.io/guides/gs/routing-and-filtering/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Zuul&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Communication client: &lt;a href=&quot;http://projects.spring.io/spring-cloud/spring-cloud.html#spring-cloud-feign&quot; target=&quot;_blank&quot;&gt;Spring Cloud Feign&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Externalized Config: &lt;a href=&quot;https://cloud.spring.io/spring-cloud-config/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Config Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 2.5rem auto; width: 100%;&quot;&gt;
  &lt;div class=&quot;col-md-offset-3 col-md-6&quot; style=&quot;padding: 0;&quot;&gt;
	
&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;arch&quot; src=&quot;/img/microservices/part1/cloud-architecture.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;where-our-journey-begins&quot;&gt;Where our journey begins…&lt;/h1&gt;
&lt;p&gt;When it comes to users interacting with our system, we want to verify that the person can identify him- or herself.
Most of the time this appears in a login form where you enter your credentials, or in a login page from a third party application (Facebook, Google, etc).&lt;/p&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 2.5rem auto; width: 100%;&quot;&gt;
  &lt;div class=&quot;col-md-offset-3 col-md-6&quot; style=&quot;padding: 0;&quot;&gt;
	
&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;login&quot; src=&quot;/img/microservices/part1/login.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you like more secure systems, you can add another level of complexity on top of it.
Most commonly used is &lt;a href=&quot;https://en.wikipedia.org/wiki/Multi-factor_authentication&quot; target=&quot;_blank&quot;&gt;Two-factor-authentication&lt;/a&gt;, where the client will use an external provider (Google Authenticator for example) to issue a token for your registered application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;authorization&quot;&gt;Authorization&lt;/h2&gt;
&lt;p&gt;Authorization is the mechanism that uses the user’s data to verify what he is allowed to do.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;For instance, who has access to which resources and what are his access rights (eg. read or write) to those resources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To use these two mechanisms in our system, we will be using a security protocol that fits our microservices architecture.
Since we don’t want everyone to have an account for each (micro)service, we aim to have one single identity per person so that the user needs to authenticate only once.&lt;/p&gt;

&lt;h1 id=&quot;using-the-oauth2-protocol&quot;&gt;Using the OAuth2 Protocol&lt;/h1&gt;
&lt;p&gt;When searching for a security protocol, we don’t want to reinvent the wheel and look at what is supported by the Spring framework.
Obviously, it depends on the use case of the applications that require resources from our system.
Is it a third party application like Facebook or a first party like your own application? Or both? 
I will explain both &lt;a href=&quot;#oauth2-scopes&quot; target=&quot;_blank&quot;&gt;OAuth2&lt;/a&gt; and &lt;a href=&quot;#jwt&quot; target=&quot;_blank&quot;&gt;JSON Web Token&lt;/a&gt; and how they solve these requirements.&lt;/p&gt;

&lt;p&gt;The OAuth2 delegation protocol allows us to retrieve an access token from an idenity provider and gain access to a microservice by passing the token with subsequent requests.
When introducing the OAuth2 framework to our system, we will be using four grant types.
These grant types are different ways to obtain an access token, some clients are more trusted than others.&lt;/p&gt;

&lt;h3 id=&quot;oauth2-grant-types&quot;&gt;OAuth2 Grant Types&lt;/h3&gt;

&lt;h4 id=&quot;third-party-applications-authorization-code-grant-type-and-implicit-grant-type&quot;&gt;Third party applications: Authorization Code grant type and Implicit grant type&lt;/h4&gt;
&lt;p&gt;Authorization Code is the most common used grant type for third party applications, where user’s confidentiality can be maintained.
The user won’t have to share his credentials with the application that is requesting resources from our backend. 
This is a redirection-based flow, which means that the application must be capable of interacting with the user’s web browser.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The frontend (application) makes a request to the User Authentication &amp;amp; Authorization server (UAA) on behalf of the user&lt;/li&gt;
  &lt;li&gt;The UAA server redirects to a permission window of a third party for the user to grant permission, the user authenticates and grants permission&lt;/li&gt;
  &lt;li&gt;The UAA server returns an authorization code with a redirect url&lt;/li&gt;
  &lt;li&gt;The frontend uses the authorization code and an application identification to request an access token from the UAA server&lt;/li&gt;
  &lt;li&gt;The UAA verifies the authorization code and returns an access token&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Implicit grant type follows the same principle as the Authorization Code type but does not exchange an authorization code to issue an access token.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;57b5f3f256a3449b9b3038bc69bf2d5f&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;first-party-applications-password-grant-type&quot;&gt;First party applications: Password grant type&lt;/h4&gt;
&lt;p&gt;This grant type is best used for first party applications,
where the user is in a trust relationship with the application.
The application authenticates on behalf of the user and receives the proper JWT.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The user provides his credentials to the frontend, commonly done with a login form&lt;/li&gt;
  &lt;li&gt;The frontend assembles a POST request with the credentials to the UAA server&lt;/li&gt;
  &lt;li&gt;The UAA validates the user and returns a valid JWT&lt;/li&gt;
&lt;/ul&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;1a77277934e14454bf3a66f22a31a26a&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;trusted-service-to-service-communication-client-credentials-grant-type&quot;&gt;Trusted Service to Service communication: Client Credentials grant type&lt;/h4&gt;
&lt;p&gt;The trusted service can request an access token using only its client-id and client-secret.
When the client is requesting access to the protected resources under its control, 
it is very important that the client credentials grant type MUST only be used by confidential clients.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Zuul authenticates with his client-id and client-secret&lt;/li&gt;
  &lt;li&gt;The UAA validates the credentials and returns a valid JWT&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;oauth2-scopes&quot;&gt;OAuth2 Scopes&lt;/h3&gt;
&lt;p&gt;OAuth 2.0 scopes provide a way to limit the amount of access that is granted to an access token.
If the scope is not defined, the client is not limited by scope.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An access token issued to a client can be granted READ or/and WRITE access to protected resources.
If you enforce a WRITE scope to your API endpoint and it tries to call the endpoint with a token granted a READ scope, the call will fail&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;jwt&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;json-web-tokens-jwt&quot;&gt;JSON Web Tokens (JWT)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jwt.io/&quot; target=&quot;_blank&quot;&gt;JSON Web Tokens&lt;/a&gt; (JWT) is a compact URL-safe means of representing claims to be transferred between two parties.
The claims in a JWT are encoded as a JavaScript Object Notation (JSON) object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or MACed and/or encrypted.
The suggested pronunciation of JWT is the same as the English word “jot”.
The payload consists of some standard attributes (called claims), such as issuer, subject (the user’s identity), and expiration time.
The specification allows these claims to be customized, allowing additional information to be passed along.
Be careful when passing additional information, if you like to go deeper on this topic with a real use case, you can read &lt;a href=&quot;http://ordina-jworks.github.io/microservices/2016/05/01/Using-JWT-Tokens-for-State-Transfer.html&quot;&gt;Using JWT for State Transfer&lt;/a&gt;
&lt;a href=&quot;https://jwt.io/&quot; target=&quot;_blank&quot;&gt;Jwt.io&lt;/a&gt; provides a quick way to decode your JWT.&lt;/p&gt;

&lt;p&gt;One of the challenges in a microservice-based architecture is identity propagation.
After the authentication, the identity of the user needs to be propagated to the next microservice in a trusted way. &lt;br /&gt;
JWT is used here to carry along information of the user.
Based on a token, your microservice needs to be able to create a principal object. 
This principal object needs to contain all the necessary info so the system can decide whether or not the request should be executed or not.&lt;/p&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 2.5rem auto; width: 100%;&quot;&gt;
  &lt;div class=&quot;col-md-offset-3 col-md-6&quot; style=&quot;padding: 0;&quot;&gt;
	
&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;jwt&quot; src=&quot;/img/microservices/part1/jwt-example.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;dealing-with-time&quot;&gt;Dealing with time&lt;/h3&gt;

&lt;p&gt;When propagating the identity of the user, you don’t want it to last for a infinite amount of time. &lt;br /&gt;
That’s why JWTs have an expiration time.
When expired, the JWT will be invalid and the client needs to request a new JWT with the refresh token.
These refresh tokens carry the needed information to issue a new JWT.
Refresh tokens can also expire but are rather long-lived.
JWTs have three fields that relate to time and expiry, all of which are optional.
In most cases, you should include these fields and validate that the token:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;is not expired (exp)&lt;/li&gt;
  &lt;li&gt;was created before the current time (iat)&lt;/li&gt;
  &lt;li&gt;should not be used before the current time (nbf)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these times are expressed as UNIX epoch timestamps, and are best checked in the order as described above.&lt;/p&gt;

&lt;h3 id=&quot;signed-jwts&quot;&gt;Signed JWTs&lt;/h3&gt;

&lt;p&gt;Signing a JWT helps establish trust between services, because it gives a recipient reason to believe that the message was created by a known sender and that the message was not altered in transit.
JWTs are being signed by a public/private key pair.
Almost all of the JWT libraries support signing. To check if yours supports it, visit &lt;a href=&quot;https://jwt.io/#libraries-io&quot;&gt;JWT Libraries&lt;/a&gt;.
For a deeper dive into signing JWT, check our tech post about &lt;a href=&quot;http://ordina-jworks.github.io/security/2016/03/12/Digitally-signing-your-JSON-documents.html&quot; target=&quot;_blank&quot;&gt;Digitally signing your JSON Documents&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The user requests a resource&lt;/li&gt;
  &lt;li&gt;The frontend assembles a request with an Authorization header and a Bearer token inside, fires off the request to Zuul&lt;/li&gt;
  &lt;li&gt;Zuul verifies the token in communication with the UAA server&lt;/li&gt;
  &lt;li&gt;If the token is valid, Zuul redirects the frontend to the correct resource on the proper microservice&lt;/li&gt;
  &lt;li&gt;The microservice checks for authorization to the resource, if access granted, the correct resource is returned&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stateless&quot;&gt;Stateless&lt;/h3&gt;
&lt;p&gt;Since we are working with cloud-native applications, we can’t have any state within them.
Because we have all the necessary information and create a new principal object for each request, the token eliminates the risk of having in-memory session state in the microservice.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;uaa&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;using-a-user-authentication--authorization-server-uaa&quot;&gt;Using a User Authentication &amp;amp; Authorization Server (UAA)&lt;/h1&gt;
&lt;p&gt;The UAA server is an identity provider. It adds authentication to applications and secures services with minimum fuss.
It’s primary role is that of an identity provider, issuing tokens for client applications to use when they act on behalf of users. 
It can also authenticate users with their credentials, and can act as an SSO service using those credentials.&lt;/p&gt;

&lt;p&gt;There are some options available as a UAA server:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Using a third party for issuing tokens (ex. Github, Facebook). &lt;a href=&quot;https://spring.io/guides/tutorials/spring-boot-oauth2/#_social_login_github&quot; target=&quot;_blank&quot;&gt;Tutorial Github social login&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Using &lt;a href=&quot;http://www.keycloak.org/&quot; target=&quot;_blank&quot;&gt;KeyCloak&lt;/a&gt;, an open source solution aimed to make it easy to secure your application. &lt;a href=&quot;https://dzone.com/articles/easily-secure-your-spring-boot-applications-with-k&quot; target=&quot;_blank&quot;&gt;Tutorial on how to use KeyCloak in Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Using &lt;a href=&quot;https://www.okta.com/&quot; target=&quot;_blank&quot;&gt;Okta&lt;/a&gt;, a commercial OAuth2, SAML and general identity management service in the cloud.&lt;/li&gt;
  &lt;li&gt;Implementing your own UAA is not really best practice since other providers cover most of the use cases. &lt;a href=&quot;https://youtu.be/EoK5a99Bmjc?t=4&quot; target=&quot;_blank&quot;&gt;Explanatory video of the UAA server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;enabling-single-sign-on&quot;&gt;Enabling Single Sign-On&lt;/h2&gt;
&lt;p&gt;Now that we have a way to achieve Authentication and Authorization by applying OAuth2 and JWT, we still have one problem.
Having multiple frontends in our architecture, the user will have to log in to each of these applications.
With Single Sign-On (SSO) we can eradicate this problem just by using the existing user session and requesting an access token.&lt;/p&gt;

&lt;h3 id=&quot;enable-oauth2-sso-flow-on-zuul-service&quot;&gt;Enable OAuth2 SSO flow on Zuul service&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableOAuth2Sso&lt;/code&gt;  and &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableZuulProxy&lt;/code&gt; annotation on our Zuul service will forward OAuth2 tokens to the services it is proxying.&lt;/p&gt;

&lt;h3 id=&quot;sensitive-headers&quot;&gt;Sensitive Headers&lt;/h3&gt;
&lt;p&gt;Zuul secures your sensitive headers by blocking these headers downstream (microservice).
Since the default settings for sensitive headers blocks the Authorization header, we have to open this setting and send these headers downstream.
You can choose to set the sensitive header per route or globally.&lt;/p&gt;

&lt;p&gt;How it works: &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-netflix/blob/master/docs/src/main/asciidoc/spring-cloud-netflix.adoc#cookies-and-sensitive-headers&quot; target=&quot;_blank&quot;&gt;Sensitive Headers&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;zuul-filter&quot;&gt;Zuul Filter&lt;/h3&gt;
&lt;p&gt;Based on &lt;a href=&quot;https://github.com/Netflix/Zuul&quot; target=&quot;_blank&quot;&gt;Netflix’s Zuul&lt;/a&gt;, Spring’s implementation also brings a filter mechanism.
Filters are capable of performing a range of actions during the routing of HTTP requests and responses.
This can help you customize security on your incoming and outgoing traffic.
Review the &lt;a href=&quot;https://github.com/Netflix/Zuul/wiki/How-it-Works&quot; target=&quot;_blank&quot;&gt;Zuul filter guide&lt;/a&gt; from Netflix about how filters work.&lt;/p&gt;

&lt;h1 id=&quot;securing-your-microservice&quot;&gt;Securing your microservice&lt;/h1&gt;
&lt;p&gt;When enabling security in your service, the most common issues are developer-induced.
Either there is a lack of built-in or easy security controls, or we make trade-offs for functionality over security.
Still, we have to think about who can access this functionality and what they can do with it.&lt;/p&gt;

&lt;p&gt;We got an access token, our gateway performed a coarse grained verification and proxied it to our microservice.
We are in a ‘downstream service’, where data is being load-balanced from Zuul. 
The next questions are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How do we decode this JWT?&lt;/li&gt;
  &lt;li&gt;How can we secure our code with the help of Spring Security?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;assembling-the-principal&quot;&gt;Assembling the Principal&lt;/h2&gt;
&lt;p&gt;It is the responsibility of a microservice (Resource Server) to extract information about the user from the access token.
Decoding the token allows the extraction of the user’s information.
With this information Spring Security will assemble a Principal object containing eg. the username and the user’s roles, and puts it in the security context. 
Using the security context the &lt;code class=&quot;highlighter-rouge&quot;&gt;AccessDecisionManager&lt;/code&gt; will be able to make a decision whether or not the request should be performed.
To enable this, we need to add spring security to our class path and add the &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableResourceServer&lt;/code&gt; annotation to our application.&lt;/p&gt;

&lt;h3 id=&quot;best-practices-with-keys&quot;&gt;Best practices with keys&lt;/h3&gt;
&lt;p&gt;The problem that might occur is that &lt;strong&gt;every microservice&lt;/strong&gt; would need to connect with the UAA server for verification on every request.&lt;/p&gt;

&lt;h4 id=&quot;zuul-verification&quot;&gt;Zuul verification&lt;/h4&gt;
&lt;p&gt;Obviously, we don’t want every microservice to depend on the UAA servers availability regardless of startup / testing / CI. 
The solution is to disable exposure of your microservices to the outer network and handle only incoming traffic via the gateway (eg. Zuul, HAProxy, nginx,…).
Zuul will verify the token as a trustworthy client of the UAA server and will propagate the token to the downstream services.
But what if a hacker gets inside of your platform?&lt;/p&gt;

&lt;h4 id=&quot;json-web-keys&quot;&gt;JSON Web Keys&lt;/h4&gt;
&lt;p&gt;To solve this issue, we need an extra validity check on the microservice.
When verifying a token’s validity, it comes down to verifying if the token was issued by the UAA server.
This can be done by requesting the public key used for signing the JWT. This is called a &lt;a href=&quot;http://ordina-jworks.github.io/security/2016/03/12/Digitally-signing-your-JSON-documents.html#jwk&quot; target=&quot;_blank&quot;&gt;JWK or JSON Web Key&lt;/a&gt;.
Basically, you can restrict the dependency on the UAA server to one single REST call, where the JWK is fetched from a public URI.
Once a microservice has a cached JWK, it can be used to verify any JWT completely by itself.
This greatly reduces network calls to the UAA server and still secures all of your microservices.
When you want to rotate your private/public key pair, you can use &lt;a href=&quot;https://auth0.com/docs/jwks&quot; target=&quot;_blank&quot;&gt;JWKS&lt;/a&gt;. 
We will go deeper into detail in one of our next posts.&lt;/p&gt;

&lt;h3 id=&quot;securing-api-endpoints&quot;&gt;Securing API endpoints&lt;/h3&gt;
&lt;p&gt;At last we’re going to secure our resources.
Spring Security gives us a variety of tools to secure your application at class and method level.
The one that’s used most often enables method security, which you enable by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableGlobalMethodSecurity(prePostEnabled = true)&lt;/code&gt; to your configuration.&lt;/p&gt;

&lt;h4 id=&quot;authority&quot;&gt;Authority&lt;/h4&gt;
&lt;p&gt;For the authorization, Spring Security provides us with &lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/3.0.x/reference/authz-arch.html&quot; target=&quot;_blank&quot;&gt;authorities&lt;/a&gt;, extracted from the access token.
The authorities are placed inside a &lt;a target=&quot;_blank&quot; href=&quot;http://www.baeldung.com/get-user-in-spring-security&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Principal&lt;/code&gt;&lt;/a&gt;, which will be used throughout the existing security context of your application.
You can then reference them using Spring Expression Language (SpEL) to secure your methods.
There are plenty of options you can use for method security, but we’ll highlight the most common ones.&lt;/p&gt;

&lt;p&gt;You can find a complete list in the &lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/3.0.x/reference/el-access.html&quot; target=&quot;_blank&quot;&gt;Spring documentation&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;preauthorize&quot;&gt;@PreAuthorize&lt;/h5&gt;
&lt;p&gt;Most commonly used, &lt;code class=&quot;highlighter-rouge&quot;&gt;@PreAuthorize&lt;/code&gt; will decide whether a method can actually be invoked or not.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;When a user logs in and you want the user to only access his detail information, or everyone’s data in case he’s an admin, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;@PreAuthorize&lt;/code&gt; annotation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@PreAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(authentication.principal.uuid == #uuid.toString()) or hasRole('ADMIN')&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uuid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;postauthorize&quot;&gt;@PostAuthorize&lt;/h5&gt;
&lt;p&gt;Less commonly, you may wish to perform the access-control check after the method has been invoked.
The returnObject is the returned value of that method.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A user can only view his own details and not those of someone else, but an administrator can.
You validate this by checking if the user has the admin role or if the principal’s UUID is the same as the one of the returned user object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@PreAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hasAnyRole('ADMIN','USER')&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@PostAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;returnObject!=null or hasRole('ADMIN') or returnObject.uuid.toString() == authentication.principal.uuid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uuid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;next-step&quot;&gt;Next step&lt;/h1&gt;
&lt;p&gt;In the next post we will cover how to secure your data at rest.&lt;/p&gt;

&lt;h1 id=&quot;sources&quot;&gt;Sources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2015/01/20/microservice-registration-and-discovery-with-spring-cloud-and-netflix-s-eureka&quot; target=&quot;_blank&quot;&gt;Spring Cloud Eureka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/guides/gs/circuit-breaker/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Hystrix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/guides/gs/routing-and-filtering/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Zuul&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://projects.spring.io/spring-cloud/spring-cloud.html#spring-cloud-feign&quot; target=&quot;_blank&quot;&gt;Spring Cloud Feign&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-config/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Config Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/guides/tutorials/spring-boot-oauth2/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Security OAuth2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Multi-factor_authentication&quot; target=&quot;_blank&quot;&gt;Two-factor-authentication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#oauth2-scopes&quot; target=&quot;_blank&quot;&gt;OAuth2 Scopes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/EoK5a99Bmjc?t=4&quot; target=&quot;_blank&quot;&gt;Josh Long UAA intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/guides/tutorials/spring-boot-oauth2/#_social_login_github&quot; target=&quot;_blank&quot;&gt;Tutorial Github social login&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.keycloak.org/&quot; target=&quot;_blank&quot;&gt;KeyCloak&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dzone.com/articles/easily-secure-your-spring-boot-applications-with-k&quot; target=&quot;_blank&quot;&gt;Tutorial on how to use KeyCloak in Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.okta.com/&quot; target=&quot;_blank&quot;&gt;Okta&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://projects.spring.io/spring-security-oauth/docs/oauth2.html&quot; target=&quot;_blank&quot;&gt;Spring OAuth2 developers guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-netflix/blob/master/docs/src/main/asciidoc/spring-cloud-netflix.adoc#cookies-and-sensitive-headers&quot; target=&quot;_blank&quot;&gt;Sensitive Headers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Netflix/Zuul/wiki/How-it-Works&quot; target=&quot;_blank&quot;&gt;Zuul Filters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/3.0.x/reference/el-access.html&quot; target=&quot;_blank&quot;&gt;Spring Expression Language&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/3.0.x/reference/authz-arch.html&quot; target=&quot;_blank&quot;&gt;Authorities&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jwt.io/&quot; target=&quot;_blank&quot;&gt;JWT decoder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jwt.io/#libraries-io&quot;&gt;JWT Libraries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ordina-jworks.github.io/security/2016/03/12/Digitally-signing-your-JSON-documents.html#jwk&quot; target=&quot;_blank&quot;&gt;JWK or JSON Web Key&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://auth0.com/docs/jwks&quot; target=&quot;_blank&quot;&gt;JWKS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van Houtte&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-houtte/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-houtte.jpg&quot;, &quot;twitter&quot;=&gt;&quot;KevinVHoutte&quot;, &quot;linkedin&quot;=&gt;&quot;kevin-van-houtte-55ba936a&quot;, &quot;github&quot;=&gt;&quot;kevindahub&quot;, &quot;title&quot;=&gt;&quot;Software Consultant Java/JavaScript&quot;, &quot;email&quot;=&gt;&quot;kevin.vanhoutte@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin Van Houtte is a Software Engineer at Ordina Belgium. Passionate in the Spring ecosystem and Angular framework Kevin is eager to discover new and efficient ways to solve problems. He enjoys a good challenge and is interested in cutting edge technologies. Currently he works on a project with Microservices, Spring and Angular/TypeScript.&quot;}</name><email>kevin.vanhoutte@ordina.be</email></author><category term="Microservices" /><category term="Microservices" /><category term="Security" /><category term="OAuth2" /><category term="JWT" /><category term="Spring" /><category term="Cloud" /><summary type="html">When developing cloud-native microservices, we need to think about securing the data that is being propagated from one service to another service and securing the data at rest. So how much security is enough to secure our architecture? Is it the user that identifies itself and decides what data he has access to?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/microservices/part1/securitylogo.png" /></entry><entry><title type="html">Browser Security Features</title><link href="https://ordina-jworks.github.io/conference/2017/09/18/Browser-security-features.html" rel="alternate" type="text/html" title="Browser Security Features" /><published>2017-09-18T00:00:00+00:00</published><updated>2017-09-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2017/09/18/Browser-Security-Features</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2017/09/18/Browser-security-features.html">&lt;h1 id=&quot;browser-security-features&quot;&gt;Browser security features&lt;/h1&gt;
&lt;p&gt;Browsers nowadays come with a ton of security features built-in.
These features are there to protect the people using your application as well as protecting your application from malicious others.
Most of these features are quite easy to implement, however for some of them (such as key-pinning) you have to be careful not to break your site.
It’s this danger, combined with the lack of knowledge, that prevents people from taking full advantage of them.&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#transport-layer-security&quot;&gt;Transport Layer Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#public-key-pinning&quot;&gt;Public Key Pinning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#content-security-policy&quot;&gt;Content Security Policy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#subresource-integrity&quot;&gt;Subresource Integrity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cookie-protection&quot;&gt;Cookie Protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;transport-layer-security&quot;&gt;Transport Layer Security&lt;/h2&gt;
&lt;p&gt;The first layer of defense is not a new one at all: Transport Layer Security (TLS).
TLS is sometimes (incorrectly) referred to as SSL (Secured Socket Layer). 
In reality SSL is an obsolete technology, with TLS being its successor, but the name stuck.&lt;/p&gt;

&lt;p&gt;Having said this, why should you use TLS? 
First of all, most of the features described below &lt;em&gt;only&lt;/em&gt; work when you’re on a secured connection.
Besides that, it guarantees the end user that the site they’re communicating with is actually the site they think it is.
It also provides the guarantee that the content they see was not tampered with while travelling over the network.&lt;/p&gt;

&lt;p&gt;Another thing TLS brings to the table is speed: it used to be true that a secure connection was slower than an unsecured one.
Modern hardware however is more than up to the task of handling this efficiently for you.
Besides that, HTTP/2 is &lt;em&gt;only&lt;/em&gt; available over a secure connection and it allows for faster page loads.
Have a look at &lt;a href=&quot;http://www.httpvshttps.com/&quot; target=&quot;_blank&quot;&gt;HTTP vs HTTPS&lt;/a&gt; for a demo of the difference.&lt;/p&gt;

&lt;p&gt;Since speed should no longer prevent you from switching to HTTPS, there’s only cost.
Even that is no longer true: a simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-validated_certificate&quot; target=&quot;_blank&quot;&gt;Domain Validation&lt;/a&gt; certificate can be obtained for free.
But even if you need more protection, an &lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_Validation_Certificate&quot; target=&quot;_blank&quot;&gt;Extended Validation&lt;/a&gt; certificate can be had for as little as $300 per year.&lt;/p&gt;

&lt;h3 id=&quot;how-hard-is-it&quot;&gt;How hard is it?&lt;/h3&gt;
&lt;p&gt;The main issue is that all resources you use on your site should be served over HTTPS.
This means that all third parties should use TLS as well.
Furthermore, it depends on the complexity of your site.
Nick Craver wrote an extensive &lt;a href=&quot;https://nickcraver.com/blog/2017/05/22/https-on-stack-overflow/&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt; on their road to switching to HTTPS.&lt;/p&gt;

&lt;h3 id=&quot;should-you-activate-this-on-your-site&quot;&gt;Should you activate this on your site?&lt;/h3&gt;
&lt;p&gt;Absolutely! 
Modern browsers are shifting from notifying users that a page is secure to warning them that it isn’t.
On top of that, Google gives a slight ranking boost to HTTPS sites.&lt;/p&gt;

&lt;h2 id=&quot;http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/h2&gt;
&lt;p&gt;Once your server is properly configured to use TLS, your next step is to redirect your users to the secure version.
You could do this by simply adding a redirect-rule in your web server for the non-secure pages.
This means that users will still first connect to your non-secure site, allowing a potential attacker to intercept the request and do his nefarious deeds.
Wouldn’t it be nice if you could tell the browser to just go straight to the secure version?
That’s the thinking behind the HSTS (HTTP Strict Transport Security) header.&lt;/p&gt;

&lt;p&gt;HSTS simply tells the browser that you’re expecting it to use HTTPS for a certain time.
As a result, the browser will &lt;em&gt;automatically&lt;/em&gt; replace &lt;code class=&quot;highlighter-rouge&quot;&gt;http://&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt; &lt;strong&gt;before&lt;/strong&gt; making the call.
This means that even following a link that explicitly defines &lt;code class=&quot;highlighter-rouge&quot;&gt;http://&lt;/code&gt; will instead be called using a secure connection.&lt;/p&gt;

&lt;p&gt;The configuration of HSTS is as easy as can be: you simply add the following header to your response:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Strict-Transport-Security: max-age=31536000; includeSubDomains
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will tell the browser that for the next 365 days, it should connect to your domain using HTTPS.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;includesubdomains&lt;/code&gt; directive tells the browser that your subdomains should also be called using https.
Setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt; to 0 tells the browser that you no longer wish your domain to be HSTS-enabled.&lt;/p&gt;

&lt;h3 id=&quot;hsts-preload&quot;&gt;HSTS preload&lt;/h3&gt;
&lt;p&gt;Of course in this scenario, the user’s first connection will still take place over an unsecured connection.
This would offer an attacker a brief period in which he can still hijack the connection.
To prevent this, most major browsers (Chrome, Firefox, Safari, Edge, IE11 and Opera) offer an HSTS preload list.
Domains on this list will automatically be loaded over HTTPS from the start, without having to go through the HTTP -&amp;gt; HTTPS redirect.
If you want your domain to be included in this list, you should add the &lt;code class=&quot;highlighter-rouge&quot;&gt;preload&lt;/code&gt; directive to the HSTS header.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Afterwards, you can register yourself for the &lt;a href=&quot;https://hstspreload.org/&quot; target=&quot;_blank&quot;&gt;HSTS Preload List&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;are-there-any-risks&quot;&gt;Are there any risks?&lt;/h3&gt;
&lt;p&gt;Activating HSTS does offer some risks:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you include the &lt;code class=&quot;highlighter-rouge&quot;&gt;includesubdomains&lt;/code&gt; directive, you tell the browser that &lt;em&gt;all&lt;/em&gt; subdomains need to be retrieved over HTTPS.
If your internal applications are on a subdomain (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;internal.example.com&lt;/code&gt;), you’ll block access to those that haven’t enabled TLS yet.&lt;/li&gt;
  &lt;li&gt;Adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;preload&lt;/code&gt; directive is even more dangerous because this tells browser makers to hardcode your HSTS settings.
If you’ve made a mistake in the setup, it can take a long time to be removed from the list. 
Since this list is &lt;em&gt;in&lt;/em&gt; the browser, you’ll affect both your existing and your new users.
These risks can be mitigated through extensive testing and conservative settings. 
Start with a short &lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt; and slowly increase its length, don’t include subdomains if you’re not 100% sure that &lt;em&gt;all&lt;/em&gt; subdomains need to be included
and perhaps most importantly, &lt;strong&gt;don’t&lt;/strong&gt; activate preload unless you’re 100% sure that everything works as intended.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;should-i-activate-hsts&quot;&gt;Should I activate HSTS?&lt;/h3&gt;
&lt;p&gt;For those (subdomains) where TLS is enabled, you should start rolling out HSTS (while keeping in mind the warnings above).&lt;/p&gt;

&lt;h2 id=&quot;public-key-pinning&quot;&gt;Public key pinning&lt;/h2&gt;
&lt;p&gt;Alright, now you’ve secured your site with HTTPS, and you’ve made sure your users can’t fall victim to a Man in the Middle attack.
Or have you?
It’s true that HSTS will make sure that the user only connects using a secured connection, but that doesn’t mean the HTTPS connection is actually made to &lt;strong&gt;your&lt;/strong&gt; server.
Over the last couple of years, there were several incidents where malicious actors were able to generate valid certificates for domains they didn’t control.
When this happens, your users will think they’re safe (as their browser shows the green padlock), but the attacker can still manipulate your content.
To protect yourself against this, there’s a mechanism called “HTTP Public Key Pinning” (HPKP [&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;]).
With HPKP you “pin” the public key of your TLS certificate to the browser.
In the future, that browser will compare the public key that’s actually used for the TLS connection, with the pinned one and, if they don’t match, refuse the connection altogether.
&lt;img src=&quot;/img/2017-security-features/hpkp-error.png&quot; alt=&quot;HPPK error&quot; class=&quot;image&quot; height=&quot;245px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An HPKP header looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public-key-pins:pin-sha256=&quot;YLh1...uihg=&quot;;pin-sha256=&quot;9dNi...Dwg=&quot;;pin-sha256=&quot;Vjs...eWys=&quot;;max-age=2592000;includeSubdomains;report-uri=&quot;report-uri&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt; directive tells the browser for how long these pins are valid. 
You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt; to get a report when an invalid certificate is used.
&lt;code class=&quot;highlighter-rouge&quot;&gt;includesubdomains&lt;/code&gt; makes sure that the policy also applies to your subdomains.
Finally, there are the actual pins.
You need to pin at least 2 fingerprints: 1 that should be active at the moment and 1 that isn’t.&lt;/p&gt;

&lt;h3 id=&quot;what-to-pin&quot;&gt;What to pin?&lt;/h3&gt;
&lt;p&gt;First of all, you need to pin at least one of the keys in your certificate chain.
While you can pin the key of the actual certificate, that might not be the best idea.
Doing this means that you need to update the keys every time your certificate is changed or you will risk your users being unable to visit your site.
Alternatively, you could pin the key for the root certificate of your CA (Certificate Authority).
While this is a lot safer, it does mean that if your CA, or any of its intermediates is compromised, they could issue valid certificates for your site.
Finally, you have the option to pin the key to the intermediate certificate. 
Doing so limits the attack surface to that intermediate, while it also allows you to roll out new certificates whenever you need to.
Of course you can’t control when your CA will change their intermediate certificate, so that’s a danger in its own.&lt;/p&gt;

&lt;p&gt;Besides that you also need to have a second key pinned that’s &lt;em&gt;not&lt;/em&gt; in your current certificate chain, otherwise your HPKP header will be ignored.
Fortunately, you don’t have to have certificates ready for this.
It’s enough to pin the public key of a CSR (Certificate Signing Request).
Obviously, you can’t use the CSR of your current certificate (as that would be valid for this chain), so you’ll need to create a backup CSR.
You’ll need to keep this CSR and the associated private key in a secure location, because you don’t want these to be compromised together with the original.&lt;/p&gt;

&lt;h3 id=&quot;report-uri&quot;&gt;report-uri&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt; directive is used to tell the browser where to send reports if it encounters an invalid certificate.
The browser will POST a JSON message to the URL you specify here.
If you don’t want to implement your own processing of these reports, have a look at &lt;a href=&quot;https://report-uri.io/&quot; target=&quot;_blank&quot;&gt;report-uri.io&lt;/a&gt;
It will process the reports from your site and display the results in a nice format, allowing you to take action when you see something that’s wrong.&lt;/p&gt;

&lt;h3 id=&quot;report-only&quot;&gt;Report-only&lt;/h3&gt;
&lt;p&gt;Besides the normal HPKP header, there’s also the report-only variant: &lt;code class=&quot;highlighter-rouge&quot;&gt;Public-Key-Pins-Report-Only&lt;/code&gt;.
This header has the exact same specifications, &lt;strong&gt;but&lt;/strong&gt; it won’t block access to your site if there’s no valid pin.
As the name says, it will simply report violations to the &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt;.
Obviously, this header isn’t meant to increase the security of your site on its own, rather it’s a way to help you on your way to a full HPKP implementation.&lt;/p&gt;

&lt;h3 id=&quot;dangers&quot;&gt;Dangers&lt;/h3&gt;
&lt;p&gt;HPKP is quite a dangerous header: it’s quite easy to commit “pinning-suicide”.
Pin the wrong certificate, have a CA change keys on you or have something else go wrong and your site is inaccessible until your users’ &lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt; expires.
Be careful rolling out this one as it’s way too easy to shoot yourself in the foot.&lt;/p&gt;

&lt;h3 id=&quot;should-i-use-it&quot;&gt;Should I use it?&lt;/h3&gt;
&lt;p&gt;This header has some serious dangers associated with it.
It’s not enough to know that the current configuration is correct, you also need to be sure that you’re equipped to deal with certificate updates without breaking the site.
And then you need to be sure that you’ve got a backup in place in case you ever want to switch CAs.
Unless you’re 100% sure that this won’t be an issue, hold off for now as it’s too easy to DoS your own site.&lt;/p&gt;

&lt;h2 id=&quot;content-security-policy&quot;&gt;Content Security Policy&lt;/h2&gt;
&lt;p&gt;Even though your connection is secured with TLS, that doesn’t mean that the content can’t be tampered with in other ways (such as cross-site scripting (XSS)).
An attacker could use these kinds of attacks to load malicious content.
The Content Security Policy (CSP) header is designed to prevent this kind of attacks.
It allows you to specify exactly what content your site is allowed to load through a load of directives.&lt;/p&gt;

&lt;h3 id=&quot;fetch-directives&quot;&gt;Fetch directives&lt;/h3&gt;
&lt;p&gt;First of all, you can define what source content can be fetched from. 
There’s a specific directive for each resource type and a fallback directive &lt;code class=&quot;highlighter-rouge&quot;&gt;default-src&lt;/code&gt;.
You define the sources where the content can be loaded from as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; only load content from the same origin as the page&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;none&lt;/code&gt; don’t load any content of this type&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe-inline&lt;/code&gt; lets you use inline javascript and CSS (although it’s preferable to use a nonce)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe-eval&lt;/code&gt; allows the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout(String)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval(String)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;new Function(String)&lt;/code&gt;.
 There’s a reason it has “unsafe” in its name though: these functions are typically used as attack vectors for XSS.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https:&lt;/code&gt; allow content loaded from anywhere, as long as it’s served over HTTPS&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;example.com&lt;/code&gt; allow content loaded from anywhere on &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com&lt;/code&gt;, both HTTP and HTTPS&lt;/li&gt;
  &lt;li&gt;You can also use wildcards to control which origins are allowed. 
 E.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;*://*.example.com:*&lt;/code&gt; will allow resources to be loaded from all &lt;em&gt;subdomains&lt;/em&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com&lt;/code&gt;, using any scheme and port.
 Note that it won’t allow you to load resources from &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com&lt;/code&gt; itself.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nonce-...&lt;/code&gt; Allows you to specify a &lt;a href=&quot;#nonce&quot;&gt;nonce&lt;/a&gt;. Scripts or styles that have this nonce are then allowed to execute.
It’s also important to note that you can pass multiple values to these directives: &lt;code class=&quot;highlighter-rouge&quot;&gt;self https://example.com&lt;/code&gt; will allow resources to be loaded both from the domain itself as well as from &lt;code class=&quot;highlighter-rouge&quot;&gt;https://example.com&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use these to define &lt;code class=&quot;highlighter-rouge&quot;&gt;default-src&lt;/code&gt;, but CSP gives you more fine-grained control over where each type of resource can be loaded from.
For that you need to use the following properties instead:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;script-src&lt;/code&gt; - Javascript&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;style-src&lt;/code&gt; - CSS&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;img-src&lt;/code&gt; - images&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;font-src&lt;/code&gt; - fonts&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;object-src&lt;/code&gt; - objects (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;object&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;embed&amp;gt;&lt;/code&gt;, …)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;media-src&lt;/code&gt; - media such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;connect-src&lt;/code&gt; - where the page can connect to using &lt;code class=&quot;highlighter-rouge&quot;&gt;XmlHttpRequest&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;WebSocket&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;EventSource&lt;/code&gt;.
 The browser will immediately return a 400 status code when your page attempts to connect to a non-valid domain.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;frame-src&lt;/code&gt; - Specify which locations can be embedded in a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;frame&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;worker-src&lt;/code&gt; - Worker scripts&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;child-src&lt;/code&gt; - Is either deprecated or serves as fallback for &lt;code class=&quot;highlighter-rouge&quot;&gt;frame-src&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;worker-src&lt;/code&gt;, depending on the browser and the CSP level implemented.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;manifest-src&lt;/code&gt; - defines which &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Manifest&quot; target=&quot;_blank&quot;&gt;manifest&lt;/a&gt; can be applied to the resource. (This is still experimental though).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;navigation-directives&quot;&gt;Navigation directives&lt;/h3&gt;
&lt;p&gt;These directives tell the browser what kind of navigation is allowed:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;form-action&lt;/code&gt; limits to where forms can be submitted&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;frame-ancestors&lt;/code&gt; specifies who may embed pages using elements such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;frame&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;embed&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;object&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;applet&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-directives&quot;&gt;Other directives&lt;/h3&gt;
&lt;p&gt;Besides these, CSP allows for quite a few other directives:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt; works the same way as the &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt; directive of HPKP&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;require-sri-for&lt;/code&gt; allows you to force the use or Subresource Integrity ((SRI)[#Subresource-integrity]) for stylesheets, scripts or both. 
 Allowed values are &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; (or both).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;base-uri&lt;/code&gt; defines which URLs you can use in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;base&amp;gt;&lt;/code&gt; element&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sandbox&lt;/code&gt; to enable a sandbox for requested resources 
 (have a look at &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/sandbox&quot; target=&quot;_blank&quot;&gt;Mozilla’s documentation&lt;/a&gt; for more information)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nonce&quot;&gt;Nonce&lt;/h3&gt;
&lt;p&gt;A nonce, pronounced “/nɒns/” (nance), is a term that means “number (used) once”.
It allows you to load specific inline scripts without allowing all of them. 
Only those scripts that have a nonce attribute that matches the value specified in the CSP header will get executed.
Keep in mind though that you should &lt;strong&gt;never&lt;/strong&gt; hardcode the nonce or use a value that can be guessed.
It’s best to generate a new nonce for each request and add it to those scripts you need to execute.
E.g. if you have the following CSP setting:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Security-Policy: script-src 'nonce-randomValue'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;will only execute scripts that have the nonce attribute defined like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nonce=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;randomValue&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... script contents&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;multiple-policies&quot;&gt;Multiple policies&lt;/h3&gt;
&lt;p&gt;You are allowed to specify multiple CSP policies simply by specifying the header multiple times.
If you do this however, it’s important to keep in mind that subsequent CSPs are not allowed to loosen the rules, only to tighten them.&lt;/p&gt;

&lt;h3 id=&quot;report-only-1&quot;&gt;Report-only&lt;/h3&gt;
&lt;p&gt;As with HPKP, CSP also supports a report-only variant with &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy-Report-Only&lt;/code&gt;.
Once again the specifications are exactly the same but it won’t block loading or execution of disallowed resources and simply report violations.
You can then use the reports it generates to decide what you need to allow in your actual CSP header, before you deploy it (and break your site).&lt;/p&gt;

&lt;h3 id=&quot;should-i-use-it-1&quot;&gt;Should I use it?&lt;/h3&gt;
&lt;p&gt;CSP has some risks: it can break your site’s functionality, but overall it’s relatively easy to test it. 
The &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt; directive allows you to monitor if there are any issues and you can use the report-only version of the header to easily validate the setup you’re planning in the wild.
If you have a system that relies a lot on third party content, it might not be for you.
For everyone else, try out the report-only header and see if you get any issues.&lt;/p&gt;

&lt;h2 id=&quot;subresource-integrity&quot;&gt;Subresource integrity&lt;/h2&gt;
&lt;p&gt;When you’re developing a web application, you’ll often depend on some JavaScript frameworks such as Angular or jQuery.
Loading these files from a CDN can speed up load times from your application, since it’s quite likely that the user already has a cached version of the script available.
Of course it’s a good idea to be careful about the content of these scripts.
Whenever you’re loading resources that aren’t under your control, you’re depending on someone else to make sure that they aren’t tampered with.
To make sure that they aren’t changed without your knowledge, you can use subresource integrity (SRI).
With SRI, you add an &lt;code class=&quot;highlighter-rouge&quot;&gt;integrity&lt;/code&gt; attribute to your &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag.
This attribute contains the hash of the file you expect.
Your browser will then download the file, hash it with the same algorithm and compare the results.
If the hash matches, the resource will be used; otherwise it will be ignored and an error will be shown in the console.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js&quot;&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;integrity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=&quot;&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see in the example above, the integrity of the script will be checked using a ‘SHA256’ hash. 
You’ll also notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;crossorigin&lt;/code&gt; attribute: this attribute is required when loading SRI validated resources from a different origin.
Possible values are &lt;code class=&quot;highlighter-rouge&quot;&gt;use-credentials&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;anonymous&lt;/code&gt;, indicating whether a request will have the credentials flag set.
If you’re using a CDN, you’ll probably want to use &lt;code class=&quot;highlighter-rouge&quot;&gt;anonymous&lt;/code&gt;.
Note that you only need to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;crossorigin&lt;/code&gt; attribute if you’re loading the resource from a different origin.
For resources coming from the same origin, you can omit the &lt;code class=&quot;highlighter-rouge&quot;&gt;crossorigin&lt;/code&gt; attribute.&lt;/p&gt;

&lt;h3 id=&quot;calculating-the-sri-value&quot;&gt;Calculating the SRI value.&lt;/h3&gt;
&lt;p&gt;In order to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;integrity&lt;/code&gt; attribute, you need to know the correct hash of the file. 
The easiest way to calculate it is by simply specifying a random value and checking the resulting error in your browser.
&lt;img src=&quot;/img/2017-security-features/integrity-error.png&quot; alt=&quot;Chrome SRI error&quot; class=&quot;image&quot; height=&quot;50px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;should-i-use-it-2&quot;&gt;Should I use it?&lt;/h3&gt;
&lt;p&gt;Most likely. 
If you’re depending on third party scripts, you should make sure that they aren’t changed without your knowledge.
This does mean that you shouldn’t just include the latest version of a script (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com/library/latest/&lt;/code&gt;) as that will change whenever a new version is released.&lt;/p&gt;

&lt;h2 id=&quot;cookie-protection&quot;&gt;Cookie protection&lt;/h2&gt;
&lt;p&gt;Most websites nowadays use a variety of cookies for different purposes.
These too can be a source of problems: session cookies grant the user access to certain content or allow them to perform certain actions.
If this cookie can be intercepted or altered, the consequences can be enormous.
Because of this, it’s a good idea to protect your cookies as much as possible.
Since you’re already running your site on HTTPS, it’s a good idea to make sure the cookies aren’t sent on insecure requests.
You can easily do this by adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;secure&lt;/code&gt; flag to the cookies you send.&lt;/p&gt;

&lt;p&gt;To make the cookies even more secure, you’ll also need to prevent them from being read/modified by scripts running in the page.
In most cases there’s no reason for a script to have access to these cookies, so you can simply mark them as &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpOnly&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;should-i-use-this&quot;&gt;Should I use this?&lt;/h3&gt;
&lt;p&gt;Yes.
Your session cookies should not be available to scripts, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpOnly&lt;/code&gt; flag should be set on those.
If you’re using TLS (and you should) you should definitely set the &lt;code class=&quot;highlighter-rouge&quot;&gt;secure&lt;/code&gt; flag as well.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Browsers nowadays support a wide array of security features you can use to keep your users safe.
But, as with all things, powerful tools require you to wield them carefully.
If you apply them without proper thought, you can easily make your website inaccessible or render it unusable.
Because of that, you need to be really careful when you implement (most of) these measures.
Do proper testing and (where possible) use the Report-Only variant for a while to spot possible issues before they become real problems.
Make sure you really understand what you’re doing and what the consequences are of getting things wrong.
When you have all that, don’t be afraid to experiment, just make sure you do so safely.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;fn1&quot;&gt;&lt;/a&gt;[1] &lt;a href=&quot;http://ordina-jworks.github.io/spring/2016/03/05/HTTP-Public-Key-Pinning-with-Spring-Security.html&quot;&gt;Public Key Pinning with Spring Security&lt;/a&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;De Grande&quot;, &quot;twitter&quot;=&gt;&quot;TimDG&quot;, &quot;linkedin&quot;=&gt;&quot;timdegrande&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-de-grande/&quot;, &quot;avatar&quot;=&gt;&quot;tim-de-grande.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Aplication Security&quot;, &quot;email&quot;=&gt;&quot;tim.degrande@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a principal Java Consultant at Ordina who is interested in security, cryptography and privacy. As Compentence Leader Application Security, he keeps his colleagues up to date on the latest security news and works to broaden their understanding by giving workshops and classes.&quot;}</name><email>tim.degrande@ordina.be</email></author><category term="Security" /><category term="Security" /><category term="Browser features" /><category term="Response headers" /><summary type="html">Browser security features Browsers nowadays come with a ton of security features built-in. These features are there to protect the people using your application as well as protecting your application from malicious others. Most of these features are quite easy to implement, however for some of them (such as key-pinning) you have to be careful not to break your site. It’s this danger, combined with the lack of knowledge, that prevents people from taking full advantage of them.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/security/padlock_code.jpg" /></entry><entry><title type="html">Monitoring your microservices with Micrometer.io</title><link href="https://ordina-jworks.github.io/microservices/2017/09/17/monitoring-your-microservices-with-micrometer.html" rel="alternate" type="text/html" title="Monitoring your microservices with Micrometer.io" /><published>2017-09-17T00:00:00+00:00</published><updated>2017-09-17T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/microservices/2017/09/17/monitoring-your-microservices-with-micrometer</id><content type="html" xml:base="https://ordina-jworks.github.io/microservices/2017/09/17/monitoring-your-microservices-with-micrometer.html">&lt;p&gt;When we want to instrument our application, we don’t want to worry about which monitoring system we want to use, now or in the future.
Nor do we want to change a lot of code throughout our microservice because we need to change from system X to system Y.&lt;/p&gt;

&lt;h2 id=&quot;meet-micrometer&quot;&gt;Meet Micrometer!&lt;/h2&gt;

&lt;p&gt;So what is Micrometer you ask?&lt;/p&gt;

&lt;p&gt;Basically, it comes down to this:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Think SLF4J, but for metrics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://micrometer.io&quot; target=&quot;_blank&quot;&gt;Micrometer&lt;/a&gt; provides a simple facade over the instrumentation clients for the most popular monitoring systems.
It allows you to instrument your code with &lt;strong&gt;dimensional metrics with a vendor-neutral interface&lt;/strong&gt; and decide on the monitoring system as a last step.
Using this interface, we can support multiple monitoring systems and switch easily to an other system with little to no hassle.
It already contains built-in support for &lt;a href=&quot;https://prometheus.io&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Prometheus&lt;/strong&gt;&lt;/a&gt;, Netflix &lt;a href=&quot;https://github.com/Netflix/atlas&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Atlas&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&quot;https://www.datadoghq.com&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Datadog&lt;/strong&gt;&lt;/a&gt;, while &lt;a href=&quot;https://www.influxdata.com&quot; target=&quot;_blank&quot;&gt;InfluxDB&lt;/a&gt;, &lt;a href=&quot;https://github.com/etsy/statsd&quot; target=&quot;_blank&quot;&gt;statsd&lt;/a&gt;, and &lt;a href=&quot;https://graphiteapp.org&quot; target=&quot;_blank&quot;&gt;Graphite&lt;/a&gt; are on their way!&lt;/p&gt;

&lt;h2 id=&quot;using-micrometer-in-your-application&quot;&gt;Using Micrometer in your application&lt;/h2&gt;

&lt;p&gt;Starting with Spring Boot 2, more specifically since milestone &lt;a href=&quot;https://spring.io/blog/2017/09/15/spring-boot-2-0-0-m4-available-now&quot; target=&quot;_blank&quot;&gt;M4&lt;/a&gt;, Micrometer becomes the defacto instrumentation library that will be powering the delivery of application metrics from Spring.
Luckily for us, they also backported this functionality to Spring Boot 1.x through an additional library dependency!
Just add the &lt;code class=&quot;highlighter-rouge&quot;&gt;micrometer-spring-legacy&lt;/code&gt; module together with the additional monitoring system module, and you’re good to go!&lt;/p&gt;

&lt;p&gt;In Gradle:&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'io.micrometer:micrometer-spring-legacy:latest.release'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or in Maven:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-maven&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;io.micrometer&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;micrometer-spring-legacy&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;${micrometer.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;creating-metrics&quot;&gt;Creating metrics&lt;/h2&gt;

&lt;p&gt;There are a couple of ways to create meters.
We will cover all different types, when to use them, and furthermore how to implement them.&lt;/p&gt;

&lt;h3 id=&quot;dimensionstags&quot;&gt;Dimensions/Tags&lt;/h3&gt;

&lt;p&gt;A meter is uniquely identified by its name and dimensions (also called tags).
Dimensions are a way of adding dimensions to metrics, so they can be sliced, diced, aggregated and compared.
For example, we have a meter named &lt;code class=&quot;highlighter-rouge&quot;&gt;http.requests&lt;/code&gt; with a tag &lt;code class=&quot;highlighter-rouge&quot;&gt;uri&lt;/code&gt;.
With this meter we could see the overall amount of HTTP requests, but also have the option to drill down and see the amount of HTTP requests for a specific URI.&lt;/p&gt;

&lt;h3 id=&quot;counters&quot;&gt;Counters&lt;/h3&gt;

&lt;p&gt;Counters are a cumulative metric that represents a single numerical value that only ever goes up.
They are typically used to count requests served, tasks completed, errors occurred, etc.
Counters should &lt;strong&gt;not&lt;/strong&gt; be used to expose current counts of items whose number can also go down, gauges are a better fit for this use case.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;4u -4u 6u(small) -3u(small) 8u(xsmall) -2u(xsmall)&quot;&gt;
    &lt;img class=&quot;image fit&quot; alt=&quot;Counter showing how many errors have occurred&quot; src=&quot;/img/2017-09-17-monitoring-your-microservices-with-micrometer/counter.png&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MeterRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;received.messages&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;gauges&quot;&gt;Gauges&lt;/h3&gt;

&lt;p&gt;A gauge is a metric that represents a single numerical value that can arbitrarily go up and down.
Gauges are typically used for measured values like current memory usage, but also “counts” that can go up and down, like the number of messages in a queue.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;6u -3u 8u(small) -2u(small) 12u(xsmall)&quot;&gt;
    &lt;img class=&quot;image fit&quot; alt=&quot;Gauge showing how many messages still need to be processed&quot; src=&quot;/img/2017-09-17-monitoring-your-microservices-with-micrometer/gauge.png&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MeterRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;AtomicInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentHttpRequests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gauge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;current.http.requests&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receivedMessages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gauge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unprocessed.messages&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConcurrentLinkedQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ConcurrentLinkedQueue:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead of returning a gauge, the &lt;code class=&quot;highlighter-rouge&quot;&gt;gauge&lt;/code&gt; method will rather return the thing that is being observed.
This allows us to have quick one liners that both create the object to be observed and set up metrics around it.&lt;/p&gt;

&lt;h3 id=&quot;timers&quot;&gt;Timers&lt;/h3&gt;

&lt;p&gt;Timers measure both the rate that a particular piece of code is called and the distribution of its duration.
They do not record the duration until the task is complete.
These are useful for measuring short-duration latencies and the frequency of such events.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2017-09-17-monitoring-your-microservices-with-micrometer/timer.png&quot; alt=&quot;Timer showing how long it takes to process messages&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nanoTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;MeterRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
&lt;span class=&quot;c1&quot;&gt;// this will record how long it took us to get a registry and create a new timer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nanoTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NANOSECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or we could just annotate a method with &lt;code class=&quot;highlighter-rouge&quot;&gt;@Timed&lt;/code&gt; and let Micrometer do the rest for us&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Timed&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomethingWhichShouldBeFastButIsActuallyReallySlow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;long-task-timers&quot;&gt;Long task timers&lt;/h3&gt;

&lt;p&gt;The long task timer is a special type of timer that lets you measure time while an event being measured is &lt;strong&gt;still running&lt;/strong&gt;.
To time a long running task we use the same &lt;code class=&quot;highlighter-rouge&quot;&gt;@Timed&lt;/code&gt; annotation, but we set the property &lt;code class=&quot;highlighter-rouge&quot;&gt;longTask&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Timed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;longTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Scheduled&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomethingWhichCanTakeALoooooongTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is up to the application framework to make something happen with &lt;code class=&quot;highlighter-rouge&quot;&gt;@Timed&lt;/code&gt;.
In case it isn’t able to do that, you can still use the long task timer.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MeterRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;LongTaskTimer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looooongTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;more&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;longTaskTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sync&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomethingWhichCanTakeALoooooongTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;looooongTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// actually do some synchronization which takes a loooooong time&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;distribution-summaries&quot;&gt;Distribution summaries&lt;/h3&gt;

&lt;p&gt;A distribution summary is used to track the distribution of events.
It is similar to a timer but more general in that the size does not have to be a period of time.
Usually it is used to sample observations of things like response sizes.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MeterRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DistributionSummary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;response.size&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;summary-statistics&quot;&gt;Summary statistics&lt;/h2&gt;

&lt;p&gt;Micrometer provides quantile statistics computed at &lt;strong&gt;instrumentation time&lt;/strong&gt; and histograms for use in calculating quantile statistics at &lt;strong&gt;query time&lt;/strong&gt; for monitoring systems that support this.&lt;/p&gt;

&lt;h3 id=&quot;quantiles&quot;&gt;Quantiles&lt;/h3&gt;

&lt;p&gt;Quantiles are cutpoints dividing the range of a probability distribution into contiguous intervals with equal probabilities, or dividing the observations in a sample in the same way.
Timers and distribution summaries can be enriched with quantiles computed in your app prior to shipping to a monitoring backend.
Depending on the size of your deployments, computing quantiles at instrumentation time may or may not be useful.
It is &lt;strong&gt;not possible&lt;/strong&gt; to aggregate quantiles across a cluster.&lt;/p&gt;

&lt;p&gt;Four quantile algorithms are provided out of the box with different tradeoffs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WindowSketchQuantiles&lt;/code&gt; - The importance of an observation is decayed as it ages.
This is the most computationally costly algorithm.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Frugal2UQuantiles&lt;/code&gt; - Successive approximation algorithm that converges towards the true quantile with enough observations.
This is the least costly algorithm, but exhibits a higher error ratio in early observations.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CKMSQuantiles&lt;/code&gt; - Lets you trade computational complexity for error ratio on a per-quantile basis.
Often, it is desirable for higher quantiles to have a lower error ratio (e.g. 0.99 at 1% error vs. 0.5 at 5% error).
This algorithm is still more computationally expensive than Frugal.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GKQuantiles&lt;/code&gt; - Lets you trade computational complexity for error ratio across all quantiles.
This is used inside of WindowSketchQuantiles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;histograms&quot;&gt;Histograms&lt;/h3&gt;

&lt;p&gt;A histogram measures the statistical distribution of values in a stream of data.
It samples observations, like HTTP request durations or database transaction durations, and counts them in buckets.
They can be used to compute quantiles or other summary statistics like min, max, average or median.
Because histograms buckets are exposed as individual counters to the monitoring backend, it is possible to aggregate observations across a distributed system and compute summary statistics like quantiles for an entire cluster.
Naturally, the error rate of the computed summary statistic will be higher because of the lossy nature of putting data in buckets.&lt;/p&gt;

&lt;h2 id=&quot;binders&quot;&gt;Binders&lt;/h2&gt;

&lt;p&gt;Binders define a collection of meters and are used to encapsulate best practices for monitoring certain types of objects or a part of the application’s environment.
For example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;JvmThreadMetrics&lt;/code&gt; binder which gauges thread peak, number of daemon threads, and live threads.&lt;/p&gt;

&lt;p&gt;Micrometer ships with a basic set of binders:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;JVM and system monitoring&lt;/li&gt;
  &lt;li&gt;Cache monitoring&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Executor&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ExecutorService&lt;/code&gt; monitoring&lt;/li&gt;
  &lt;li&gt;Logback monitoring&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;Ysewyn&quot;, &quot;avatar&quot;=&gt;&quot;tim-ysewyn.png&quot;, &quot;twitter&quot;=&gt;&quot;TYsewyn&quot;, &quot;linkedin&quot;=&gt;&quot;tysewyn&quot;, &quot;github&quot;=&gt;&quot;TYsewyn&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-ysewyn/&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader API &amp; Microservices&quot;, &quot;email&quot;=&gt;&quot;Tim.Ysewyn@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a Principal Consultant at Ordina, where he helps fellow developers discovering top-notch technologies and methodologies as a Competence Leader for API &amp; Microservices. You can also find him working on various parts of the &lt;a href=\&quot;https://www.spring.io\&quot; target=\&quot;_blank\&quot;&gt;Spring&lt;/a&gt; framework or helping out at &lt;a href=\&quot;https://ng-be.org\&quot; target=\&quot;_blank\&quot;&gt;NG-BE&lt;/a&gt;. When you can\\'t get a hold of him, he will probably be under water since he is also an underwater photographer &amp; rescue diver.&quot;}</name><email>Tim.Ysewyn@ordina.be</email></author><category term="Microservices" /><category term="microservices" /><category term="monitoring" /><summary type="html">When we want to instrument our application, we don’t want to worry about which monitoring system we want to use, now or in the future. Nor do we want to change a lot of code throughout our microservice because we need to change from system X to system Y.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2017-09-17-monitoring-your-microservices-with-micrometer/post-image.jpg" /></entry><entry><title type="html">Devoxx Poland 2017</title><link href="https://ordina-jworks.github.io/conference/2017/06/21/Devoxx-pl.html" rel="alternate" type="text/html" title="Devoxx Poland 2017" /><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2017/06/21/Devoxx-pl</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2017/06/21/Devoxx-pl.html">&lt;h1 id=&quot;devoxx-poland-2017&quot;&gt;Devoxx Poland 2017&lt;/h1&gt;

&lt;p&gt;Krakow in the ICE Krakow Congress Centre.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2017-devoxx-pl/venue-1.jpg&quot; alt=&quot;ICE Krakow Congress Centre&quot; class=&quot;image&quot; height=&quot;420px&quot; /&gt;
&lt;img src=&quot;/img/2017-devoxx-pl/venue-2.jpg&quot; alt=&quot;ICE Krakow Congress Centre foyer&quot; class=&quot;image&quot; height=&quot;420px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We started off day 1 with the keynote in the absolutely, phenomenal main room:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2017-devoxx-pl/room-1.jpg&quot; alt=&quot;Main room 1&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#keynote-speed-without-discipline-a-recipe-for-disaster-venkat-subramaniam&quot;&gt;Keynote: Speed without Discipline: a Recipe for Disaster&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#feature-branches-and-toggles-in-a-post-github-world-sam-newman&quot;&gt;Feature Branches And Toggles In A Post-GitHub World&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-reasonable-overview-of-java-9-and-how-you-could-think-of-it-oleg-šelajev---slides&quot;&gt;A reasonable overview of Java 9 and how you could think of it&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-language-of-actors-vaughn-vernon---slides&quot;&gt;The Language of Actors&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;keynote-speed-without-discipline-a-recipe-for-disaster-venkat-subramaniam&quot;&gt;Keynote: Speed without Discipline: a Recipe for Disaster (&lt;a href=&quot;https://twitter.com/@venkat_s&quot;&gt;Venkat Subramaniam&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;Venkat kicked off the keynote, talking about a paradigm shift, that is happening right now in software development:
In the nineties, everybody was doing &lt;strong&gt;imperative programming&lt;/strong&gt;, using objects to implement functionality.
Nowadays, this style of software development is shifting towards a more &lt;strong&gt;declarative approach&lt;/strong&gt;.
In imperative programming, developers focus on both &lt;strong&gt;what&lt;/strong&gt; they want to do and &lt;strong&gt;how&lt;/strong&gt; they want to do it. 
In declarative programming on the other hand, developers focus on &lt;strong&gt;what&lt;/strong&gt; they want to do and use tools and libraries to facilitate their goal.
Venkat went on to state that programming in a functional style is declarative, but that not all declarative code is functional.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Functional style = declarative style + higher order functions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Dieter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Andreas&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ken&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Yannick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;declarative-vs-imperative&quot;&gt;Declarative vs Imperative&lt;/h3&gt;

&lt;p&gt;Venkat told the audience that he doesn’t like driving cars.
He compared driving a stick shift to imperative programming.
His goal is going from point A to point B and he does not want to be involved in changing the gears &lt;em&gt;(Manipulating the DOM)&lt;/em&gt;.
A car with an automatic drive train, is a step in the right direction, but still requires too much focus on how he wants to reach his destination &lt;em&gt;(Using a library like JQuery)&lt;/em&gt;.
Using the auto pilot functionality in certain modern cars is another step in the correct direction, but what he really wants is a car with a dedicated driver, like Uber or Lyft offer &lt;em&gt;(Abstracting the DOM and using frameworks like Angular)&lt;/em&gt;.
In this comparison the ride-sharing service is the declarative approach.&lt;/p&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;I automate my tests, not because I have a lot of time, but because I don’t.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After an introduction to declarative programming, Venkat switched to the topic of testing.
To really be agile, we need to be confident that implementing new features won’t cause failure.
We can achieve this confidence by automating our tests and making sure they are repeatable.
If we are really confident, we might even be able to ship software, without running the application.&lt;/p&gt;

&lt;p&gt;Writing software without writing tests is described as JDD: Jesus Driven Development. 
Pray that it works.
Obviously, TDD (Test Driven Development) makes a lot more sense.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;nl&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Software development: a profession where people get paid to write poor quality code and get paid more later to cleanup the mess.&lt;/p&gt;&amp;mdash; Venkat Subramaniam (@venkat_s) &lt;a href=&quot;https://twitter.com/venkat_s/status/648119106072387584&quot;&gt;27 september 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;testing-vs-verification&quot;&gt;Testing vs verification&lt;/h3&gt;

&lt;p&gt;Testing and verification are two different things.
Verification is the process that checks if the code (still) works.
This is not something anyone should do manually, verification is exactly what should be automated.
Testing is the process that checks if a feature is correctly implemented.
Code represents what you have typed, not what you might have wanted the system to do.
It is the act of gaining insight in the application and the business.
This could well be a manual task.
Unfortunately, most of our industry has neglected this important difference.&lt;/p&gt;

&lt;p&gt;The maturity of software verification can be categorized in three maturity stages. 
Projects without verification automation are in denial, they are building up an increasing technical debt.
The second stage describes projects that have some automated verification on the UI level. 
Venkat describes tools using WebDriver for UI level verification as a pathway to hell automation.
This test method can be represented in the ice-cream cone anti-pattern. 
For projects with the right level of automation, the pyramid pattern is a good representation.
The last maturity stage contains these projects with the right measure of automated verification.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2017-devoxx-pl/testing-ice-cream-cone.png&quot; alt=&quot;Testing ice-cream cone&quot; class=&quot;image&quot; width=&quot;49%&quot; /&gt;
&lt;img src=&quot;/img/2017-devoxx-pl/testing-pyramid.png&quot; alt=&quot;Testing pyramic&quot; class=&quot;image&quot; width=&quot;49%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;discipline&quot;&gt;Discipline&lt;/h3&gt;
&lt;p&gt;Venkat drew a comparison with 1820, where patients died regularly within three weeks after being operating.
Doctors (Joseph Lister, Louis Pasteur) started cleaning their tools after surgery and noticed a positive trend in survival.&lt;/p&gt;

&lt;p&gt;Analogous to the doctors back then, we need to discipline ourselves in software engineering.
This discipline is needed to keep up to speed and to stay agile, so that teams can react rapidly to customer requests. 
To build up this discipline, automated verification can be seen as the software equivalent of exercising.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We’re practicing a beautiful craft, let’s go turn it into a wonderful profession. Focusing on quality and creative things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;feature-branches-and-toggles-in-a-post-github-world-sam-newman&quot;&gt;Feature Branches And Toggles In A Post-GitHub World (&lt;a href=&quot;https://twitter.com/@samnewman&quot;&gt;Sam Newman&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;Sam told us about his experience at a project where the team was having trouble merging branches.
The release branch for the next release was called R3, but for a large refactoring, branch R4 was created.
Afterwards, he described merging the branches as a car crash.
They even needed to introduce a dedicated R3-R4 merge bug fix team.
Later on, they set up &lt;strong&gt;Continuous Integration&lt;/strong&gt; in order to prevent the merging issues.
The code, pushed by the developers, would get automatically validated by the CI setup.
The problem with the R3-R4 release was that validation was done only for a branch and not on the integrated branches.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The integration should be validated every day and when the build breaks, fix it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For unfinished work, we can wait until it is ready before checking in.
This exposes us to the risk of losing work when it’s only on the developer’s computer.&lt;/p&gt;

&lt;h3 id=&quot;feature-branch&quot;&gt;Feature Branch&lt;/h3&gt;

&lt;p&gt;An alternative would be to create a &lt;strong&gt;feature branch&lt;/strong&gt;, which brings us back to the problem of merging branches.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pain of merge = fn(size_of_merge, duration_since_last_merge)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Merging branches can be a difficult task and might lead to a commit race, offloading the effort to a colleague.&lt;/p&gt;

&lt;h3 id=&quot;trunk-based-development&quot;&gt;Trunk-based development&lt;/h3&gt;

&lt;p&gt;A third option would be to ‘check in anyway’, called &lt;strong&gt;trunk-based development&lt;/strong&gt;.
Every commit integrates to the trunk and developers should integrate their local changes daily.
Small changes and integrating often makes it easier to merge new code.&lt;/p&gt;

&lt;p&gt;New half-finished features can be hidden with &lt;strong&gt;feature toggles&lt;/strong&gt;.
These toggles can be managed using flags or configurations (eg, in Zookeeper, Consul, …).&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A flag should be set and evaluated in as few places as possible, preferably only once each.
Flags should be removed when the new implementation is done.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://trunkbaseddevelopment.com/&quot;&gt;Trunk-based development&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Changes to an existing functionality can be done by providing an abstraction above the existing functionality.
The new functionality can then be developed for the abstraction and when it is done, changed to the new implementation.
&lt;strong&gt;Branch by abstraction&lt;/strong&gt; has the side-benefit that it can be used for &lt;strong&gt;A/B and canary releasing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.de/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912&quot;&gt;The Continuous Delivery&lt;/a&gt; book tells us to treat every check-in as a possible release candidate.
Developers start with the assumption that it is worthy, the CI tool decides whether it truly is.
Deploy frequently with small changes, making it easier to rollback and lowering the risk of running into problems.&lt;/p&gt;

&lt;h3 id=&quot;git&quot;&gt;Git&lt;/h3&gt;

&lt;p&gt;And then there was &lt;strong&gt;Git&lt;/strong&gt;, developed by &lt;a href=&quot;https://en.wikipedia.org/wiki/Linus_Torvalds&quot;&gt;Linus Torvalds&lt;/a&gt; with the goal to merge a patch in less than three seconds.
In Git, branches are much more lightweight and every local repository contains the full source history.&lt;/p&gt;

&lt;p&gt;In 2008, &lt;strong&gt;&lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;&lt;/strong&gt; was founded and introduced pull requests.
If you wanted to contribute to open source projects before pull requests you had to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Develop it locally&lt;/li&gt;
  &lt;li&gt;Generate a patch file&lt;/li&gt;
  &lt;li&gt;Mail it over to the project owners&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This feature contributed to GitHub’s success as three years later in 2011, they passed SourceForge and Google Code in popularity.&lt;/p&gt;

&lt;p&gt;Sam made the remark that pull requests use branches, which might bring problems. 
On top of that &lt;strong&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/comparing-workflows#gitflow-workflow&quot;&gt;GitFlow&lt;/a&gt;&lt;/strong&gt; was introduced.
Because GitFlow introduces even more branches, it is in controversy with fast deployment and small changes cycle.
With tools like &lt;a href=&quot;https://www.split.io&quot;&gt;Split&lt;/a&gt; and &lt;a href=&quot;https://launchdarkly.com&quot;&gt;LaunchDarkly&lt;/a&gt;, GitFlow is not needed, if merged frequently.&lt;/p&gt;

&lt;p&gt;The conclusion was that experimental and release branches, that might even never get merged, still have their uses.
The pull request mechanism works well in open source projects.
Except for experiments, releases and pull requests, Sam recommends to prevent branches and to &lt;strong&gt;keep batch sizes small, integrate often and ship often&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-reasonable-overview-of-java-9-and-how-you-could-think-of-it-oleg-šelajev---slides&quot;&gt;A reasonable overview of Java 9 and how you could think of it (&lt;a href=&quot;https://twitter.com/@shelajev&quot;&gt;Oleg Šelajev&lt;/a&gt; - &lt;a href=&quot;https://speakerdeck.com/shelajev/a-reasonable-overview-of-java-9-devoxx-pl-2017&quot;&gt;Slides&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;Since Java 9 does not seem to have a codename and Java 10 is called Project Valhalla, Oleg proposed codename Java 9 the &lt;em&gt;Fury Road&lt;/em&gt;, a Mad Max reference.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Java 9 Release date: September 21st 2017&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;jshell&quot;&gt;JShell&lt;/h3&gt;

&lt;p&gt;JShell is the new REPL (Read-Eval-Print Loop) for Java.
It can be used to run commands and get results immediately.
For user-friendliness, the semicolons can be omitted after the instructions in JShell.&lt;/p&gt;

&lt;p&gt;Example command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;jshell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ImmutableCollections&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$List1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;optionals&quot;&gt;Optionals&lt;/h3&gt;

&lt;p&gt;Several improvements will be added to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&lt;/code&gt; class.
Optionals can be turned into streams and have &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;For eager evaluation these functional methods can be applied directly to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;jshell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When using &lt;code class=&quot;highlighter-rouge&quot;&gt;stream()&lt;/code&gt; in front of the functional methods a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferencePipeline&lt;/code&gt; is returned.
This can be used for lazy evaluation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;jshell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ReferencePipeline&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;An &lt;code class=&quot;highlighter-rouge&quot;&gt;or()&lt;/code&gt; method will be added to chain a supplier to empty Optionals.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;jshell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Devoxx rocks!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Devoxx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rocks!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;streams&quot;&gt;Streams&lt;/h3&gt;

&lt;p&gt;Two new methods will be added to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Stream&lt;/code&gt; interface, &lt;code class=&quot;highlighter-rouge&quot;&gt;dropWhile&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;takeWhile&lt;/code&gt;.
For ordered streams, these methods drop or take elements while the predicate is true.
In unordered streams, &lt;code class=&quot;highlighter-rouge&quot;&gt;dropWhile&lt;/code&gt; returns a subset of elements starting from the first predicate match, &lt;code class=&quot;highlighter-rouge&quot;&gt;takeWhile&lt;/code&gt; returns a subset of elements matching the predicate.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dropWhile&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;takeWhile&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jshell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IntStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;takeWhile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;boxed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jshell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IntStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dropWhile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;boxed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CompletableFuture&lt;/code&gt; will be extended with a &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt;.
The copied &lt;code class=&quot;highlighter-rouge&quot;&gt;CompletableFuture&lt;/code&gt; is a defensive copy and completing it doesn’t complete the original &lt;code class=&quot;highlighter-rouge&quot;&gt;CompletableFuture&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;jshell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;runAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){}})&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concurrent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jshell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concurrent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jshell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jshell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$8&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concurrent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Completed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceptionally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jshell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$7&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concurrent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A new &lt;code class=&quot;highlighter-rouge&quot;&gt;ProcessHandle&lt;/code&gt; interface will be added, it can be used to get information and control processes.&lt;/p&gt;

&lt;h3 id=&quot;bits-and-pieces&quot;&gt;Bits and pieces&lt;/h3&gt;

&lt;p&gt;The underscore will become a keyword, so assigning a value to &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; does not work.
This is probably a feature for the future where &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; will be used for matching arguments of any type.
Assigning a value to &lt;code class=&quot;highlighter-rouge&quot;&gt;__&lt;/code&gt; will keep on working.
In Java 8, default methods were added to interfaces, in 9 they can be private.
Property files will support UTF-8 and there is already Java 9 support in several IDEs.
There will be several changes to improve &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; performance, for example using a more space-efficient internal representation for Strings.
Javadoc will get an improved search, HTML5 compliance and more info on the module where the class or interface comes from.
The use of agents will be more flexible, a process can attach an agent to itself and a JAR can contain multiple agents.&lt;/p&gt;

&lt;h3 id=&quot;modules&quot;&gt;Modules&lt;/h3&gt;
&lt;p&gt;The Java Platform Modules System (JPMS) allows modularization for Java applications.
A module can define dependent modules with &lt;code class=&quot;highlighter-rouge&quot;&gt;requires&lt;/code&gt;, to provide an API the &lt;code class=&quot;highlighter-rouge&quot;&gt;exports&lt;/code&gt; key word is used.
To give access to everyone the &lt;code class=&quot;highlighter-rouge&quot;&gt;opens&lt;/code&gt; keyword can be used.&lt;/p&gt;

&lt;p&gt;There is a method &lt;code class=&quot;highlighter-rouge&quot;&gt;getAccessable()&lt;/code&gt;.
You should be aware though about using it for determining if a module is usable or not since it actually just returns the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;setAccessable()&lt;/code&gt;, a toggle that you have to set yourself.
Actually it just returns the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;setAccessable()&lt;/code&gt;, a toggle that you have to set yourself.&lt;/p&gt;

&lt;p&gt;To make a smooth transition to the JPMS, any JAR on the classpath will become an automatic module.
By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;--illegal-access=permit&lt;/code&gt; is the default mode for JDK 9, allowing modules access to all automatic modules.&lt;/p&gt;

&lt;p&gt;As a migration strategy, Oleg proposes to wait for dependencies to modularize before modularizing yourself.
Otherwise you might need to modularize twice to align with the dependencies.&lt;/p&gt;

&lt;p&gt;Java 9 with Maven is complicated, many plugins need to be upgraded and a lot of functionality is not yet fully integrated with JPMS.
Gradle releases fixes more often and currently supports more features.&lt;/p&gt;

&lt;p&gt;A multi-release JAR containing multiple versions for the same file, in the same JAR, is a new feature that should be used with caution.&lt;/p&gt;

&lt;h3 id=&quot;garbage-collection&quot;&gt;Garbage collection&lt;/h3&gt;
&lt;p&gt;The G1 Garbage Collector (G1GC) will become the default in Java 9.
Previous Garbage Collectors were not as scalable nor predictable.
The G1GC promises a more scalable and more predictable system with few modification options.&lt;/p&gt;

&lt;p&gt;By default, a quarter of the physical ram will be allocated to the heap, unless the size is specified with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-mx&lt;/code&gt; flag.
Due to its new heap division system, it might run into problems with large chunks of data.
It is recommended to feed streams of data directly to parsers without first capturing it in a byte array, this also applies to JSON parsing and database operations.
Another improvement is using immutable objects wherever possible.
Using a &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; instead of concatenating Strings will reduce heap usage. 
For more info, Oleg referred to a talk on &lt;a href=&quot;https://vimeo.com/221269942&quot;&gt;Moving to G1GC by Kirk Pepperdine&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;http2-client&quot;&gt;HTTP/2 Client&lt;/h3&gt;
&lt;p&gt;The JDK 9 will contain an incubator package with a HTTP/2 client with a fluent API.
The modules in the incubator package are non-final APIs that can be finalized or removed in future releases.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://google.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BodyHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Oleg concluded by recommending the audience not to touch multi-release JAR, jlink and Unsafe, unless you are 100% sure what you are doing.
For now, he recommends to upgrade your IDE and tools and upgrade Spring to version 5.0. 
Then add the &lt;code class=&quot;highlighter-rouge&quot;&gt;--illegal-access=warn&lt;/code&gt; startup option and fix the easy fixable warnings and then wait a year or more until the classpath and the libraries, you depend on, are upgraded.&lt;/p&gt;

&lt;p&gt;Yannick, a colleague at Ordina did a nice presentation on Java 9: &lt;a href=&quot;https://www.youtube.com/watch?v=StJPI2rUPfs&quot;&gt;A first look at Java 9&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/@YannickDeTurck&quot;&gt;Yannick De Turck&lt;/a&gt;.
Presentation and sources are available at &lt;a href=&quot;https://github.com/yannickdeturck/java9workshop&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-language-of-actors-vaughn-vernon---slides&quot;&gt;The Language of Actors (&lt;a href=&quot;https://twitter.com/@VaughnVernon&quot;&gt;Vaughn Vernon&lt;/a&gt; - &lt;a href=&quot;https://github.com/VaughnVernon/DDDwithActors&quot;&gt;Slides&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;Vaughn started his talk by introducing &lt;a href=&quot;https://en.wikipedia.org/wiki/Grace_Hopper&quot;&gt;Rear Admiral Grace Hopper&lt;/a&gt; to the audience.
In the American Navy, she was a Computer Scientist and wrote software for a long time.
She was really into not wasting cycles and emphasised on not wasting nanoseconds.&lt;/p&gt;

&lt;p&gt;Then Vaughn introduced Donald Knuth, another legend in Computer Science.
Knuth is known from the quote &lt;em&gt;Premature optimization is the root of all evil&lt;/em&gt;.
But that is not exactly what he said, the full quote says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. 
Yet we should not pass up our opportunities in that critical 3%.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another quote was shared of Donald Knuth:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;People who are more than casually interested in computers should have at least some idea of what the underlying hardware is like. 
Otherwise the programs they write will be pretty weird.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To further build his point, Vaughn told about a project that was written in Cobol.
The code was across 5 diskettes thus user interaction was needed to run the application.
To improve the usability of the application, it was rewritten in C, allowing the software to fit on just one diskette.
With this introduction, Vaughn wanted to emphasize how hard it is to optimize software for resource usage.&lt;/p&gt;

&lt;h3 id=&quot;threading-is-hard&quot;&gt;Threading is hard&lt;/h3&gt;

&lt;p&gt;In 1973, academics discovered the &lt;strong&gt;Actor Model&lt;/strong&gt;. 
13 year later in 1986 Joe Armstrong rediscovered the approach.
Armstrong designed and implemented a programming language on this model, &lt;strong&gt;Erlang&lt;/strong&gt;
In 2008, Jonas Bonér came up with Akka for the Java Virtual Machine and in 2011 José Valim came up with another Actor based language called Elixir.&lt;/p&gt;

&lt;p&gt;Because the Actor Model is &lt;strong&gt;Message Driven&lt;/strong&gt;, it inherently is &lt;strong&gt;Reactive&lt;/strong&gt;.
&lt;img src=&quot;/img/2017-devoxx-pl/reactive-traits.svg&quot; alt=&quot;Reactive Traits&quot; class=&quot;fit&quot; height=&quot;250px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now is the time for the Actor Model, with the decreasing expense of memory, network and chips.
Processors are having a lot of cores these days, Intel Xeon units go up to 88 cores, Intel Xeon Phi can have more then 200 coprocessors.
The actor model allows us to embrace latency. If we design for latency, it will not have a blocking impact on the design.&lt;/p&gt;

&lt;h1 id=&quot;we-are-not-at-google-scale-why-use-actors&quot;&gt;We are not at Google scale, why use actors?&lt;/h1&gt;

&lt;p&gt;With the Actor Model you can do more with less. 
The total number of nodes can be reduced to just a few, several million actors per machine is not a problem.&lt;/p&gt;

&lt;p&gt;The actor model uses the essence of &lt;strong&gt;Domain Driven Design (DDD)&lt;/strong&gt;, the bounded context and ubiquitous language.
DDD is excellent way to make complexity surrender, by knowledge crunching.&lt;/p&gt;

&lt;p&gt;Actors help us reason better by having less moving parts.
This allows us to focus on business aspects, instead of the architecture around it.&lt;/p&gt;

&lt;p&gt;How to do DDD in projects:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Talk with customer (iterate)&lt;/li&gt;
  &lt;li&gt;Write some scenarios (iterate)&lt;/li&gt;
  &lt;li&gt;Strategic Event Storming (iterate)&lt;/li&gt;
  &lt;li&gt;Tactical Event Storming (iterate)&lt;/li&gt;
  &lt;li&gt;Implement acceptance tests and model (iterate)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This concludes our recap of this amazing edition of Devoxx Poland.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jeff&quot;, &quot;last_name&quot;=&gt;&quot;Mesens&quot;, &quot;avatar&quot;=&gt;&quot;jeff-mesens.jpg&quot;, &quot;twitter&quot;=&gt;&quot;JMesens&quot;, &quot;linkedin&quot;=&gt;&quot;jeff-mesens-b3646921&quot;, &quot;github&quot;=&gt;&quot;JMesens&quot;, &quot;permalink&quot;=&gt;&quot;/author/jeff-mesens/&quot;, &quot;title&quot;=&gt;&quot;Software Engineer&quot;, &quot;bio&quot;=&gt;&quot;Jeff Mesens is a Java Software Engineer at Ordina Belgium, passionate about Distributed Systems and all sorts of Scalable and High Available software architectures. He takes a special interest in Security, Domain Driven Design and Message Driven development. Aside from his job as a Java Software Engineer he likes to keep up to date on new technologies and follow the latest developments in Software Engineering.&quot;}</name></author><category term="Conference" /><category term="Testing" /><category term="Software Patterns" /><category term="Git" /><summary type="html">Devoxx Poland 2017</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2017-devoxx-pl/devoxx-poland.jpg" /></entry><entry><title type="html">Spring I/O 2017 Recap</title><link href="https://ordina-jworks.github.io/spring/2017/07/11/SpringIO17-Summary.html" rel="alternate" type="text/html" title="Spring I/O 2017 Recap" /><published>2017-07-11T00:00:00+00:00</published><updated>2017-07-11T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/spring/2017/07/11/SpringIO17-Summary</id><content type="html" xml:base="https://ordina-jworks.github.io/spring/2017/07/11/SpringIO17-Summary.html">&lt;blockquote&gt;
  &lt;p&gt;On the 18th and 19th of May, we had another great edition of Spring I/O, brought to us by organizer &lt;a href=&quot;https://twitter.com/sergialmar&quot; target=&quot;_blank&quot;&gt;Sergi Almar&lt;/a&gt;.
In this blog post, we will go over some of our favourite sessions of the conference.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: we could not include &lt;strong&gt;ALL&lt;/strong&gt; the talks from Spring IO in this blogpost. We provide an extensive summary of our favorite talks and created a curated list of all the talks and resources at the bottom of this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;the-toc&quot;&gt;

  &lt;h1 class=&quot;the-toc__heading&quot;&gt;Table Of Contents&lt;/h1&gt;

  &lt;ol class=&quot;the-toc__list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;#1-keynote-the-only-constant-is-change&quot; title=&quot;Keynote: The Only Constant Is Change&quot;&gt;Keynote: The Only Constant Is Change&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#2-bootiful-database-centric-applications-with-jooq&quot; title=&quot;Bootiful Database-centric Applications with jOOQ&quot;&gt;Bootiful Database-centric Applications with jOOQ&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#3-google-spanner&quot; title=&quot;Google Spanner&quot;&gt;Google Spanner&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#4-easily-secure-and-add-identity-management-to-your-springboot-applications-with-keycloak&quot; title=&quot;Easily secure and add Identity Management to your Spring(Boot) applications with Keycloak&quot;&gt;Easily secure and add Identity Management to your Spring(Boot) applications with Keycloak&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#5-spring-cloud-streams-data-services&quot; title=&quot;Spring Cloud Streams (Data Services)&quot;&gt;Spring Cloud Streams (Data Services)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#6-the-road-to-serverless-spring-cloud-function&quot; title=&quot;The Road To Serverless: Spring Cloud Function&quot;&gt;The Road To Serverless: Spring Cloud Function&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#7-reactive-spring-data&quot; title=&quot;Reactive Spring Data&quot;&gt;Reactive Spring Data&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#8-the-future-of-event-driven-microservices-with-spring-cloud-stream&quot; title=&quot;The Future Of Event Driven Microservices With Spring Cloud Stream&quot;&gt;The Future Of Event Driven Microservices With Spring Cloud Stream&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#9-new-in-spring-5-functional-web-framework&quot; title=&quot;New in Spring 5: Functional Web Framework&quot;&gt;New in Spring 5: Functional Web Framework&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#10-spring-auto-rest-docs&quot; title=&quot;Spring Auto REST Docs&quot;&gt;Spring Auto REST Docs&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#11-references&quot; title=&quot;References&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;

&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;1-keynote-the-only-constant-is-change&quot;&gt;1. Keynote: The Only Constant Is Change&lt;/h1&gt;

&lt;h3 id=&quot;by-andy-wilkinson-and-stéphane-nicoll&quot;&gt;by &lt;a href=&quot;https://twitter.com/ankinson&quot; target=&quot;_blank&quot;&gt;Andy Wilkinson&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/snicoll&quot; target=&quot;_blank&quot;&gt;Stéphane Nicoll&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Obviously, the keynote presentation was filled with announcements, interesting tidbits and two great presenters.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; style=&quot;max-width:595px&quot; alt=&quot;Andy Wilkinson and Stéphane Nicoll&quot; src=&quot;/img/SpringIO2017/andy-wilkinson-stephane-nicoll.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The biggest topic revolved around how &lt;strong&gt;Spring has always tried to enable developers to adapt their applications rapidly&lt;/strong&gt;.
This capacity of adapting to change increased dramatically when Spring Boot was released, which explains part of its success.&lt;/p&gt;

&lt;p&gt;They also reported the release of &lt;a href=&quot;https://spring.io/blog/2017/05/16/spring-boot-2-0-0-m1-available-now&quot;&gt;Spring Boot 2.0.0 M1&lt;/a&gt;.
This release was announced very shortly after &lt;a href=&quot;https://spring.io/blog/2017/05/08/spring-framework-5-0-goes-rc1&quot;&gt;Spring Framework 5.0 went RC1&lt;/a&gt; on the 8th of May.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=uJSYnqIhcIo&quot; target=&quot;_blank&quot;&gt;The keynote can be found here&lt;/a&gt; and the demo code &lt;a href=&quot;https://github.com/snicoll-demos/demo-webflux-streaming&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;2-bootiful-database-centric-applications-with-jooq&quot;&gt;2. Bootiful Database-centric applications with jOOQ&lt;/h1&gt;

&lt;h3 id=&quot;by-michael-simons&quot;&gt;by &lt;a href=&quot;https://twitter.com/rotnroll666&quot; target=&quot;_blank&quot;&gt;Michael Simons&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Michael Simons&quot; src=&quot;/img/SpringIO2017/michael-simons.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;As a personal fan of &lt;a href=&quot;https://twitter.com/rotnroll666&quot; target=&quot;_blank&quot;&gt;@rotnroll666&lt;/a&gt;, I went to see his talk, fully expecting to be impressed by the level of quality and code.
As always, Michael delivered: he made me realize &lt;strong&gt;there are still plenty of PL/SQL developers out there in the enterprise landscape, who hold on to their code like kids to their favorite stuffed animal before bedtime&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Luckily for us, someone created a library called &lt;strong&gt;jOOQ&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;jOOQ generates Java code from your database and lets you build type safe SQL queries through its fluent API&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img alt=&quot;jOOQ&quot; src=&quot;/img/SpringIO2017/jooq.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;There are many use cases where jOOQ can prove useful, but the example that Michael used described the enterprise environment at his current employer:
He was working for a &lt;strong&gt;big utility company&lt;/strong&gt; in Germany, who developed applications on power and gas usage consisting of &lt;strong&gt;lots of time-series data&lt;/strong&gt;.
Almost all of the data was stored in SQL databases with a &lt;strong&gt;big layer of PL/SQL on top&lt;/strong&gt;.
They also developed some desktop GIS applications using &lt;strong&gt;Oracle Spatial&lt;/strong&gt; to visualize the data.&lt;/p&gt;

&lt;p&gt;So the question they asked themselves at a certain moment:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Should we approach all of our data using plain PL/SQL? Should we use an ORM tool like Hibernate? Or can we use something in between?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, as with any good question, the answer is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It depends. &lt;strong&gt;There is no silver bullet&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many options in the Java space to approach this problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Plain JDBC&lt;/li&gt;
  &lt;li&gt;Using a &lt;code class=&quot;highlighter-rouge&quot;&gt;JDBCTemplate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;JPA with JPQL and / or Criteria API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Michael’s team solved most of their problems using Hibernate, and while that comes with several advantages, it doesn’t mean you have to use it for everything.
One of the improvements they made was using &lt;strong&gt;Hibernate combined with jOOQ&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use Hibernate for the regular database queries and &lt;em&gt;day-to-day manipulations of your database&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Use jOOQ for your complex queries and database migrations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To briefly summarize what jOOQ can do for you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jOOQ is &lt;strong&gt;SQL-centric&lt;/strong&gt; which means jOOQ infers information from the actual database, not from the ORM model&lt;/li&gt;
  &lt;li&gt;It exposes a &lt;strong&gt;typesafe meta-model&lt;/strong&gt; generated from your SQL&lt;/li&gt;
  &lt;li&gt;The Query Builder framework uses a &lt;strong&gt;very legible DSL&lt;/strong&gt; (in a much more concise way than the &lt;code class=&quot;highlighter-rouge&quot;&gt;Criteria API&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;It generates a Java-based schema (using Maven or Gradle)&lt;/li&gt;
  &lt;li&gt;It can reverse-engineer an existing DB and generate SQL&lt;/li&gt;
  &lt;li&gt;Spring provides &lt;strong&gt;integration with Spring Boot&lt;/strong&gt; through the &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-jooq&lt;/code&gt; dependency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An ideal scenario to use jOOQ would be to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Run your &lt;strong&gt;database migration&lt;/strong&gt; with Flyway or Liquibase first&lt;/li&gt;
  &lt;li&gt;Run the &lt;strong&gt;code generator&lt;/strong&gt; to generate the Java DSL context (this happens in the Maven &lt;code class=&quot;highlighter-rouge&quot;&gt;generate-sources&lt;/code&gt; lifecycle phase)&lt;/li&gt;
  &lt;li&gt;Use the DSL context to &lt;strong&gt;write your typesafe queries&lt;/strong&gt;, for example:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;BookRecord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetchOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For more information about jOOQ, &lt;a href=&quot;https://www.jooq.org/&quot; target=&quot;_blank&quot;&gt;you can check out their website&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Question: What’s the difference between the jOOQ Query API and using JPA Criteria API with the Hibernate ModelGen, which is also typesafe?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;It resembles the native SQL much better&lt;/li&gt;
  &lt;li&gt;jOOQ provides &lt;strong&gt;standardization&lt;/strong&gt; since it performs SQL transformations that work for &lt;strong&gt;any SQL dialect&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;It should make it easier to migrate existing PL/SQL applications&lt;/li&gt;
  &lt;li&gt;There is a much more extensive collection of SQL functions and possibilities&lt;/li&gt;
  &lt;li&gt;jOOQ provides POJO mappers which are also generated from the code generator&lt;/li&gt;
  &lt;li&gt;As much as you hate them, it supports calling &lt;strong&gt;Stored Procedures&lt;/strong&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/michael-simons/bootiful-databases&quot; target=&quot;_blank&quot;&gt;code from Michael’s talk can be found on Github&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;3-google-spanner&quot;&gt;3. Google Spanner&lt;/h1&gt;

&lt;h3 id=&quot;by-robert-kubis&quot;&gt;by &lt;a href=&quot;https://twitter.com/hostirosti&quot; target=&quot;_blank&quot;&gt;Robert Kubis&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Google Spanner is a &lt;strong&gt;globally distributed relational database service&lt;/strong&gt; that provides ACID transactions and SQL semantics, without giving up horizontal scaling and high availability.&lt;/p&gt;

&lt;p&gt;When building cloud applications, you are no longer forced to choose between traditional databases that guarantee transactional consistency, or NoSQL databases that offer simple, horizontal scaling and data distribution.
Cloud Spanner offers both of these critical capabilities in a single, fully managed service.
With Spanner, your database can scale up and down as needed, and you only pay for the amount you use.&lt;/p&gt;

&lt;p&gt;Spanner keeps application development simple by supporting standard tools and languages in a familiar relational database environment.
It supports distributed transactions, schemas and DDL statements, SQL queries and JDBC drivers and offers client libraries for the most popular languages, including Java, Go, Python and Node.js.&lt;/p&gt;

&lt;p&gt;As a managed service, Cloud Spanner provides key benefits to DBAs:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Focus on your application logic&lt;/strong&gt; instead of spending valuable time managing hardware and software.&lt;/li&gt;
  &lt;li&gt;Scale out your RDBMS solutions without complex sharding or clustering.&lt;/li&gt;
  &lt;li&gt;Gain &lt;strong&gt;horizontal scaling&lt;/strong&gt; without migration from relational to NoSQL databases&lt;/li&gt;
  &lt;li&gt;Maintain &lt;strong&gt;high availability&lt;/strong&gt; and protect against disaster without needing to engineer a complex replication and failover infrastructure.&lt;/li&gt;
  &lt;li&gt;Gain &lt;strong&gt;integrated security&lt;/strong&gt; with data-layer encryption, identity and access management and audit logging&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;Google Spanner&quot; src=&quot;/img/SpringIO2017/cloud-spanner.png&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;4-easily-secure-and-add-identity-management-to-your-springboot-applications-with-keycloak&quot;&gt;4. Easily secure and add Identity Management to your Spring(Boot) applications with Keycloak&lt;/h1&gt;

&lt;h3 id=&quot;by-sébastien-blanc&quot;&gt;by &lt;a href=&quot;https://twitter.com/sebi2706&quot; target=&quot;_blank&quot;&gt;Sébastien Blanc&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Sébastien Blanc&quot; src=&quot;/img/SpringIO2017/sebi.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I must say, this was one of the funniest talks of the conference.
Sébastien knows how to entertain the crowd and he kicked off with a great quote which, of course, I immediately stole and tweeted:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; style=&quot;margin-top: 2em&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Similar to a quite from &lt;a href=&quot;https://twitter.com/sebi2706&quot;&gt;@sebi2706&lt;/a&gt; last week at &lt;a href=&quot;https://twitter.com/hashtag/springio17?src=hash&quot;&gt;#springio17&lt;/a&gt; : forget about companies, it&amp;#39;s all about community and code! 🙌&lt;/p&gt;&amp;mdash; Dieter Hubau (@dhubau) &lt;a href=&quot;https://twitter.com/dhubau/status/867999793280413698&quot;&gt;May 26, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;First of all, let’s forget that Keycloak was created by Redhat and that it is written in Java EE.
The following aspects of Keycloak are more important:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.keycloak.org/&quot; target=&quot;_blank&quot;&gt;It’s Open Source&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Redhat provides support through their commercial fork called &lt;a href=&quot;https://access.redhat.com/products/red-hat-single-sign-on&quot; target=&quot;_blank&quot;&gt;Redhat SSO&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Great &lt;strong&gt;Spring Boot Integration&lt;/strong&gt; through the use of a &lt;a href=&quot;https://keycloak.gitbooks.io/documentation/securing_apps/topics/oidc/java/spring-boot-adapter.html&quot; target=&quot;_blank&quot;&gt;Spring Boot Starter&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Seamless &lt;strong&gt;Spring Security Integration&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Supports OAuth 2.0, SAML 2.0, OpenID Connect&lt;/li&gt;
  &lt;li&gt;Integration with Active Directory, LDAP and even Kerberos (&lt;em&gt;start drooling enterprise users!&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s actually quite easy to setup Keycloak:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download &lt;a href=&quot;https://downloads.jboss.org/keycloak/3.2.0.Final/keycloak-3.2.0.Final.zip&quot; target=&quot;_blank&quot;&gt;the Keycloak standalone server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Extract and run it&lt;/li&gt;
  &lt;li&gt;Start the server and create an admin user&lt;/li&gt;
  &lt;li&gt;Create a new realm&lt;/li&gt;
  &lt;li&gt;Create a new application&lt;/li&gt;
  &lt;li&gt;Add roles to your application&lt;/li&gt;
  &lt;li&gt;Create a user to authenticate with&lt;/li&gt;
  &lt;li&gt;Create a Spring Boot application at &lt;a href=&quot;http://start.spring.io&quot; target=&quot;_blank&quot;&gt;The Happiest Place On Earth&lt;/a&gt;) and include the Keycloak starter&lt;/li&gt;
  &lt;li&gt;Add the Keycloak properties to your application.yml:
    &lt;ul&gt;
      &lt;li&gt;server URL&lt;/li&gt;
      &lt;li&gt;realm&lt;/li&gt;
      &lt;li&gt;resource name of your application&lt;/li&gt;
      &lt;li&gt;security constraints for your users&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Run!&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;Keycloak Client configuration&quot; src=&quot;/img/SpringIO2017/keycloak.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;There are many additional features for power users:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Automatic registration of applications should be possible using a one-time token (coming soon?)&lt;/li&gt;
  &lt;li&gt;Centralized User Management&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CORS support&lt;/strong&gt; for Single Page Applications&lt;/li&gt;
  &lt;li&gt;Social Login Integration&lt;/li&gt;
  &lt;li&gt;Registration and Forgot Password functionality, all out-of-the-box, configurable at runtime&lt;/li&gt;
  &lt;li&gt;UI Customization of all pages is possible through theming (&lt;em&gt;start drooling designers!&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All in all, the setup and demo went very smooth and &lt;strong&gt;I genuinely feel this product is about to become very popular&lt;/strong&gt;, partly because of the Spring Boot integration, but also because it just seems very solid and user-friendly.&lt;/p&gt;

&lt;p&gt;There might be a dedicated blogpost coming soon about Keycloak, so stay tuned and check our blog regularly or &lt;a href=&quot;https://ordina-jworks.github.io/feed.xml&quot; target=&quot;_blank&quot;&gt;subscribe to our RSS feed&lt;/a&gt;!&lt;/p&gt;

&lt;h1 id=&quot;5-spring-cloud-streams-data-services&quot;&gt;5. Spring Cloud Streams (Data Services)&lt;/h1&gt;

&lt;h3 id=&quot;by-michael-minella&quot;&gt;by &lt;a href=&quot;https://twitter.com/michaelminella&quot; target=&quot;_blank&quot;&gt;Michael Minella&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Michael gave a summary about all the new projects in the Spring ecosystem that process data and / or messages very well.
He explained that there are lots of big data frameworks out there (Hadoop, Spark, …), which can handle BIG amounts of data very well.
However, they are usually &lt;strong&gt;too bulky / difficult / inappropriate for handling smaller volumes of data&lt;/strong&gt;.
Also, for quickly setting up something like Hadoop or Spark, the &lt;strong&gt;learning curve is too high&lt;/strong&gt; and the effort doesn’t justify the benefits.&lt;/p&gt;

&lt;h4 id=&quot;solution-data-microservices&quot;&gt;Solution: data microservices&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Developed and tested in isolation, also easier to test&lt;/li&gt;
  &lt;li&gt;Independently scalable depending on data processing load&lt;/li&gt;
  &lt;li&gt;Familiar development model, just like regular cloud-native Spring microservices&lt;/li&gt;
  &lt;li&gt;Easier to govern for Ops&lt;/li&gt;
  &lt;li&gt;So the need for data / app integration / composition arises&lt;/li&gt;
  &lt;li&gt;Which means the need for orchestration and operational coverage arises (lots of plumbing required)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;spring-cloud-stream&quot;&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-stream/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Stream&lt;/a&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Streams are thin wrappers around Spring integration&lt;/li&gt;
  &lt;li&gt;Supported binder for integration between services: Kafka, RabbitMQ, …&lt;/li&gt;
  &lt;li&gt;Source, Processor, Sink model is easy to comprehend&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;spring-cloud-task&quot;&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-task/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Task&lt;/a&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Tasks are finite microservices, built around Spring Batch&lt;/li&gt;
  &lt;li&gt;“Microservices that end”&lt;/li&gt;
  &lt;li&gt;Contain Task repository which tracks run/start/end of the tasks&lt;/li&gt;
  &lt;li&gt;Has Spring Batch integration (partition steps using workers)&lt;/li&gt;
  &lt;li&gt;Has Spring Cloud Stream integration (eg. launch Tasks via Streams)&lt;/li&gt;
  &lt;li&gt;Simple annotation &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableTask&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Use cases: batch jobs, scheduled one-off processes, ETL processing, data science&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;spring-cloud-data-flow&quot;&gt;Spring Cloud Data Flow&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;AKA&lt;/em&gt; the new and Improved Spring XD&lt;/li&gt;
  &lt;li&gt;Data flow orchestrator&lt;/li&gt;
  &lt;li&gt;Use a shell or the UI which goes over REST endpoints&lt;/li&gt;
  &lt;li&gt;Has custom DSL&lt;/li&gt;
  &lt;li&gt;All the components are regular Spring Boot apps (Data Flow server, Shell, …)&lt;/li&gt;
  &lt;li&gt;Data Flow server has datastore for task repository, batch repository, configuration, …&lt;/li&gt;
  &lt;li&gt;Data Flow server does &lt;strong&gt;not&lt;/strong&gt; do any of the actual work&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;Keycloak Client configuration&quot; src=&quot;/img/SpringIO2017/spring-cloud-data-flow.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We will be publishing a fun blogpost about Spring Cloud Streams soon, so stay tuned or &lt;a href=&quot;https://ordina-jworks.github.io/feed.xml&quot; target=&quot;_blank&quot;&gt;subscribe to the RSS feed&lt;/a&gt;!&lt;/p&gt;

&lt;h1 id=&quot;6-the-road-to-serverless-spring-cloud-function&quot;&gt;6. The Road to Serverless: Spring Cloud Function&lt;/h1&gt;

&lt;h3 id=&quot;by-dr-dave-syer&quot;&gt;by &lt;a href=&quot;https://twitter.com/david_syer&quot; target=&quot;_blank&quot;&gt;Dr. Dave Syer&lt;/a&gt;&lt;/h3&gt;

&lt;h4 id=&quot;faas&quot;&gt;FaaS&lt;/h4&gt;
&lt;p&gt;In recent years we’ve seen the emergence and evolution of following cloud abstraction layers in order of abstraction level:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Virtual Machines (IaaS)&lt;/li&gt;
  &lt;li&gt;Containers (CaaS)&lt;/li&gt;
  &lt;li&gt;Applications (PaaS)&lt;/li&gt;
  &lt;li&gt;Functions (FaaS)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Goal of each of these is raising the value line; 
in other words, the purpose of each of these is to abstract away various concerns that are of no business value
(e.g. setting up and maintaining infrastructure, the environment the code has to run in…).
The latest and most extreme level of these is FaaS (or ‘serverless’).
Basically all the programmer should do in a FaaS environment is write a Function and hand it over to the platform.&lt;/p&gt;

&lt;p&gt;The platform takes care of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Making sure the function is executed on demand&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deploying and undeploying (often on demand!)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scaling up&lt;/strong&gt; the amount of instances quickly and in parallel if the need arises (is easier with functions since they are simpler in nature than applications)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Managing integrations&lt;/strong&gt; with other systems&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The naming scheme of “serverless” is unfortunate; of course you’re gonna have servers, you just don’t care about them&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;problem&quot;&gt;Problem&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;By now there are a lot of FaaS solutions out there; AWS Lambda, Google Cloud Function, Azure Function, IBM Openwhisk, Fission, Kubeless, …&lt;/li&gt;
  &lt;li&gt;Deploying and programming functions is different for each platform because you have to use their native APIs and they have their own platform to deploy on.&lt;/li&gt;
  &lt;li&gt;Running and testing these functions locally&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;enter-spring-cloud-function&quot;&gt;Enter Spring Cloud Function&lt;/h4&gt;

&lt;p&gt;The purpose of the new project called &lt;strong&gt;Spring Cloud Function&lt;/strong&gt; is to solve these problems by:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Keeping all advantages of serverless/functions, but with all the possibilities that Spring offers (DI, integration, autoconfig, build tools)&lt;/li&gt;
  &lt;li&gt;Providing a low entry level for Spring devs to jump on the FaaS model&lt;/li&gt;
  &lt;li&gt;Providing a low entry level for FaaS people without having knowledge of Spring&lt;/li&gt;
  &lt;li&gt;Making it possible to run the same business logic as web endpoint, stream processor or a task&lt;/li&gt;
  &lt;li&gt;Introduce an uniform programming model across providers and &lt;strong&gt;able to run standalone&lt;/strong&gt; (not on a IAAS or PAAS).&lt;/li&gt;
  &lt;li&gt;Support a reactive programming model (Flux, Mono) as well&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The project will try to achieve this by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Supporting the familiar Java 8 Function types:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    
    &lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uppercase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;As well as the Reactive Types Flux and Mono :&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uppercase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flux&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;String:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Building/deploying the Function as a web endpoint, a task or a stream  can be done by merely altering dependencies, for example:
    &lt;ul&gt;
      &lt;li&gt;Deploying the function as a web endpoint can be done by adding the dependency spring-cloud-function-web&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In a similar fashion, it will also possible to build for a platform like AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;In a way the goal of FaaS is similar to the Spring framework; 
allowing the developer (or the IT department) to &lt;strong&gt;focus on writing code that has real value&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The purpose of FaaS is to help us with infrastructure, scalability etc for the functions we write while 
Spring cloud function will allow us to write and deploy these functions in an (almost) platform agnostic fashion.
At the same time, it will enable the programmer to leverage the Spring Framework with it’s various features that helps the programmer 
to focus even more on his main purpose; programming things that deliver real value: business code!&lt;/p&gt;

&lt;p&gt;PS: &lt;a href=&quot;https://twitter.com/kennybastani&quot; target=&quot;_blank&quot;&gt;Kenny Bastani&lt;/a&gt; has just published a &lt;a href=&quot;http://www.kennybastani.com/2017/07/microservices-to-service-blocks-spring-cloud-function-aws-lambda.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;VERY&lt;/strong&gt; detailed blogpost about Spring Cloud Function on AWS Lambda&lt;/a&gt;.
It’s a follow-up of his earlier &lt;a href=&quot;http://www.kennybastani.com/2017/01/building-event-driven-microservices.html&quot; target=&quot;_blank&quot;&gt;blogpost about Event-driven Microservices using CQRS and Serverless&lt;/a&gt;.
I would highly recommend his blog!&lt;/p&gt;

&lt;h1 id=&quot;spring-break&quot;&gt;Spring Break&lt;/h1&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;Google Spanner&quot; src=&quot;/img/SpringIO2017/Pizza.jpg&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;7-reactive-spring-data&quot;&gt;7. Reactive Spring Data&lt;/h1&gt;

&lt;h3 id=&quot;by-christophe-strobl&quot;&gt;by Christophe Strobl&lt;/h3&gt;

&lt;h4 id=&quot;biggest-changes-of-spring-data-kay-m3&quot;&gt;Biggest changes of Spring Data Kay M3&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Java 8 baseline&lt;/li&gt;
  &lt;li&gt;ID classes don’t need to be Serializable anymore&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;breaking change&lt;/strong&gt;: No more &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; in the repositories (arguments or return values)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;breaking change&lt;/strong&gt;: More consistent naming (eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;findOne -&amp;gt; findOneById&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Composable interfaces (separate Readable / Insertable and make custom repositories as composable interface as well)&lt;/li&gt;
  &lt;li&gt;Builder style &lt;code class=&quot;highlighter-rouge&quot;&gt;Template&lt;/code&gt; APIs&lt;/li&gt;
  &lt;li&gt;Kotlin extensions are coming in M4&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;data-store-specifics&quot;&gt;Data Store specifics&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;MongoDB:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;breaking change&lt;/strong&gt;: MongoDB driver baseline to 3.x&lt;/li&gt;
      &lt;li&gt;Introduction of &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactiveMongoTemplate&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Enhanced aggregation support&lt;/li&gt;
      &lt;li&gt;Collation support&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cassandra:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;breaking change&lt;/strong&gt;: Update to Cassandra 3.2&lt;/li&gt;
      &lt;li&gt;No reactive native driver –&amp;gt; mimicking reactive driver with thread pool (and blocking) underneath (with &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactiveCassandraTemplate&lt;/code&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Redis:
    &lt;ul&gt;
      &lt;li&gt;JRedis discontinued&lt;/li&gt;
      &lt;li&gt;Upgraded to Lettuce 5 (not GA yet though) supports native reactive driver&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Gemfire:
    &lt;ul&gt;
      &lt;li&gt;Lucene index support&lt;/li&gt;
      &lt;li&gt;Off-heap, Redis Adapter, Security annotation config&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Solr:
    &lt;ul&gt;
      &lt;li&gt;Upgrade to Solr 6&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Spring Data REST:
    &lt;ul&gt;
      &lt;li&gt;CORS config mechanism&lt;/li&gt;
      &lt;li&gt;Improved headers&lt;/li&gt;
      &lt;li&gt;Improved media type support&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;8-the-future-of-event-driven-microservices-with-spring-cloud-stream&quot;&gt;8. The future of event driven microservices with Spring Cloud Stream&lt;/h1&gt;

&lt;h3 id=&quot;by-kenny-bastani&quot;&gt;by &lt;a href=&quot;https://twitter.com/kennybastani&quot; target=&quot;_blank&quot;&gt;Kenny Bastani&lt;/a&gt;&lt;/h3&gt;

&lt;h2 id=&quot;evolution&quot;&gt;Evolution&lt;/h2&gt;

&lt;h3 id=&quot;monolith-application&quot;&gt;Monolith application&lt;/h3&gt;
&lt;p&gt;There are some cultural problems with monoliths.
One big application slows down the velocity of getting into production.
Everyone has to use a shared deployment pipeline.
For large code-bases it is harder for new engineers to get up to speed.
The engineers that were there from the beginning, who designed the application, are busy explaining the history of the application to new engineers joining the project. 
These developers are creating change but might get blocked by DBA and Ops teams.&lt;/p&gt;

&lt;h3 id=&quot;monolith-organization&quot;&gt;Monolith organization&lt;/h3&gt;

&lt;p&gt;Centralized authority for operations, database and change management slows progress.
These coordinated releases batch many changes together from different teams.
Usually operations drives the runtime environment of applications because they take all operation responsibility including upgrades of virtual machines.
The key problem is that everything is deployed at once or nothing at all.&lt;/p&gt;

&lt;h3 id=&quot;move-towards-soa&quot;&gt;Move towards SOA&lt;/h3&gt;

&lt;p&gt;With Service-oriented Architecture the application is split up in components which can be deployed individually but now the key problem are the shared libraries.
Releasing a change in an object that is not shared can be done separate, but still a problem for the shared ones.&lt;/p&gt;

&lt;h3 id=&quot;now-we-arrived-at-microservices&quot;&gt;Now we arrived at Microservices&lt;/h3&gt;

&lt;p&gt;There are a lot of improvements but Microservices also adds the complexity of running a distributed system.
Small, two pizza (5-8 members), teams organized around business capabilities with responsibility of running their own services.
We gain independent deployability because each team produces and consumes rest APIs to communicate.
Team also have more freedom to chose the best tool for the job they are facing.
Microservices brings the challenge of eventual consistency, in a monolith you could rollback a transaction at the database level if something went wrong. Now eventual consistency is not guaranteed, inconsistency happens all the time. 
Rolling back transactions across multiple services is not easy.&lt;/p&gt;

&lt;h3 id=&quot;is-it-a-monolith-or-microservice&quot;&gt;Is it a Monolith or Microservice?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;If it takes longer than a day for an engineer to ramp up its probably a monolith&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a typical architecture the front-end teams integrate directly with the microservices.
This is an anti-pattern in distributed systems. 
Consumers should not have to worry which instance of the replicated services they have to go to.
You could use Spring Cloud, it allows you to centralize authentication with OAuth tokens and routing through an  API Gateway. The front-end does not need to be concerned with all these services, for them it looks like consuming a monolithic API.&lt;/p&gt;

&lt;h2 id=&quot;splitting-the-monolith&quot;&gt;Splitting the monolith&lt;/h2&gt;

&lt;p&gt;The popular route from monolith to a microservice architecture is slicing off bits of functionality.
This is hard in practice, splitting up a schema is usually the complex part.
Refactoring out functionality and tables to new services can be hard because of foreign key constraints for example.&lt;/p&gt;

&lt;h3 id=&quot;why-we-need-event-driven-microservices&quot;&gt;Why we need event-driven microservices&lt;/h3&gt;

&lt;p&gt;The problem with microservices is that there are no foreign key constraints between services.
Furthermore, distributed transactions are brittle and distributed systems are hard.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You will drown in problems you didn’t know existed!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Without event-driven microservices and an audit trail you will never know why something went wrong.
This audit trail allows you to reason about what went wrong and roll back state.&lt;/p&gt;

&lt;h2 id=&quot;rules-for-event-driven-microservices&quot;&gt;Rules for Event-driven microservices&lt;/h2&gt;

&lt;p&gt;A lot of these rules are from reference applications and Kenny’s work with &lt;a href=&quot;http://microservices.io/&quot;&gt;Chris Richardson&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Domain events&lt;/em&gt; are a first class citizen, every time you change some piece of data, domain events should be exchanged.
These events can be used as an audit trail to determine why state changed in a system.
Each domain event contains a subject with the project aggregate and a payload with immutable data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EntityListeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuditionEntityListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProjectEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Enumerated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProjectEventType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To make this way of working accessible to the developers, hypermedia APIs need to expose links on the aggregates.
A traversal list of command and a log of events that happened should be accessible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Command handlers&lt;/strong&gt; trigger commands on aggregate and then the command is going to generate events.
Every domain event applies a state transition to an aggregate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Event handlers&lt;/strong&gt; are going to subscribe to an event and apply changes to an aggregate to change the state.
In a graph representation, event handlers would be the nodes and events the edges.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CQRS&lt;/strong&gt; is used to create materialized views from streams of events.
With CQRS you will have a command side and a query side.
For example the commands might be written to an Apache Kafka event store.
Then an event processor could be using Spring Cloud Stream to retrieve these events and create a data model.
The data model is then written to a Data Store like MySQL, where the query side reads the data.
An API gateway, like Spring Cloud Netflix Zuul, can be put in front so it looks for the consumer like a regular microservice.
For deploying this application you can combine these components together or scale them independently.&lt;/p&gt;

&lt;h3 id=&quot;serverless&quot;&gt;Serverless&lt;/h3&gt;

&lt;p&gt;Changes the pricing model for the execution on a cloud provider.
With Serverless you are going to have a function in the cloud and you are going to pay for each execution.
It is an event driven model, so if data is fed to for instance a AWS Lambda function this can invoke other functions in Python for example.&lt;/p&gt;

&lt;p&gt;Kenny concluded with a demo and recommended &lt;a href=&quot;#spring-cloud-functions&quot;&gt;Dave Syer’s Talk on Spring Cloud Functions&lt;/a&gt; for more info about serverless.&lt;/p&gt;

&lt;h1 id=&quot;spring-break-1&quot;&gt;Spring break&lt;/h1&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;Google Spanner&quot; src=&quot;/img/SpringIO2017/terras.jpg&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;9-new-in-spring-5-functional-web-framework&quot;&gt;9. New in Spring 5: Functional Web Framework&lt;/h1&gt;

&lt;h3 id=&quot;by-arjen-poutsma&quot;&gt;by &lt;a href=&quot;https://twitter.com/poutsma&quot; target=&quot;_blank&quot;&gt;Arjen Poutsma&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;In the keynote Andy Wilkinson and Stéphane Nicoll mentioned that the Spring framework and especially &lt;strong&gt;Spring Boot is all about providing choices to developers&lt;/strong&gt;.
The framework provides us with tools to tackle problems in multiple ways. 
In the light of this, starting from Spring 5 there will be a new functional alternative to handle incoming web requests.&lt;/p&gt;

&lt;p&gt;This new functional web library is an alternative to annotation driven approach that is broadly applied in current applications.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Arjen Poutsma states that some people are not happy with magic that happens behind the scenes when you use annotations like &lt;code class=&quot;highlighter-rouge&quot;&gt;@RequestMapping&lt;/code&gt; or the newer &lt;code class=&quot;highlighter-rouge&quot;&gt;@GetMapping&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was one of the reasons that made Spring develop this new library.&lt;/p&gt;

&lt;p&gt;In the next sections we show a quick introduction to what was shown at Spring IO about what this new framework has to offer.&lt;/p&gt;

&lt;h4 id=&quot;handler-function-example&quot;&gt;Handler function example&lt;/h4&gt;

&lt;p&gt;The following UserHandler class is the replacement of the Controller class that we would have annotated in the regular web framework. 
In this new functional style the way we handle requests is a bit different.
We define functions that have a ServerRequest as parameter and we return a Mono with a ServerResponse.&lt;/p&gt;

&lt;p&gt;The request contains all the information we need.
It contains the body of the request, pathvariables, request headers, …
So no more injecting pathvariables and body objects, we have everything we need in this ServerRequest.&lt;/p&gt;

&lt;p&gt;What we return is the ServerResponse in which we can easily put all the information we want to give back to the client.
And Spring provides us with an easy builder to create such a response as it already did with the ResponseEntity builder.&lt;/p&gt;

&lt;p&gt;You can see that these new objects and builders provide us with an easy and declarative way to handle requests and create responses, without the “magic” that we used previously with the annotations.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notFound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userMono&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userMono&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;switchIfEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have defined how we want to handle requests and how we translate it to a response.
What we need next, is a way to say which requests will be handled by which handler function.&lt;/p&gt;

&lt;p&gt;In Spring MVC, this was done by adding an annotation that declared some parameters, for example, to couple a request path to a controller method.
The functional web framework does this by creating &lt;code class=&quot;highlighter-rouge&quot;&gt;RouterFunctions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This RouterFunction is a function that takes a &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerRequest&lt;/code&gt; and returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&amp;lt;HandlerFunction&amp;gt;&lt;/code&gt;. 
To choose which requests get handled by which HandlerFunction, Spring again provides us with some builder functions.&lt;/p&gt;

&lt;p&gt;That way we can easily bind the handlers we just created with a path as shown in the next code example.&lt;/p&gt;

&lt;h4 id=&quot;router-example&quot;&gt;Router example&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RouterFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;routingFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PersonHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PersonHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/person&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;nest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;handler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andRoute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;handler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listPeople&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andRoute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;handler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;creating-a-tomcat-server&quot;&gt;Creating a Tomcat server&lt;/h4&gt;

&lt;p&gt;Now that we have declared which routes are handled by which functions we have to let our server know this.
In the next code example we show how to create a Tomcat server and how to bind the &lt;code class=&quot;highlighter-rouge&quot;&gt;RouterFunction&lt;/code&gt; to our server.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startTomcatServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifecycleException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RouterFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routingFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toHttpHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;Tomcat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tomcatServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tomcat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tomcatServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tomcatServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tomcatServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java.io.tmpdir&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ServletHttpHandlerAdapter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletHttpHandlerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Tomcat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;httpHandlerServlet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rootContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addServletMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;httpHandlerServlet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tomcatServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then in the main method we only have to start our Tomcat server and we’re up and running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startTomcatServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;conclusion-1&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;The new functional web framework gives us a more declarative and functional way to create a server and handle web requests. 
In my opinion this code is a lot clearer because you have a direct link between routing and handling requests.&lt;/p&gt;

&lt;p&gt;This code may also be easer to test than the annotation driven web request handling because we don’t necessarily need to fire up our spring context to test the routing.
We can just create a unit test for our RouterFunction and verify our routes are correct.&lt;/p&gt;

&lt;p&gt;What I do still wonder about is how this integrates with Spring security.
How can we define which users can access which handler.
Do we still do this with annotations or will we get a new way to do this as well?&lt;/p&gt;

&lt;p&gt;The Spring functional web framework is an interesting new development and we will be following it closely to see how we can use it in our new projects.&lt;/p&gt;

&lt;h1 id=&quot;spring-break-2&quot;&gt;Spring break&lt;/h1&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;Google Spanner&quot; src=&quot;/img/SpringIO2017/SpringIO2017group.jpg&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;10-spring-auto-rest-docs&quot;&gt;10. Spring Auto REST Docs&lt;/h1&gt;

&lt;h3 id=&quot;by-florian-benz&quot;&gt;by &lt;a href=&quot;https://twitter.com/flbenz&quot; target=&quot;_blank&quot;&gt;Florian Benz&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Spring Auto REST Docs is an extension on Spring REST Docs (&lt;strong&gt;our post on Spring REST Docs can be found &lt;a href=&quot;https://ordina-jworks.github.io/conference/2016/06/30/SpringIO16-Spring-Rest-Docs.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;).
This extension helps you to write even less code by including your Javadoc into the Spring REST Docs.&lt;/p&gt;

&lt;p&gt;For a more detailed overview on what is possible and how to start using this extension, please visit the official documentation &lt;a href=&quot;https://scacap.github.io/spring-auto-restdocs/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Imagine you have the following method in your controller:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ItemResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;searchItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;per_page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per_page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With the following POJO:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the test that generates Spring REST Docs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/users?page=2&amp;amp;per_page=100&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;requestParameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;parameterWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The page to retrieve&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;parameterWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;per_page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Entries per page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;responseFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The user's unique database identifier.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The user's first name.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fieldWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The user's last name.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When using Spring Auto REST Docs, this could be replaced by adding &lt;strong&gt;Javadoc&lt;/strong&gt; to the method in the controller:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * @param page The page to retrieve
 * @param per_page Entries per page
 */&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ItemResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;searchItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;per_page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per_page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And adding Javadoc to the POJO fields:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
    * The user's unique database identifier.
    */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@NotBlank&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/**
    * The user's first name.
    */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/**
    * The user's last name.
    */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then removing the &lt;code class=&quot;highlighter-rouge&quot;&gt;requestParameters&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;responseFields&lt;/code&gt; from the test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/users?page=2&amp;amp;per_page=100&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You notice that I added the annotations &lt;code class=&quot;highlighter-rouge&quot;&gt;@NotBlank&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@Size&lt;/code&gt; in the POJO, these annotations will also be reflected in the resulting documentation.
You could also create your own annotations.&lt;/p&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Path&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Optional&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;username&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;The user’s unique database identifier.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;firstName&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;The user’s first name. Size must be between 0 and 20 inclusive.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lastName&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;The user’s last name. Size must be between 0 and 50 inclusive.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Because the description of the POJO is now added on field level, it is guaranteed that this description will be the same everywhere this field is used, meaning less maintenance is needed.&lt;/p&gt;

&lt;h1 id=&quot;11-references&quot;&gt;11. References&lt;/h1&gt;

&lt;h3 id=&quot;youtube-playlist&quot;&gt;Youtube Playlist&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=uJSYnqIhcIo&amp;amp;list=PLe6FX2SlkJdSkg3C_H_x9jzMqh1mrbNoJ&quot; target=&quot;_blank&quot;&gt;All the talks of Spring IO 2017 are available on Youtube&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;talks-day-one&quot;&gt;Talks: Day One&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Topic&lt;/th&gt;
      &lt;th&gt;Presenter(s)&lt;/th&gt;
      &lt;th&gt;Resource(s)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;KEYNOTE - The Only Constant Is Change&lt;/td&gt;
      &lt;td&gt;Stéphane Nicoll, Andy Wilkinson&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/snicoll-demos/demo-webflux-streaming&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Reactor 3, the reactive foundation for Java 8 (and Spring 5)&lt;/td&gt;
      &lt;td&gt;Simon Baslé&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://speakerdeck.com/simonbasle/reactor-3&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Architecture Deep Dive in Spring Security&lt;/td&gt;
      &lt;td&gt;Joe Grandja&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;The Spring ecosystem in 50 minutes&lt;/td&gt;
      &lt;td&gt;Jeroen Sterken&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.slideshare.net/JeroenSterken1/the-spring-ecosystem-in-50-min&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bootiful Development with Spring Boot and Angular [WORKSHOP]&lt;/td&gt;
      &lt;td&gt;Matt Raible&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://speakerdeck.com/mraible/bootiful-development-with-spring-boot-and-angular-spring-io-2017&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Boot at AliExpress&lt;/td&gt;
      &lt;td&gt;Juven Xu&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.slideshare.net/juvenxu/aliexpress-way-to-microservices-microxchg-2017&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Database centric applications with Spring Boot and jOOQ&lt;/td&gt;
      &lt;td&gt;Michael Simons&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/michael-simons/bootiful-databases&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Testing for Unicorns&lt;/td&gt;
      &lt;td&gt;Alex Soto&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.slideshare.net/asotobu/testing-for-unicorns-77069262&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Front Ends for Back End Developers&lt;/td&gt;
      &lt;td&gt;Matt Raible&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://speakerdeck.com/mraible/front-ends-for-back-end-developers-spring-io-2017&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;The Beginner’s Guide To Spring Cloud&lt;/td&gt;
      &lt;td&gt;Ryan Baxter&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://speakerdeck.com/ryanjbaxter/beginners-guide-to-spring-cloud&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microservices, but what about the UI&lt;/td&gt;
      &lt;td&gt;Marten Deinum&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Making the most of Spring boot: adapt to your environment! [WORKSHOP]&lt;/td&gt;
      &lt;td&gt;Arjan Jorritsma, Erwin Hoeckx&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;New in Spring 5: Functional Web Framework&lt;/td&gt;
      &lt;td&gt;Arjen Poutsma&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/poutsma/web-function-sample&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Deep Learning with DeepLearning4J and Spring Boot&lt;/td&gt;
      &lt;td&gt;Artur Garcia, Dimas Cabré&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Easily secure and add Identity Management to your Spring(Boot) applications&lt;/td&gt;
      &lt;td&gt;Sébastien Blanc&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;The Future of Event-driven Microservices with Spring Cloud Stream&lt;/td&gt;
      &lt;td&gt;Kenny Bastani&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/kbastani/event-stream-processing-microservices&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Container orchestration on Apache Mesos - DC/OS for Spring Boot devs&lt;/td&gt;
      &lt;td&gt;Johannes Unterstein&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Building Spring boot + Angular4 apps in minutes with JHipster&lt;/td&gt;
      &lt;td&gt;Deepu K Sasidharan&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hands-on reactive applications with Spring Framework 5 [WORKSHOP]&lt;/td&gt;
      &lt;td&gt;Brian Clozel, Violeta Georgieva&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/bclozel/webflux-workshop&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DDD Strategic Design with Spring Boot&lt;/td&gt;
      &lt;td&gt;Michael Plöd&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mploed/ddd-strategic-design-spring-boot&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Awesome Tools to Level Up Your Spring Cloud Architecture&lt;/td&gt;
      &lt;td&gt;Andreas Evers&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.slideshare.net/AndreasEvers1/awesome-tools-to-level-up-your-spring-cloud-architecture-spring-io-2017&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Surviving in a Microservices Team&lt;/td&gt;
      &lt;td&gt;Steve Pember&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.slideshare.net/StevePember/surviving-in-a-microservices-environment&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;talks-day-two&quot;&gt;Talks: Day Two&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Topic&lt;/th&gt;
      &lt;th&gt;Presenter(s)&lt;/th&gt;
      &lt;th&gt;Resource(s)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Reactive Spring&lt;/td&gt;
      &lt;td&gt;Mark Heckler, Josh Long&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/joshlong/flux-flix-service&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spanner - a fully managed horizontally scalable relational database with ACID transactions that speaks SQL&lt;/td&gt;
      &lt;td&gt;Robert Kubis&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Reactive Spring UI’s for business&lt;/td&gt;
      &lt;td&gt;Risto Yrjänä&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hands-on reactive applications with Spring Framework 5 [WORKSHOP]&lt;/td&gt;
      &lt;td&gt;Brian Clozel, Violeta Georgieva&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/bclozel/webflux-workshop&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Data Processing With Microservices&lt;/td&gt;
      &lt;td&gt;Michael T Minella&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mminella/data-microservices&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Protection and Verification of Security Design Flaws&lt;/td&gt;
      &lt;td&gt;Marcus Pinto, Roberto Velasco&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Experiences from using discovery services in a microservice landscape&lt;/td&gt;
      &lt;td&gt;Magnus Larsson&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Harnessing the Power of Spark &amp;amp; Cassandra within your Spring App&lt;/td&gt;
      &lt;td&gt;Steve Pember&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/spember/spark-cass-spring-demo&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;It’s a kind of magic: under the covers of Spring Boot&lt;/td&gt;
      &lt;td&gt;Andy Wilkinson, Stéphane Nicoll&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Introducing Spring Auto REST Docs&lt;/td&gt;
      &lt;td&gt;Florian Benz&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.slideshare.net/fbenz/introducing-spring-auto-rest-docs&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Leveraging Domain Events in your Spring Boot Microservices [WORKSHOP]&lt;/td&gt;
      &lt;td&gt;Michael Plöd&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mploed/event-driven-spring-boot&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Functional web applications with Spring and Kotlin&lt;/td&gt;
      &lt;td&gt;Sébastien Deleuze&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://speakerdeck.com/sdeleuze/functional-web-applications-with-spring-and-kotlin&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Setting up a scalable CI platform with jenkins, docker and rancher in 50 minutes&lt;/td&gt;
      &lt;td&gt;Wolfgang Brauneis, Rainer Burgstaller&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/rburgst/rancherci-presentation&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/rburgst/rancherci-seedjob&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/rburgst/rancherci-demoapp&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;The Road to Serverless: Functions as Applications&lt;/td&gt;
      &lt;td&gt;Dave Syer&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://presos.dsyer.com/decks/road-to-serverless.html&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/dsyer/spring-cloud-function&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TDD with Spring Boot - Testing the Harder Stuff&lt;/td&gt;
      &lt;td&gt;Sannidhi Jalukar&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Splitting component containers to simplify dependencies&lt;/td&gt;
      &lt;td&gt;Eugene Petrenko&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1CRjAKdQEvVNi9JzuudEKlnncJffKi5k8Lw0J335IYMk/edit?usp=sharing&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Build complex Spring Boot microservices architecture using JHipster [WORKSHOP]&lt;/td&gt;
      &lt;td&gt;Deepu K Sasidharan&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://deepu.js.org/jh-slides-springio-2017/index-ms.html&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Caching Made Bootiful&lt;/td&gt;
      &lt;td&gt;Neil Stevenson&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/neilstevenson/springIO2017&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Getting Thymeleaf ready for Spring 5 and Reactive&lt;/td&gt;
      &lt;td&gt;Daniel Fernández&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://speakerdeck.com/dfernandez/o-2017-getting-thymeleaf-ready-for-spring-5-and-reactive&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/danielfernandez/reactive-matchday&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Developing a Spring Boot Starter for distributed logging&lt;/td&gt;
      &lt;td&gt;Carlos Barragan&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Reactive Meets Data Access&lt;/td&gt;
      &lt;td&gt;Christoph Strobl&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/christophstrobl/spring-data-reactive-demo&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Building on spring boot lastminute.com microservices way&lt;/td&gt;
      &lt;td&gt;Luca Viola, Michele Orsi&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Growing Spring-based commons, lessons learned&lt;/td&gt;
      &lt;td&gt;Piotr Betkier&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CQRS with Spring Cloud Stream [WORKSHOP]&lt;/td&gt;
      &lt;td&gt;Jakub Pilimon&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Develop and Run your Spring Boot application on Google App Engine Flexible&lt;/td&gt;
      &lt;td&gt;Rafael Sánchez&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://codelabs.developers.google.com/codelabs/cloud-app-engine-springboot/#0&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-code.png&quot; alt=&quot;code&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Manage distributed configuration and secrets with Spring Cloud and Vault&lt;/td&gt;
      &lt;td&gt;Andreas Falk&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.slideshare.net/AndreasFalk2/manage-distributed-configuration-and-secrets-with-spring-cloud-and-vault-spring-io-2017&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;From Zero to Open Source Hero: Contributing to Spring projects&lt;/td&gt;
      &lt;td&gt;Vedran Pavic&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://speakerdeck.com/vpavic/from-zero-to-open-source-hero-contributing-to-spring-projects-1&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/SpringIO2017/icon-presentation.png&quot; alt=&quot;presentation&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Dieter&quot;, &quot;last_name&quot;=&gt;&quot;Hubau&quot;, &quot;github&quot;=&gt;&quot;Turbots&quot;, &quot;twitter&quot;=&gt;&quot;dhubau&quot;, &quot;linkedin&quot;=&gt;&quot;dhubau&quot;, &quot;permalink&quot;=&gt;&quot;/author/dieter-hubau/&quot;, &quot;avatar&quot;=&gt;&quot;dieter-hubau.png&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Cloud and PaaS&quot;, &quot;email&quot;=&gt;&quot;dieter.hubau@ordina.be&quot;, &quot;phone&quot;=&gt;&quot;0032478458150&quot;, &quot;bio&quot;=&gt;&quot;Dieter is a Principal Java Consultant at Ordina, passionate about all Java- and JavaScript related technologies. Aside from his day-to-day occupation as a consultant, he helps fellow developers as a Competence Leader for the Cloud &amp;amp; PaaS Competence Center by giving workshops, talks and courses about the newest technologies. In his spare time, Dieter enjoys playing soccer, running, (online) gaming and fiddling around with all kinds of fancy new software.&quot;}</name><email>dieter.hubau@ordina.be</email></author><category term="Spring" /><category term="Spring" /><category term="IO" /><category term="Pivotal" /><category term="Google" /><category term="Spring Boot" /><category term="Java" /><category term="Reactive" /><category term="Reactor" /><category term="DDD" /><category term="CQRS" /><category term="Spring Cloud" /><category term="Spring Cloud Stream" /><category term="Serverless" /><summary type="html">On the 18th and 19th of May, we had another great edition of Spring I/O, brought to us by organizer Sergi Almar. In this blog post, we will go over some of our favourite sessions of the conference.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/springio2017.jpg" /></entry><entry><title type="html">OpenShift: An introduction</title><link href="https://ordina-jworks.github.io/paas/2017/06/29/Openshift-an-introduction.html" rel="alternate" type="text/html" title="OpenShift: An introduction" /><published>2017-06-29T00:00:00+00:00</published><updated>2017-06-29T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/paas/2017/06/29/Openshift-an-introduction</id><content type="html" xml:base="https://ordina-jworks.github.io/paas/2017/06/29/Openshift-an-introduction.html">&lt;div class=&quot;col-md-2&quot; style=&quot;width:32%&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;PaaS&quot; src=&quot;/img/openshift-an-introduction/Ease-of-PaaS.png&quot; /&gt;
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;h1 id=&quot;why-my-first-blog-about-openshift&quot;&gt;Why my first blog about OpenShift&lt;/h1&gt;
&lt;p&gt;When I started as a developer, the cloud ecosystem started expanding and became the next big thing.
So obviously I wanted to see what all the fuzz was about and started taking a deeper look at it.
Soon, I got introduced with so many new technologies I was not familiar with: microservices, containers, pods, Kubernetes, load balancing, Docker, PaaS,…&lt;/p&gt;

&lt;p&gt;To be honest, for me it was really overwhelming.
I told myself, I would never have the time to become a guru in all these technologies to start with cloud native development.
So I just sat in a corner crying about why I became a dev in a time where things never looked more complicated and changed faster than ever before.
But actually it’s not all that complicated.
To be honest, deploying your containers in the cloud and managing things are easier than ever before with PaaS and OpenShift.&lt;/p&gt;

&lt;p&gt;A couple of months ago, I got introduced to OpenShift and got really excited about it!
Recently, Ordina gave me the chance to visit the &lt;a href=&quot;https://www.redhat.com/en/about/events/red-hat-partner-conference-emea-2017&quot;&gt;Red Hat’s partner conference&lt;/a&gt; and my excitement for OpenShift reached new heights.
With my body being unable to contain all that excitement for OpenShift, I had to funnel it into a blog post or otherwise I would spontaneously combust.&lt;/p&gt;

&lt;p&gt;I do have to mention that if you want to work with OpenShift, you still need to have a basic understanding about containers, PaaS and Kubernetes if you want to understand some of its magic.
If you have no idea what Docker containers are or what Kubernetes is, don’t panic! There are some great blogposts on the JWorks blog explaining more about them.&lt;/p&gt;

&lt;h1 id=&quot;what-is-openshift&quot;&gt;What is OpenShift&lt;/h1&gt;

&lt;p&gt;OpenShift is a &lt;strong&gt;PaaS&lt;/strong&gt;. For those who don’t know what a PAAS is, stop reading now, take a timecab to the year 2011 and check it out because PaaS is awesome.&lt;/p&gt;

&lt;p&gt;Gartner calls OpenShift a &lt;strong&gt;Cloud Enabled Application Platform (CEAP)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For those who are not sure anymore, here is a quick reminder.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Platform as a service (PaaS)&lt;/strong&gt; or application platform as a service (aPaaS) is a category of cloud computing services that provides a platform allowing customers to develop, run, and manage applications without the complexity of building and maintaining the infrastructure typically associated with developing and launching an app&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are multiple PaaS providers available.
For example, you have OpenShift, Cloudfoundry, Heroku, Google App Engine and more.
Most of these platforms offer a lot of the same solutions, each with their own pros and cons, but today we are going talk about OpenShift specifically.&lt;/p&gt;

&lt;p&gt;When I look up OpenShift in Google (since that’s the first thing we do these days), it gives me the following explanation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;OpenShift Container Platform&lt;/strong&gt; (formerly known as OpenShift Enterprise) is Red Hat’s on-premise private platform as a service product, built around a core of application containers powered by Docker, with orchestration and management provided by Kubernetes, on a foundation of Red Hat Enterprise Linux.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well that explains it!
I never thought writing my first blog post would be that easy!
Obviously you wouldn’t be reading this blog post if this was my only explanation since my pull request would never be accepted.&lt;/p&gt;

&lt;p&gt;If I would try to explain it with my own words to someone who never heard of OpenShift, I would define it like this.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;OpenShift container Platform&lt;/strong&gt; is a platform as a service you can deploy on a public, private or hybrid cloud that helps you deploy your applications with the use of Docker containers.
It is build on top of Kubernetes and gives you tools like a webconsole and CLI to manage features like load balancing and horizontal scaling. It simplifies operations and development for cloud native applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Okay, I know this is still pretty vague and it can do so much, so why don’t we simply start with seeing where OpenShift fits in.&lt;/p&gt;

&lt;p&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;evolve&quot; src=&quot;/img/openshift-an-introduction/evolve.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;As you can see in the image, the IT landscape has evolved a lot in recent years.
We now have DevOps, Microservices, Containers, Cloud and Kubernetes.
OpenShift combines all of those things in one platform you can easily manage.
So it actually fits right on top of all of that.&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;overview&quot; src=&quot;/img/openshift-an-introduction/overview.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;self-service&quot;&gt;SELF-SERVICE&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Self-service&quot; src=&quot;/img/openshift-an-introduction/self-service.png&quot; /&gt;&lt;/span&gt;
Developers can quickly and easily create applications and deploy them.
With &lt;a href=&quot;#benefits-for-developers&quot;&gt;S2I (Source-to-Image)&lt;/a&gt;, a developer can even deploy his code without needing to create a container first.
Operators can leverage placement and policy to orchestrate environments that meet their best practices.
It makes your development and operations work fluently together when combining them in a single platform.&lt;/p&gt;

&lt;h3 id=&quot;polyglot-multi-language&quot;&gt;POLYGLOT, MULTI-LANGUAGE&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;multilanguage&quot; src=&quot;/img/openshift-an-introduction/multilanguage.png&quot; /&gt;&lt;/span&gt;
Since it deploys Docker containers, it gives you the ability to run multiple languages, frameworks and databases on the same platform.
You can easily deploy microservices written in Java, Python or other languages.&lt;/p&gt;

&lt;h3 id=&quot;automation&quot;&gt;AUTOMATION&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;automation&quot; src=&quot;/img/openshift-an-introduction/automation.png&quot; /&gt;&lt;/span&gt;
&lt;strong&gt;Build automation:&lt;/strong&gt;
OpenShift automates the process of building new container images for all of your users.
It can run standard Docker builds based on the Dockerfiles you provide and it also provides a “Source-to-Image” feature which allows you to specify the source from which to generate your images.
This allows administrators to control a set of base or “builder images” and then users can layer on top of these.
The build source could be a Git location, it could also be a binary like a WAR/JAR file.
Users can also customize the build process and create their own S2I images.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deployment automation:&lt;/strong&gt;
OpenShift automates the deployment of application containers. It supports rolling deployments for multi-containers apps and allows you to roll back to an older version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continuous integration:&lt;/strong&gt;
It provides built-in continuous integration capabilities with Jenkins and can also tie into your existing CI solutions.The OpenShift Jenkins image can also be used to run your Jenkins masters and slaves on OpenShift.&lt;/p&gt;

&lt;h3 id=&quot;scale&quot;&gt;Scale&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;scale&quot; src=&quot;/img/openshift-an-introduction/scale.png&quot; /&gt;&lt;/span&gt;
When you want to start scaling your application, whether it’s from one replica to two or scale it to 2000 replicas, a lot of complexity is added.
OpenShift leverages the power of containers and an incredibly powerful orchestration engine to make that happen. Containers make sure that applications are packed up in their own space and are independent from the OS, this makes applications incredibly portable and hyper scalable. OpenShift’s orchestration layer, Google’s Kubernetes, automates the scheduling and replication of these containers meaning that they’re highly available and able to accommodate whatever your users can throw at it.
This means that your team spends less time in the weeds and keeping the lights on, and more time being innovative and productive.&lt;/p&gt;

&lt;h3 id=&quot;opensource&quot;&gt;Opensource&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;opensource&quot; src=&quot;/img/openshift-an-introduction/opensource.png&quot; /&gt;&lt;/span&gt;
There are multiple versions of OpenShift (spoiler: it’s going to be the next topic in this blog post) but they are all based on OpenShift Origin.
Origin provides an open source application container platform. 
All source code for the Origin project is available under the Apache License (Version 2.0) on &lt;a href=&quot;https://Github.com/OpenShift&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;openshift-landscape&quot;&gt;OpenShift landscape&lt;/h1&gt;

&lt;p&gt;There are a few different OpenShift releases depending on what you need.
As of this writing, the OpenShift landscape looks like this:&lt;/p&gt;

&lt;p&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;OpenShiftlandscape&quot; src=&quot;/img/openshift-an-introduction/openshiftlandscape.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;openshift-origin&quot;&gt;OpenShift Origin&lt;/h3&gt;
&lt;p&gt;It’s the upstream community project used in OpenShift Online, OpenShift dedicated and OpenShift container Platform.
It’s build around Docker and Kubernetes cluster management.
Origin is augmented by application lifecycle management functionality and DevOps tooling.
Origin updates as often as open source developers contribute via Git.
Sometimes as often as several times per week.
Here you get the new feature the quickest but at the cost of stability.&lt;/p&gt;

&lt;h3 id=&quot;openshift-container-platform&quot;&gt;OpenShift container platform&lt;/h3&gt;
&lt;p&gt;Formerly known as OpenShift Enterprise.
It’s the platform software to deploy and manage OpenShift on your own infrastructure of choice.
It integrates with Red Hat Enterprise Linux 6 and is tested via Red Hat’s QA process in order to offer a stable, supportable product with may be important for enterprises.&lt;/p&gt;

&lt;h3 id=&quot;openshift-dedicated&quot;&gt;OpenShift dedicated&lt;/h3&gt;
&lt;p&gt;OpenShift dedicated is the latest offering of OpenShift.
It’s OpenShift 3 hosted on AWS and maintained by Red Hat but it is dedicated to you&lt;/p&gt;

&lt;h3 id=&quot;openshift-online&quot;&gt;OpenShift online&lt;/h3&gt;
&lt;p&gt;OpenShift Online is managed by Red Hat’s OpenShift operations team, and quickstart templates enable developers to push code with one click, helping to avoid the intricacies of application provisioning.
You can view it as OpenShift delivered as a SaaS (Software as a Service)&lt;/p&gt;

&lt;h1 id=&quot;benefits-for-developers&quot;&gt;Benefits for developers&lt;/h1&gt;

&lt;p&gt;Before I show you how easy OpenShift is for a developer, let me quickly explain Source-to-Image (S2I).&lt;/p&gt;

&lt;p&gt;Let’s see how easy your life can be with the following image:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Source-to-Image (S2I)&lt;/strong&gt; is a toolkit and workflow that creates a deployable Docker image based on your source code and add it to the image registry. You don’t even need a Docker file anymore.It combines source code with a corresponding builder image from the integrated Docker registry&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So now that you know S2I, let’s take a look at the next picture&lt;/p&gt;
&lt;p&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;devopsoverview&quot; src=&quot;/img/openshift-an-introduction/devopsoverview.jpg&quot; /&gt;
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;
If you’re a developer I assume you know how to code and push it to Git, so nothing new here…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Build:&lt;/strong&gt;
The developer can push code to be built and run on OpenShift through their software version control solution or OpenShift can be integrated with a developer’s own automated build and continuous integration/continuous deployment system. Here is were S2I can get useful.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Deploy:&lt;/strong&gt;
OpenShift orchestrates where application containers will run and manages the application to ensure it’s available for end users.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Manage:&lt;/strong&gt;
With your app running in the cloud you can monitor, debug, and tune on the fly.
Scale your application automatically or allocate capacity ahead of time
.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;a-deeper-look&quot;&gt;A deeper look&lt;/h1&gt;
&lt;p&gt;Time to get a little bit more technical and take a deeper look at how it works.
I already talked about the developer part of the picture below, so let’s focus on the rest!&lt;/p&gt;

&lt;p&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;deeperlook&quot; src=&quot;/img/openshift-an-introduction/deeperlook.svg&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;infrastructure&quot;&gt;Infrastructure&lt;/h3&gt;
&lt;p&gt;OpenShift runs on your choice of infrastructure (Physical, Virtual, Private, Public).
OpenShift uses a &lt;strong&gt;Software-Defined Networking (SDN)&lt;/strong&gt; approach to provide a unified cluster network that enables communication between pods across the OpenShift cluster.
This pod network is established and maintained by the OpenShift SDN, which configures an overlay network using &lt;strong&gt;Open vSwitch (OVS)&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;OVS-subnet&lt;/strong&gt; plug-in is the original plug-in which provides a “flat” pod network where every pod can communicate with every other pod and service.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The OVS-multitenant&lt;/strong&gt; plug-in provides OpenShift Enterprise project level isolation for pods and services. Each project receives a unique Virtual Network ID (VNID) that identifies traffic from pods assigned to the project. 
Pods from different projects cannot send packets to or receive packets from pods and services of a different project.
However, projects which receive VNID 0 are more privileged in that they are allowed to communicate with all other pods, and all other pods can communicate with them.
In OpenShift Enterprise clusters, the default project has VNID 0.
This facilitates certain services to communicate with all other pods in the cluster and vice versa.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nodes&quot;&gt;Nodes&lt;/h3&gt;
&lt;p&gt;A node provides the runtime environment for containers.
Each node in a Kubernetes cluster has the required services to be managed by the master. 
OpenShift creates nodes from a cloud provider, physical systems, or virtual systems.
Kubernetes interacts with node objects that are a representation of those nodes.
A node is ignored until it passes the health checks, and the master continues checking nodes until they are valid.
In OpenShift nodes are instances of RHEL (Redhat Enterprise Linux).&lt;/p&gt;

&lt;h3 id=&quot;pods&quot;&gt;Pods&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img alt=&quot;pods&quot; src=&quot;/img/openshift-an-introduction/pods.png&quot; /&gt;&lt;/span&gt;
OpenShift leverages the Kubernetes concept of a pod, which is one or more containers deployed together on one host, and the smallest compute unit that can be defined, deployed, and managed.
Each pod is allocated its own internal IP address, therefore owning its entire port space, and containers within pods can share their local storage and networking.
Pods have a lifecycle; they are defined, then they are assigned to run on a node, then they run until their container(s) exit or they are removed for some other reason.
OpenShift treats pods as largely immutable, changes cannot be made to a pod definition while it is running.
It implements changes by terminating an existing pod and recreating it with modified configuration, base image(s), or both. Pods are also treated as expendable, and do not maintain state when recreated.&lt;/p&gt;

&lt;h3 id=&quot;registry&quot;&gt;Registry&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Integrated OpenShift Container Registry:&lt;/strong&gt;
OpenShift Origin provides an integrated container registry called OpenShift Container Registry (OCR) that adds the ability to automatically provision new image repositories on demand.
This provides users with a built-in location for their application builds to push the resulting images.
Whenever a new image is pushed to OCR, the registry notifies OpenShift about the new image, passing along all the information about it, such as the namespace, name, and image metadata.
Different pieces of OpenShift react to new images, creating new builds and deployments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Party Registries:&lt;/strong&gt;
OpenShift Origin can create containers using images from third party registries, but it is unlikely that these registries offer the same image notification support as the integrated OpenShift Origin registry.
In this situation OpenShift Origin will fetch tags from the remote registry upon imagestream creation.&lt;/p&gt;

&lt;h3 id=&quot;master&quot;&gt;Master&lt;/h3&gt;
&lt;p&gt;Managing &lt;strong&gt;data storage&lt;/strong&gt; is a distinct problem from managing compute resources.
OpenShift leverages the Kubernetes PersistentVolume subsystem, which provides an &lt;strong&gt;API&lt;/strong&gt; for users and administrators that abstracts details of how storage is provided from how it is consumed.
The Kubernetes pod &lt;strong&gt;scheduler&lt;/strong&gt; is responsible for determining placement of new pods onto nodes within the cluster.
It reads data from the pod and tries to find a node that is a good fit based on configured policies.
The &lt;strong&gt;Management/Replication controller&lt;/strong&gt; manages the lifecycle of pods.
For instance when you deploy a new version of your application and create a new pod, OpenShift can wait until the new pod is fully functional before downscaling the old pod leading to no downtime.
&lt;strong&gt;But what if the master node goes down? That’s no high availability …&lt;/strong&gt; 
You can optionally configure your masters for high availability to ensure that the cluster has no single point of failure.&lt;/p&gt;

&lt;h3 id=&quot;service-layer&quot;&gt;Service layer&lt;/h3&gt;
&lt;p&gt;On top of the domain and persistence layer sits the service layer of the application.
A Kubernetes service can serve as an internal load balancer.
It identifies a set of replicated pods in order to proxy the connections it receives to them.
Backing pods can be added to or removed from a service arbitrarily while the service remains consistently available, enabling anything that depends on the service to refer to it at a consistent internal address.&lt;/p&gt;

&lt;h3 id=&quot;persistant-storage&quot;&gt;Persistant storage&lt;/h3&gt;
&lt;p&gt;Managing storage is a distinct problem from managing compute resources. 
OpenShift Origin leverages the &lt;strong&gt;Kubernetes Persistent Volume (PV)&lt;/strong&gt; framework to allow administrators to provision persistent storage for a cluster.
Using &lt;strong&gt;Persistent Volume Claims (PVCs)&lt;/strong&gt;, developers can request PV resources without having specific knowledge of the underlying storage infrastructure.
PVCs are specific to a project and are created and used by developers as a means to use a PV.
PV resources on their own are not scoped to any single project; they can be shared across the entire OpenShift Origin cluster and claimed from any project.
After a PV has been bound to a PVC, however, that PV cannot then be bound to additional PVCs. 
This has the effect of scoping a bound PV to a single namespace (that of the binding project).&lt;/p&gt;

&lt;h1 id=&quot;openshiftio&quot;&gt;OpenShift.io&lt;/h1&gt;
&lt;p&gt;So before ending this blog post, I have to quickly mention &lt;a href=&quot;https://OpenShift.io/&quot;&gt;OpenShift.io&lt;/a&gt;.
As of this moment, it’s not yet available but you can try to register for the preview.
I haven’t had the chance to play with it, as I haven’t received my access just yet.
Basically it’s an online development environment for planning, creating and deploying hybrid cloud services.&lt;/p&gt;

&lt;p&gt;It provides the following features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hosted, integrated toolchain&lt;/li&gt;
  &lt;li&gt;Planning tools for managing and prioritizing work&lt;/li&gt;
  &lt;li&gt;Code editing and debugging tools built on Eclipse Che&lt;/li&gt;
  &lt;li&gt;Integrated and automated CI/CD pipelines&lt;/li&gt;
  &lt;li&gt;Dashboards and reporting tools&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Of course there is so much more to tell you and show about PaaS and OpenShift.
I hope that with this post you got a nice introduction to OpenShift itself and some of the benefits it offers.
If you enjoyed the post, I intend to write another post later this year about OpenShift, so make sure to regularly check our JWorks blog!&lt;/p&gt;

&lt;p&gt;May the PaaS be with you.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Hans&quot;, &quot;last_name&quot;=&gt;&quot;Michiels&quot;, &quot;permalink&quot;=&gt;&quot;/author/hans-michiels/&quot;, &quot;avatar&quot;=&gt;&quot;hans-michiels.png&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;email&quot;=&gt;&quot;hans.michiels@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Hans is a Java Developer at Ordina Belgium. He is passionate about learning new innovative technologies and basically all nerd related stuff.&quot;}</name><email>hans.michiels@ordina.be</email></author><category term="PaaS" /><category term="OpenShift" /><category term="PaaS" /><category term="Cloud" /><category term="Container" /><category term="DevOps" /><category term="Kubernetes" /><category term="CaaS" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/Openshift.png" /></entry><entry><title type="html">Pragmatic Architecture, Today</title><link href="https://ordina-jworks.github.io/architecture/2017/06/21/pragmatic-architecture-today.html" rel="alternate" type="text/html" title="Pragmatic Architecture, Today" /><published>2017-06-21T00:00:00+00:00</published><updated>2017-06-21T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2017/06/21/pragmatic-architecture-today</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2017/06/21/pragmatic-architecture-today.html">&lt;p&gt;Software development has evolved. 
Agile is now the de facto standard. 
The role of an architect in an agile project is very different from the typical role in a more classic waterfall approach. 
This article presents an updated interpretation of &lt;em&gt;viewpoints and perspectives&lt;/em&gt; and will demonstrate how to make rapid, agile delivery sustainable in a constantly changing world. 
These viewpoints and perspectives can be linked to easy-to-produce models that can be used immediately. 
A good agile architect needs to strive for consensus and buy-in.&lt;/p&gt;

&lt;h3 id=&quot;content&quot;&gt;Content&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#1-what&quot;&gt;What?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-why&quot;&gt;Why?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-how&quot;&gt;How?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;what&quot;&gt;What?&lt;/h1&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;  &lt;img class=&quot;image fit&quot; alt=&quot;What&quot; src=&quot;/img/prag-arch/what.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Architecture exists, because we want to create a &lt;strong&gt;system&lt;/strong&gt;. 
A system is the combination of all the different components that together define an application.
These components can be loosely coupled, eg. using Microservices; it can be a monolithic application or any other combination of runtime components that fulfill certain business needs.
This is a different scope than a system of systems.
That would be the goal of Enterprise Architecture where the focus is on the strategic vision of an enterprise.&lt;/p&gt;

&lt;p&gt;A system is built for its stakeholders. 
And stakeholders are diverse: the customer (who is paying for the system), the users, the developers, … 
I believe, sharing a crystal-clear vision with these stakeholders and getting buy-in from them, is necessary to create a successful system.&lt;/p&gt;

&lt;p&gt;Every system has an architecture, even when it is not formally defined. 
The architecture of a system is typically described in an &lt;strong&gt;Architectural Description&lt;/strong&gt;.
The architectural description documents the system for the stakeholders and needs to make architectural decisions &lt;strong&gt;explicit&lt;/strong&gt;.
The goal of the architectural description is to help in understanding how the system will behave.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;Views and Perspecives&quot; src=&quot;/img/prag-arch/views-and-perspectives.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Following the approach in the book &lt;a href=&quot;http://www.viewpoints-and-perspectives.info/&quot;&gt;Software Systems Architecture&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/nickrozanski&quot;&gt;Nick Rozanski&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/eoinwoodz&quot;&gt;Eoin Woods&lt;/a&gt;, an architectural description is composed of a number views.
These &lt;em&gt;views&lt;/em&gt; describe what is architecturally significant: info that is worth writing down because the system can not be successful without it or because stakeholders say it is significant.
Deciding what to put in these views, means making decisions.
Woods and Rozanski identified the following viewpoints:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Context View&lt;/li&gt;
  &lt;li&gt;Functional View&lt;/li&gt;
  &lt;li&gt;Information View&lt;/li&gt;
  &lt;li&gt;Concurrency View&lt;/li&gt;
  &lt;li&gt;Development View&lt;/li&gt;
  &lt;li&gt;Deployment View&lt;/li&gt;
  &lt;li&gt;Operational View&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These viewpoints will assist in the writing of an architectural description.
The &lt;a href=&quot;http://www.viewpoints-and-perspectives.info/&quot;&gt;website&lt;/a&gt; of the book contains a nice summary of these viewpoints.&lt;/p&gt;

&lt;p&gt;The views are shaped by &lt;em&gt;perspectives&lt;/em&gt;. 
These are the cross-cutting concerns that have an impact on the views. 
Sometimes perspectives are also called quality properties or non-functional requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Accessibility&lt;/li&gt;
  &lt;li&gt;Availability and Resilience&lt;/li&gt;
  &lt;li&gt;Development resource&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Evolution&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Internationalisation&lt;/li&gt;
  &lt;li&gt;Location&lt;/li&gt;
  &lt;li&gt;Performance and Scalability&lt;/li&gt;
  &lt;li&gt;Regulation&lt;/li&gt;
  &lt;li&gt;Security&lt;/li&gt;
  &lt;li&gt;Usability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, summaries are available on the website of the book.
If you want a more in-depth explanation, I really recommend reading the book.
In today’s agile world, I believe the &lt;strong&gt;Evolution perspective&lt;/strong&gt; is a key differentiator in any architectural description.
Generally, perspectives shape the architecture and deserve the necessary attention.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;Example&quot; src=&quot;/img/prag-arch/f1.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;This is the 2017 Mercedes F1 W08 Hybrid. 
It weights 702kg and has between 750 and 850 horsepower. 
It is made out of approximately 80.000 different components. 
The price of the car is an estimated 10 million Euro. 
That is just for the car, not for the R&amp;amp;D that made the car possible.&lt;/p&gt;

&lt;p&gt;Looking back at the viewpoints from above, it is easy to identify how these relate to the construction of the car:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Formula One car needs a very specific factory (&lt;em&gt;Development View&lt;/em&gt;).
It is not built in the same factory Mercedes builds its trucks.&lt;/li&gt;
  &lt;li&gt;The cars need to be transported all around the world (all the Formula One cars travel over 100.000 miles in the air).
This can be documented in the &lt;em&gt;Deployment view&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Maintaining a Formula One car during a race has a huge operational cost and requires a lot of coordination (&lt;em&gt;Operational View&lt;/em&gt;).
Just count the number of engineers during a pitstop.&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the 2015 and 2016 season, the predecessors of this car won the Formula One World Championship.
At the moment of writing, the 2017 car is also leading the championship.
This pattern is quite common in Formula One.
The older cars however, are currently up for display in a museum.
They are rarely used anymore.
This &lt;em&gt;throw-away&lt;/em&gt; approach can also be noticed when comparing to other industries like smartphones or smartwatches.
A lot of the success of the car, must be its architecture then.
More specifically, its &lt;strong&gt;ability to change&lt;/strong&gt;: to adapt to new rules, competitors and market change.
If the architecture of a system, has the ability to change, it immediately has a competitive advantage.
This is especially true in agile projects.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://nl.wikipedia.org/wiki/Grady_Booch&quot;&gt;Grady Booch&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;Architecture represents the significant design decisions that shape a system, where significant is measured by cost of change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Often, it is very difficult to get a system right from the beginning.
That is why creating a system, that has the ability to evolve, is important.
Things are changing all the time: &lt;strong&gt;known&lt;/strong&gt; change and &lt;strong&gt;unknown&lt;/strong&gt; change.
Within this evolving system, it is the responsibility of the software architect to make sure the system remains consistent.
Multiple architectural patterns exist to support this:
In the past, many systems were built with a configurable metamodel. 
Nowadays, loosely coupled, replaceable services are favoured.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;System Integrity&quot; src=&quot;/img/prag-arch/engine.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;When creating a 10 million Euro car, many teams (with different responsibilities) are involved.
The people who design the engine are different from the people who design the brakes.
Creating the best engine, creating the best brakes, … does not imply you will have the best car.
Everything needs to work together.
&lt;strong&gt;The integrity of the system is very important.&lt;/strong&gt;
This point is again proven by Formule One: other teams can buy the current Mercedes engine.
They might win some races, but they haven’t won the world championship&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Russell_L._Ackoff&quot;&gt;Russell L. Ackoff&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;A system is more than the sum of its parts; it is an indivisible whole. 
It loses its essential properties when it is taken apart.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To ensure system integrity, the software architect needs to be part of the project team.
He must make sure that he enables the right people to collaborate on the system architecture.
Being part of the team does not mean not taking &lt;strong&gt;responsibility&lt;/strong&gt;.
It is great to give &lt;strong&gt;ownership&lt;/strong&gt; to members of the team, but in the end, the architect needs to stay accountable.
When collaborating, an architect should not enforce all technical decisions.
Part of working as a team, is accepting to be challenged and embracing this challenge.
When team members have spirited discussions, it shows they are passionate enough about their craft to care.
Disagreeing and discussing alternatives is a great way to come to a better solution and to learn from each other.
Being part of the team, as an architect, will lead to a system with a consistent vision, where the implementation matches the architectural description.
This also implies that &lt;strong&gt;an architect should be involved in the codebase of the system&lt;/strong&gt;: writing code, performing code-reviews, doing proof-of-concepts, supporting others, …
By being involved in the codebase, you can make sure that the architectual description is understood by the developers.&lt;/p&gt;

&lt;h2 id=&quot;visual&quot;&gt;Visual?&lt;/h2&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;Visual&quot; src=&quot;/img/prag-arch/visual.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;While code is a very important asset of a working system, code alone is not enough to have an accurate and lasting description of a system.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://nl.wikipedia.org/wiki/Grady_Booch&quot;&gt;Grady Booch&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;One cannot see the ocean’s currents by studying drops of water.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The goal of visually representing a system, through the architectural description, is to make sure the architecture of the system is in the stakeholders’ heads.
The visual representation can be used to check for consistency, reporting, validation and &lt;strong&gt;sharing information&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;some-ground-rules&quot;&gt;Some ground rules&lt;/h3&gt;

&lt;p&gt;While UML has its merits, often it is not necessary to create an extensive UML model for the architecture.
It will be time-consuming and, unfortunately, it is often the case that UML is not correctly understood by stakeholders.
An alternative to UML is to use plain &lt;em&gt;boxes and lines&lt;/em&gt;.
However, when using boxes and lines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be consistent (especially when collaborating on the architecture).
Try to be consistent over multiple projects. 
Templates offer a good start, but not every architecture needs the same viewpoints.&lt;/li&gt;
  &lt;li&gt;Avoid mixed responsibilities.&lt;/li&gt;
  &lt;li&gt;Avoid fluffy diagrams. Documents should not be vague. They should be about one abstraction.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Always&lt;/strong&gt; provide a legend.
Explain what a certain line or box means. 
Don’t make stakeholders guess.&lt;/li&gt;
  &lt;li&gt;Don’t be afraid to add text to a diagram.&lt;/li&gt;
  &lt;li&gt;Don’t model what nobody needs. 
Eg. if you are not using a data store, do not create an &lt;em&gt;Information View&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Make sure your stakeholders understand what you are documenting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whatever your preferred visualisation approach is, keep a &lt;strong&gt;decision log&lt;/strong&gt;.
Document your decisions, the considered alternatives and the timing a decision was made.
Since the system will (very likely) evolve, a decision log will keep track of the reasoning behind a certain decisions.
Decisions might need to change, so keeping track of the rationale behind a decision is valuable.&lt;/p&gt;

&lt;h1 id=&quot;why&quot;&gt;Why?&lt;/h1&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;Why&quot; src=&quot;/img/prag-arch/why.jpg&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;up-front-design&quot;&gt;Up-front design&lt;/h3&gt;

&lt;p&gt;Some up-front design is necessary to start efficiently and to prevent too much rework.
This means thinking about the big picture:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Used technology&lt;/li&gt;
  &lt;li&gt;Automation&lt;/li&gt;
  &lt;li&gt;Architectural patterns&lt;/li&gt;
  &lt;li&gt;Layering&lt;/li&gt;
  &lt;li&gt;Evolution&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.codingthearchitecture.com/authors/sbrown/&quot;&gt;Simon Brown&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;Just enough up-front design to create firm foundations for the software product and its delivery.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But what does &lt;em&gt;just enough&lt;/em&gt; mean?
Just enough depends on a lot of variables like budget, scope, team, … 
The approach will also be different for greenfield projects or for existing projects.
When you are working on a &lt;strong&gt;greenfield project&lt;/strong&gt;, it is important to start with a &lt;strong&gt;high-level view&lt;/strong&gt; of all components in the application.
These components are all the pieces necessary for a system to operate.
Other components and details can be added later.
Working with &lt;strong&gt;existing systems&lt;/strong&gt; benefits from a slightly different approach, where you can start with an accurate high-level diagram of the &lt;strong&gt;current&lt;/strong&gt; architecture of the existing application.
Once this diagram is available, identify the &lt;strong&gt;domain-of-change&lt;/strong&gt; of the architecture: the reason people are working on the system.
On top of that, adding &lt;strong&gt;extension points&lt;/strong&gt; will enable evolvability.&lt;/p&gt;

&lt;h3 id=&quot;communication&quot;&gt;Communication&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;In the inception phase of a project, you will need to talk to all the different stakeholders and make sure that their desired product will be built.
Aligning requirements from different stakeholders, will often be a challenge.&lt;/li&gt;
  &lt;li&gt;In the implementation phase, it is important for the team to share a technical vision.
All team members need to collaborate to the same end-goal, which requires strong communication skills.
Including team members in defining the technical vision is useful to make sure everybody knows how they, individually, are contributing to the technical vision on a day-to-day basis.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;politics&quot;&gt;Politics&lt;/h3&gt;

&lt;p&gt;The architecture of a system will have a large impact on the implementation, delivery and usage of the system.
Systems generally consist of multiple parts and it is the responsibility of the architect to focus on system integrity, creating a system that has a built-in ability to respond to change.
When the system lacks integrity, it will rapidly become &lt;em&gt;a system nobody wants to touch&lt;/em&gt;.
Unfortunately many enterprises have this fear of change embedded in their culture and it will take strategy and sound people skills to prevent this from happening.
Influence Maps present an interesting way to map relationships between people and to visualise who influences who, in an enterprise.
Being aware of these relationships might be a game-changer.&lt;/p&gt;

&lt;h1 id=&quot;how&quot;&gt;How?&lt;/h1&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;How&quot; src=&quot;/img/prag-arch/how.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;One way of creating an architectural description is &lt;strong&gt;OODA&lt;/strong&gt;: Observe, Orient, Decide, Act.
OODA can be compared with PDCA, also known as the &lt;a href=&quot;https://www.isixsigma.com/dictionary/deming-cycle-pdca/&quot;&gt;&lt;em&gt;Deming Cycle&lt;/em&gt;&lt;/a&gt; or with Discovery Activities.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;OODA&quot; src=&quot;/img/prag-arch/ooda.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Any architectural model introduces abstraction and removes noise.
This model should be well-understood and feedback loops can help with this.
As an example, comparing a written down version with bullet points of a certain idea, will help in verifying that the message hasn’t changed.
This insight should be mapped on the model.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Observe&lt;/strong&gt;: Observing both external and internal circumstances or dependencies of your systems.
    &lt;ul&gt;
      &lt;li&gt;Collect up-to-date information from different sources: stakeholders, competitors, similar systems, other viewpoints,…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Orient&lt;/strong&gt;: Using your past experience to make sense of these observations.
    &lt;ul&gt;
      &lt;li&gt;Analyse the observed information and use it to update your current reality. View events, filtered through your own experiences and perceptions.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Decide&lt;/strong&gt;: Deciding on a response, because there might be multiple alternative solutions.
    &lt;ul&gt;
      &lt;li&gt;Determine a course of actions.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Act&lt;/strong&gt;: Execute the selected decision.
    &lt;ul&gt;
      &lt;li&gt;Follow through on your decision.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is not a linear process. 
This process benefits from &lt;strong&gt;continuous feedback loops&lt;/strong&gt;.
Feedback loops imply that certain decisions may lead to new observations etc.
The OODA process can be used as a means of creating an architectural description.
Consequently, significant decisions will become part of it.
Since the creation of (significant parts of) the architectural description, starts with &lt;em&gt;(runtime)&lt;/em&gt; observations, capturing data and measuring stakeholder value will help to achieve better observations of the system.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Bart&quot;, &quot;last_name&quot;=&gt;&quot;Blommaerts&quot;, &quot;avatar&quot;=&gt;&quot;bart-blommaerts.png&quot;, &quot;twitter&quot;=&gt;&quot;DaggieBe&quot;, &quot;linkedin&quot;=&gt;&quot;bartblommaerts&quot;, &quot;github&quot;=&gt;&quot;bart-blommaerts&quot;, &quot;permalink&quot;=&gt;&quot;/author/bart-blommaerts/&quot;, &quot;title&quot;=&gt;&quot;Software Architect&quot;, &quot;title2&quot;=&gt;&quot;Competence Manager Architecture&quot;, &quot;email&quot;=&gt;&quot;bart.blommaerts@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Bart Blommaerts is a passionate Software Architect at Ordina, who believes closing the model-code gap is essential to make rapid, agile delivery sustainable. Bart has a strong focus on API design, reuse, automation and security. He is always looking for technical challenges.&quot;}</name><email>bart.blommaerts@ordina.be</email></author><category term="Architecture" /><category term="Pragmatic" /><category term="Architecture" /><category term="Agile" /><category term="OODA" /><summary type="html">Software development has evolved. Agile is now the de facto standard. The role of an architect in an agile project is very different from the typical role in a more classic waterfall approach. This article presents an updated interpretation of viewpoints and perspectives and will demonstrate how to make rapid, agile delivery sustainable in a constantly changing world. These viewpoints and perspectives can be linked to easy-to-produce models that can be used immediately. A good agile architect needs to strive for consensus and buy-in.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/prag-arch/arch.png" /></entry><entry><title type="html">Creating a REST API with NodeJS, TypeScript and Koa.</title><link href="https://ordina-jworks.github.io/nodejs/2017/06/20/REST-api-NodeJS-koa.html" rel="alternate" type="text/html" title="Creating a REST API with NodeJS, TypeScript and Koa." /><published>2017-06-20T00:00:00+00:00</published><updated>2017-06-20T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/nodejs/2017/06/20/REST-api-NodeJS-koa</id><content type="html" xml:base="https://ordina-jworks.github.io/nodejs/2017/06/20/REST-api-NodeJS-koa.html">&lt;blockquote&gt;
  &lt;p&gt;This article assumes you already have some knowledge of npm and JavaScript development in general. It will not be a detailed tutorial about how to write a REST API, it’s more of an extra explanation for the application I made, the libraries I used and my experience with them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;why&quot;&gt;Why?&lt;/h1&gt;

&lt;p&gt;I started this little project because I wanted to be able to quickly write backends for small personal projects with little overhead. Coming from the Java backend world, I have been writing almost only JavaScript for close to 2 years now, but only frontend. I had tried NodeJS in the past for a small project with plain old JavaScript and had a very bad time. Now however, with my new experience in JavaScript, the arrival of ES6 and TypeScript, I wanted to give it another shot.&lt;/p&gt;

&lt;h1 id=&quot;what-exactly-did-i-make&quot;&gt;What exactly did I make?&lt;/h1&gt;

&lt;p&gt;The idea was to write a backend for an application called MovieListr. It’s a simple application to track movies you have watched or want to watch. The API allows you to create, delete, update and see movies and directors. A movie also has a one-to-one relation with a director.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ivarvh/movielistr-backend-ts-ioc&quot;&gt;You can find the code on Github.&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;

&lt;p&gt;Setting up a node project with TypeScript doesn’t require a lot of effort, the following commands are enough to get started.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;mkdir &amp;lt;project-name&amp;gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &amp;lt;project-name&amp;gt;
mkdir src
npm init //follow the setup
npm install &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; typescript tsc //install TypeScript and the TypeScript compiler
tsc &lt;span class=&quot;nt&quot;&gt;--init&lt;/span&gt; //generates a &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;tsconfig.json&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;, a config &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the TypeScript compiler&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is it, you still have to tinker with the tsconfig.json to get it to your liking, but after that you can just start writing code.&lt;/p&gt;

&lt;h1 id=&quot;using-async--await&quot;&gt;Using async / await&lt;/h1&gt;

&lt;p&gt;I want to start with talking about the async / await features. They were what really made this code so fast to write and easy to read. The async keyword marks a function that will always return a promise. The await keyword will automatically unwrap the value from the promise and continue the code when the promise has been resolved. A small example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;  
    &lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promiseFn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Old&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;way&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
 
    &lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asyncFn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;promiseFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ With async /&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt;
 
    &lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asyncFn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promiseFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see how readable it is with the async / await syntax. You can write asynchronous code in a synchronous way and I used it heavily everywhere in my code. I think this is one of the things that will really make writing JavaScript fun. No more callbacks, no more boilerplate code, just the important bits. For error handling you can rely on try catch statements to catch errors and act on them.&lt;/p&gt;

&lt;p&gt;To use the async / await syntax, you can have to add &lt;code class=&quot;highlighter-rouge&quot;&gt;esnext.asynciterable&lt;/code&gt; to the lib array in the &lt;code class=&quot;highlighter-rouge&quot;&gt;tsconfig.json&lt;/code&gt; file.&lt;/p&gt;

&lt;h1 id=&quot;the-libraries-i-used&quot;&gt;The libraries I used&lt;/h1&gt;

&lt;h3 id=&quot;koa&quot;&gt;Koa&lt;/h3&gt;

&lt;p&gt;Koa is a small node library to create REST APIs. It was made by the guys who created Express. It takes advantage of the new ES6 feature of generator functions and it allows you to write very readable code by using the async / await features (that are based on the generator functions). For a full understanding of koa and generator functions, I suggest the &lt;a href=&quot;https://www.pluralsight.com/courses/JavaScript-koa-introduction&quot;&gt;Koa course&lt;/a&gt; on Pluralsight from Hammarberg.&lt;/p&gt;

&lt;p&gt;Koa relies heavily on middleware, so for every “step” of the process we need middleware. For instance &lt;a href=&quot;https://github.com/koajs/bodyparser&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;koa-bodyparser&lt;/code&gt;&lt;/a&gt; middleware will parse the request body to json, the &lt;a href=&quot;https://github.com/koajs/logger&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;koa-logger&lt;/code&gt;&lt;/a&gt; middleware will log all the incoming requests and the &lt;a href=&quot;https://github.com/alexmingoia/koa-router&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;koa-router&lt;/code&gt;&lt;/a&gt; middleware will make it easy for us to configure the url mapping to certain actions. These middlewares are installed apart from the Koa framework or you can write them yourself.&lt;/p&gt;

&lt;h3 id=&quot;typescript-ioc&quot;&gt;typescript-ioc&lt;/h3&gt;

&lt;p&gt;To make testing easy, I started looking for a dependency injection framework for TypeScript. I wanted to more or less copy the way I wrote unit tests in Java, which is using dependency injection in your actual code and just creating an instance in your unit test while passing mocks instead of the dependencies. The first dependency injection framework I found, was &lt;a href=&quot;https://github.com/jeffijoe/awilix&quot;&gt;Awilix&lt;/a&gt;. I got Awilix to work, and it worked quite well, but there was still a lot of boilerplate code to write to actually register the services to the container and to get it working. You can also pass folder names so it will register all the services in that folder, but I didn’t find this optimal. I was also using Webpack in the beginning (which I write about later in the article) to build my application and bundle my code, by bundling the code, the paths of the folders obviously didn’t work out anymore in the compiled code, so Awilix was no good for me. I kept searching and I found the library typescript-ioc. This library was based on annotations, so there is barely any configuration overhead and it worked much more like I was used to in Java. typescript-ioc requires you to set experimentalDecorators and emitDecoratorMetadata to true in the tsconfig.json file. You can then just write code like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;  
    &lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;typescript-ioc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;	
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Inject&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;	
    
    	&lt;span class=&quot;nx&quot;&gt;doAnotherThing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doAnotherThing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;typeorm&quot;&gt;typeorm&lt;/h3&gt;

&lt;p&gt;At first I just saved the movies and directors in the services as an in-memory array for testing purposes, but in a real application you will want persistence of some sort, so I needed a database. I decided on a regular old MySQL database and an ORM library to do the mapping between the database records and my TypeScript model classes. For ORM I used &lt;a href=&quot;https://github.com/typeorm/typeorm&quot;&gt;typeorm&lt;/a&gt;. It’s pretty easy to use. It also uses the annotations like typescript-ioc, which makes code very readable. The experience with this library was more or less pain free, so I really recommend it. To check a real example from my repository, check the &lt;a href=&quot;https://github.com/ivarvh/movielistr-backend-ts-ioc/blob/master/src/models/Movie.ts&quot;&gt;Movie&lt;/a&gt; model.&lt;/p&gt;

&lt;h1 id=&quot;testing&quot;&gt;Testing&lt;/h1&gt;

&lt;h3 id=&quot;unit-testing&quot;&gt;Unit testing&lt;/h3&gt;

&lt;p&gt;For unit testing I used the classic combination of &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt;, &lt;a href=&quot;http://sinonjs.org/&quot;&gt;Sinon&lt;/a&gt; and &lt;a href=&quot;http://chaijs.com/&quot;&gt;Chai&lt;/a&gt;. Since I was using dependency injection, I also needed a good way of mocking my dependencies, for this I found &lt;a href=&quot;https://github.com/NagRock/ts-mockito&quot;&gt;ts-mockito&lt;/a&gt;. Ts-mockito is more or less a clone of the &lt;a href=&quot;http://site.mockito.org/&quot;&gt;Mockito&lt;/a&gt; library in Java. It allows you to create mocks of classes, make functions return certain values and verify that calls have been made. This made it super easy to write tests. For examples check the tests folder in my repository. To execute the TypeScript tests, I used &lt;a href=&quot;https://github.com/TypeStrong/ts-node&quot;&gt;ts-node&lt;/a&gt;. Ts-node compiles the TypeScript and keeps the compiled JavaScript in memory while it executes it. This way you don’t have to create an additional folder to compile the tests to and execute them. You can then easily create an npm script like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mocha -r ts-node/register test/**/*.spec.ts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This tells Mocha  to require the ts-node/register module (this is what the &lt;code class=&quot;highlighter-rouge&quot;&gt;-r ts-node/register&lt;/code&gt;) means and then it just passes the path of the test files to it. This also worked pretty much painlessly.&lt;/p&gt;

&lt;h3 id=&quot;end-to-end-testing&quot;&gt;end-to-end testing&lt;/h3&gt;

&lt;p&gt;I wanted to be able to do some real end to end testing. So I wanted to be able to spin up my application, pass some HTTP requests to it and then verify the output of the requests. The first question was how to pass the requests to my application. For this I found the library &lt;a href=&quot;https://github.com/visionmedia/supertest&quot;&gt;SuperTest&lt;/a&gt;. You can just start you Koa app and pass the HTTP server (the return value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;app.listen&lt;/code&gt; function) to the agent and it will make sure the app is started and you can do some requests and check the results. This worked pretty well.&lt;/p&gt;

&lt;p&gt;The second problem was a test database. I needed a database that was as close to the real one as possible. I ran the real database in a &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; container with a volume that mapped the &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/mysql&lt;/code&gt; (the configuration / data folder for MySQL) to a host directory, so I could recreate the container without losing data. I figured I could more or less copy the Docker configuration for the database for a test database, only without the volume. Without the volume, the data would just be saved to the container itself, so it would be lost every time the container was recreated, which is perfect for end-to-end tests, because we want to start the tests with the exact same dataset, so we can make sure our assertions keep working.&lt;/p&gt;

&lt;p&gt;So I created an npm script to start the Docker and to do healthchecks to the Docker container until it told me that the entire container was up and running and MySQL was ready to take connections. Then I wrote a script to start the actual end to end tests, which was simply the same mocha call I wrote earlier, only pointing to the e2e folder instead of the test folder. At last I wrote an npm script to stop the Docker container and remove it. You can check these scripts &lt;a href=&quot;https://github.com/ivarvh/movielistr-backend-ts-ioc/tree/master/scripts&quot;&gt;here&lt;/a&gt;. I made heavy use of the &lt;a href=&quot;https://github.com/shelljs/shelljs&quot;&gt;shelljs&lt;/a&gt; package. This npm package allows you to execute shell commands, which I used to start Docker containers from JavaScript.&lt;/p&gt;

&lt;p&gt;NOTE: this setup works well, but the starting of the Docker container takes ~30 seconds, which is quite long, considering that the tests take maybe a few seconds. In a continuous integration build, this doesn’t matter as much, but when you are trying to fix tests, it does take a lot of time if you have to wait about a minute for each test run.&lt;/p&gt;

&lt;h1 id=&quot;task-runner&quot;&gt;Task runner&lt;/h1&gt;

&lt;h3 id=&quot;webpack&quot;&gt;Webpack&lt;/h3&gt;

&lt;p&gt;When I started this project, I was looking up some best practices for node. I came across an &lt;a href=&quot;http://jlongster.com/Backend-Apps-with-Webpack--Part-I&quot;&gt;article&lt;/a&gt; that suggested you should use &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; for backend too. I already have some experience with Webpack from frontend development, so at first it seemed logical to use it for backend too. When I was trying to get the dependency injection to work with Awilix, I realized that I could not pass any paths to libraries, because when my code was bundled, the paths would be invalid. Then I started to actually wonder why I was bundling my code. In frontend you bundle your code to make it as small as possible so you don’t waste the user’s bandwidth and make you website load faster, but in backend, that does not matter, since the code does not have to be sent anywhere. At this point I decided I didn’t need Webpack at all and I could just use npm scripts’ functionality to create tasks.&lt;/p&gt;

&lt;h3 id=&quot;npm&quot;&gt;npm&lt;/h3&gt;

&lt;p&gt;Npm is actually the only build tool you need. If what you want to do is more than a single line command, you can just write scripts in either TypeScript (you can execute them with ts-node), bash, JavaScript, … whatever you like. I wrote my scripts in TypeScript, because to me it makes more sense to use TypeScript for everything, but I could just as well have written them using bash. Npm also gives you pre and post task hooks. So if you write a task with the name “e2e” as I did, you can also add a task with the “pre” prefix or the “post” prefix that will automatically be executed before and after the task is executed. This way I could easily separate the starting of the Docker container, the executing of the tests and the stopping of the Docker container into different scripts. I could then just execute &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run pree2e&lt;/code&gt; to check if my script to start the Docker worked. I really like this approach and the fact that I don’t need another tool to learn like gulp or Webpack.&lt;/p&gt;

&lt;h1 id=&quot;debugging&quot;&gt;Debugging&lt;/h1&gt;

&lt;h3 id=&quot;application-code&quot;&gt;Application code&lt;/h3&gt;

&lt;p&gt;I had some trouble at the beginning with debugging my TypeScript. For some reason in the Chrome Devtools I could not get my sourcemaps working (even though they were inline sourcemaps). Then I tried the Visual Studio Code debugger and that worked much better. To get this to work, I did the following:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ivarvh/movielistr-backend-ts-ioc/blob/master/tsconfig.json&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tsconfig.json&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  
    {
        &quot;compilerOptions&quot;: {

            &quot;inlineSourceMap&quot;: true,
            &quot;inlineSources&quot;: true,

        }
    }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ivarvh/movielistr-backend-ts-ioc/blob/master/package.json&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  

    &quot;scripts&quot;: {
        
	    &quot;start:debug&quot;: &quot;ts-node --inspect=5858 --debug-brk --ignore false src/index.ts&quot;,
        
    }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ivarvh/movielistr-backend-ts-ioc/blob/master/.vscode/launch.json&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.vscode/launch.json&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  
    {
	    &quot;configurations&quot;: [
	        {
                &quot;type&quot;: &quot;node&quot;,
                &quot;request&quot;: &quot;launch&quot;,
                &quot;name&quot;: &quot;Debug Application&quot;,
                &quot;runtimeExecutable&quot;: &quot;npm&quot;,
                &quot;windows&quot;: {
                    &quot;runtimeExecutable&quot;: &quot;npm.cmd&quot;
                },
                &quot;runtimeArgs&quot;: [
                    &quot;run-script&quot;,
                    &quot;start:debug&quot;
                ],
                &quot;outFiles&quot;: [],
                &quot;protocol&quot;: &quot;inspector&quot;,
                &quot;sourceMaps&quot;: true,
                &quot;port&quot;: 5858
            }
        ]
    }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The npm script will start the execution of the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.ts&lt;/code&gt; with ts-node in debug mode on port 5858 and the &lt;code class=&quot;highlighter-rouge&quot;&gt;--debug-brk&lt;/code&gt; tells it to break on the first line of code. The launch configuration will just execute this npm script and attach it to the debugger.&lt;/p&gt;

&lt;h3 id=&quot;test-code&quot;&gt;Test code&lt;/h3&gt;

&lt;p&gt;Debugging the test code is more or less the same as the application code, there is just a small caveat. When you create breakpoints in Visual Studio Code, they will appear gray as if they cannot be reached. But when you execute the code, it will break on the breakpoints and then they will become red like a normal breakpoint.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ivarvh/movielistr-backend-ts-ioc/blob/master/package.json&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  
    &quot;scripts&quot;: {
	    &quot;test:debug&quot;: &quot;mocha --inspect --debug-brk --not-timeouts --compilers ts:ts-node/register test/**/*.spec.ts&quot;,
    }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ivarvh/movielistr-backend-ts-ioc/blob/master/.vscode/launch.json&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.vscode/launch.json&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  
{
    &quot;configurations&quot;: [
        {
            &quot;type&quot;: &quot;node&quot;,
            &quot;request&quot;: &quot;launch&quot;,
            &quot;name&quot;: &quot;Debug Tests&quot;,
            &quot;runtimeExecutable&quot;: &quot;npm&quot;,
            &quot;windows&quot;: {
                &quot;runtimeExecutable&quot;: &quot;npm.cmd&quot;
            },
            &quot;runtimeArgs&quot;: [
                &quot;run-script&quot;,
                &quot;test:debug&quot;
            ],
            &quot;outFiles&quot;: [],
            &quot;protocol&quot;: &quot;inspector&quot;,
            &quot;sourceMaps&quot;: true,
            &quot;port&quot;: 9229
        }
    ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I really had a good time making this project. I really love readable and compact code and with TypeScript and the async / await syntax, I really got what I asked for. My previous experience with node.js and regular old JavaScript was really bad, mostly because of the loose typing, which forces you to constantly write a lot of tedious checks on parameters. With TypeScript that is all in the past. Apart from that, the enormous amount of npm packages available, makes it very easy to find some package that does what you need. If for some reason you can’t find something, you can easily write it yourself and publish it to npm.
I always used to use Java for my backends, but the setup is always a bit of work and you have to write more boilerplate code than with TypeScript. If I make more small projects in the future, I will probably use TypeScript and Node, but for me at this point, it’s hard to tell if NodeJS will hold up in bigger projects. I would assume so, since the structure for me at this point, is very similar to Java, just a more concise syntax.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Ivar&quot;, &quot;last_name&quot;=&gt;&quot;van Hartingsveldt&quot;, &quot;permalink&quot;=&gt;&quot;/author/ivar-van-hartingsveldt/&quot;, &quot;avatar&quot;=&gt;&quot;ivar-van-hartingsveldt.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend Developer&quot;, &quot;email&quot;=&gt;&quot;ivar.vanhartingsveldt@ordina.be&quot;, &quot;github&quot;=&gt;&quot;ivarvh&quot;, &quot;linkedin&quot;=&gt;&quot;ivarvh&quot;, &quot;bio&quot;=&gt;&quot;Ivar is a backend Java developer who converted to frontend. When ES6 and TypeScript came along, he really started investing his time in that and now he writes Javascript / Typescript almost exclusively.&quot;}</name><email>ivar.vanhartingsveldt@ordina.be</email></author><category term="NodeJS" /><category term="NodeJS" /><category term="TypeScript" /><category term="JavaScript" /><category term="Koa" /><category term="REST" /><category term="MySQL" /><summary type="html">This article assumes you already have some knowledge of npm and JavaScript development in general. It will not be a detailed tutorial about how to write a REST API, it’s more of an extra explanation for the application I made, the libraries I used and my experience with them.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/nodejs-typescript-koa/koa-logo.png" /></entry><entry><title type="html">Spring IO 2017: The Spring Ecosystem</title><link href="https://ordina-jworks.github.io/spring/2017/06/07/Spring-IO-2017-The-Spring-ecosystem.html" rel="alternate" type="text/html" title="Spring IO 2017: The Spring Ecosystem" /><published>2017-06-07T00:00:00+00:00</published><updated>2017-06-07T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/spring/2017/06/07/Spring-IO-2017-The-Spring-ecosystem</id><content type="html" xml:base="https://ordina-jworks.github.io/spring/2017/06/07/Spring-IO-2017-The-Spring-ecosystem.html">&lt;blockquote&gt;
  &lt;p&gt;When I was at Spring IO back in May, I was intrigued by a presentation given by Jeroen Sterken.
There he talked about the Spring Ecosystem in 50 minutes.
Since he only had 50 minutes, he could not focus on all the projects Spring boasts.
I wanted to get a feel of what the Spring team has to offer in all its glory, by getting to know all of the main projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Jeroen Sterken&quot; src=&quot;/img/spring-ecosystem/jeroen-sterken.jpg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Jeroen Sterken (&lt;a href=&quot;https://twitter.com/jeroensterken&quot;&gt;@jeroensterken&lt;/a&gt;) is a Java and Spring consultant from Belgium. He’s a certified Spring instructor and currently employed at Faros Belgium. His slides of his talk &lt;em&gt;The Spring Ecosystem in 50 minutes&lt;/em&gt; can be found &lt;a href=&quot;https://www.slideshare.net/JeroenSterken1/the-spring-ecosystem-in-50-min&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-spring-ecosystem&quot;&gt;The Spring Ecosystem&lt;/h1&gt;

&lt;p&gt;There are many ways to divide the Spring portfolio.
One way could be based on architecture, another way could be based on popularity. Jeroen divided the Spring Ecosystem in three categories: &lt;a href=&quot;#classic&quot;&gt;classic&lt;/a&gt;, &lt;a href=&quot;#popular&quot;&gt;popular&lt;/a&gt; and &lt;a href=&quot;#other&quot;&gt;other&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before we dive into the Spring ecosystem, let’s take a look at which projects our own JWorks unit have been using the most over the past two years. Here’s the JWorks top 10, beside the Spring Framework.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 2.5rem auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;JWorks Top 10 projects&quot; src=&quot;/img/spring-ecosystem/spring-top-10.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Spring Boot is currently at the top. Other notable mentions are Spring Session, Spring Social and Spring Cloud Data Flow.
But what’s even more interesting are the Spring projects that aren’t that widely used: Spring Mobile, Spring for Android, Spring Kafka, Spring Statemachine, Spring Shell, Spring Flo and Spring XD.&lt;/p&gt;

&lt;h1 id=&quot;classic&quot;&gt;Classic&lt;/h1&gt;

&lt;p&gt;The classic projects are showing a range of the many beloved portfolio projects, where for instance Spring Security and its LDAP module will help you build your secure applications at ease.
Or where the Spring IO platform will show you the insights in its development.&lt;/p&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 2.5rem auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Classic projects&quot; src=&quot;/img/spring-ecosystem/spring-classic.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;spring-framework&quot;&gt;Spring Framework&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Framework&quot; src=&quot;/img/spring-ecosystem/spring-framework.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The core of Spring, currently at its fifth revision.
It provides key components for dependency injection, web apps, transaction management, testing, messaging, model-view-controller, remote access, data access and more.
Just add the modules you need and start programming.
In the fifth version, the focus lays on reactive programming with reactive streams, as well as other features and revisions like support for JUnit 5.
Spring 5 will require at least JDK 8 but is already being built continuously on JDK 9.
The release is planned for the end of the year, regardless whether Java 9 is released or not.&lt;/p&gt;

&lt;h2 id=&quot;spring-io-platform&quot;&gt;Spring IO Platform&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring IO Platform&quot; src=&quot;/img/spring-ecosystem/spring-io-platform.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The Spring IO Platform is built on Spring Boot and is mainly used in combination with a dependency management system.
It provides dependencies that work well together.
It’s basically a library on the classpath of your application which gives developers production-ready features.
It does this by providing a bill-of-material Maven artifact.
The libraries used in the BOM file are all curated and normalized, so they work greatly together.
But if that is not to your liking, you can easily just use your own versions.
The platform supports JDK 7 and 8 and is still being updated frequently.&lt;/p&gt;

&lt;h2 id=&quot;spring-security&quot;&gt;Spring Security&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Security&quot; src=&quot;/img/spring-ecosystem/spring-security.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Nowadays you can’t ignore problems of security failures and the importance of privacy.
Spring Security provides your application with authentication and authorization.
It will also protect your application against a handful of possible attacks.
Spring Security supports many popular authentication protocols and services like OpenID, LDAP, HTTP, … and support is extended through the available third party modules.
The fifth version of Spring Security will add OAuth 2.0 support.&lt;/p&gt;

&lt;h2 id=&quot;spring-ldap&quot;&gt;Spring LDAP&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring LDAP&quot; src=&quot;/img/spring-ecosystem/spring-ldap.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Spring LDAP hides a lot of the boilerplate code for LDAP interactions.
It makes sure all the connections are created and correctly closed.
This library helps out with the looping through the results and filtering those.
It’s also possible to manage your transactions with a client-side transaction manager.
If you’re working with this Lightweight Data Access Protocol, this might definitely be worth your while.&lt;/p&gt;

&lt;h2 id=&quot;spring-integration&quot;&gt;Spring Integration&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Integration&quot; src=&quot;/img/spring-ecosystem/spring-integration.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;When an architecture revolves around events or messages, you can get the help of Spring Integration.
This project focuses on the implementation of Enterprise Integration patterns.
When you want to send something from point A to point B, there could be a lot of different network protocols or restrictions in between.
Spring Integration minimizes the boilerplate code needed by implementing those patterns.
It just makes it easy to send events and messages throughout different endpoints.&lt;/p&gt;

&lt;h2 id=&quot;spring-batch&quot;&gt;Spring Batch&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Batch&quot; src=&quot;/img/spring-ecosystem/spring-batch.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;With Spring Batch it is possible to write an offline batch application using Java and Spring.
It makes it very convenient when you’re used to the Spring Framework to execute a bunch of jobs.
It features a possibility to read and write your resource and a way of dividing data for processing and much more.
There is also support for a transaction manager, job processing statistics, job status changes and much more.&lt;/p&gt;

&lt;h2 id=&quot;spring-web-flow&quot;&gt;Spring Web Flow&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Web Flow&quot; src=&quot;/img/spring-ecosystem/spring-web-flow.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The Spring Web Flow was created to help users navigate through the different views of a stateful web application.
A common example could be when shopping online.
The process has a clear starting and finishing view, but in between, it can change state or views dynamically.
Through guided navigations, the user makes changes and it should register those changes as well as the possibility to finalize those changes through a confirmation.
All this is possible with Spring Web Flow.
Although this project is listed with the main projects, there hasn’t been any progress over the last years, and will be removed when Spring 5 hits the shelves.&lt;/p&gt;

&lt;h2 id=&quot;spring-web-services&quot;&gt;Spring Web Services&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Web Services&quot; src=&quot;/img/spring-ecosystem/spring-web-services.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;There are several ways to develop a web service, one of which is used in combination with SOAP.
Spring Web Services helps with creating contract-first SOAP web services which are flexible by manipulating the XML contents.
But due to the popularity of the architectural style of REST, the interest in SOAP has diminished.
This is noticeable in the maintenance of this Spring project which hasn’t had any significant version updates.
Version 2.4.0 was released on August 26th 2016 and only brought some CI jobs that are built for every commit for Spring 4.2, 4.3, and 5.0.&lt;/p&gt;

&lt;h1 id=&quot;popular&quot;&gt;Popular&lt;/h1&gt;

&lt;p&gt;When you look at modern applications and their infrastructure, you’ll see the power of the Spring portfolio coming to its use.
With the easy of use of Spring Boot, you can quickly start the development of a secure application and use Spring Cloud to help you with the deployment and integration for your online service provider.&lt;/p&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 2.5rem auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Popular projects&quot; src=&quot;/img/spring-ecosystem/spring-popular.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;A modern application might look like this:&lt;/p&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 2.5rem auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Modern application&quot; src=&quot;/img/spring-ecosystem/modern-application.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;spring-boot&quot;&gt;Spring Boot&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Boot&quot; src=&quot;/img/spring-ecosystem/spring-boot.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Being built onto the Spring Framework, the popular Spring Boot project provides an easy to use way for creating stand-alone Spring applications without code generation and configuration of XML files.
If you want to get started quickly without too much hassle, Spring Boot is the way to go by adding the dependencies you need.
Spring Beans don’t need to be defined in XML or Java, as they are mostly configured automatically by Spring Boot.
This way, there is no need to find and configure libraries for your specific Spring version, Spring Boot tries to do that for you.
However, if you wish, you can fine-tune the auto-configuration to your own needs by adding the library to the classpath of the application, setting some properties, or adding some annotations.
When you want to deploy your Spring Boot application, there’s no need to build a WAR file, since you can build self-contained JAR files with an embedded servlet container such as Jetty, Tomcat or Undertow.
Spring Boot also features a command line tool for quick prototyping with Spring.
The easiest way to get started with Spring Boot is to go to the &lt;a href=&quot;https://start.spring.io/&quot;&gt;Spring Initializr&lt;/a&gt; and add the dependencies to the project.
The Spring team is maintaining the Spring Boot project regularly as it’s becoming the de facto way of using Spring.&lt;/p&gt;

&lt;h2 id=&quot;spring-cloud&quot;&gt;Spring Cloud&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Cloud&quot; src=&quot;/img/spring-ecosystem/spring-cloud.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Spring Cloud is an umbrella project which lets you build distributed systems by implementing many best practice patterns.
It consists out of many sub-projects.
With the use of Spring Cloud Config Server you can setup a server with a repository, like Git, as its data store and view the changes made in the configuration.
Spring Cloud Contract allows you to write Consumer Driven Contract Tests with ease.
Many of the Netflix OSS components are wrapped into Spring Cloud, which makes it a lot easier to deal with the complexity of microservice architectures.
And of course with a cloud service there’s often a lot of security involved which is provided by the Spring Cloud Security.
You can easily integrate this with Amazon Web Services or Cloud Foundry, through their related subprojects.
Spring Cloud Security is build on OAuth2 and Spring Boot which provides single sign-on, token relay and token exchange.
One of the latest projects in the Spring Cloud umbrella is Spring Cloud Function.
It offers an extreme convention-over-configuration approach which can leverage all of Spring Boot’s capabilities while writing only a single function.
The full list of sub-projects are available &lt;a href=&quot;https://cloud.spring.io/spring-cloud-aws&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;spring-cloud-data-flow&quot;&gt;Spring Cloud Data Flow&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Cloud Data Flow&quot; src=&quot;/img/spring-ecosystem/spring-cloud-data-flow.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Spring Cloud Data Flow used to be know as Spring XD and is part of Spring Cloud.
It’s an updated and revised toolkit for cloud-native message-driven microservices.
The change was made by the Spring team after their experience with Spring Boot.
Spring Cloud Data Flow is suitable for processing, analyzing and predicting data.
Through streaming it can consume data from an HTTP endpoint and writes the payloads to a database of your choice.
It also manages to scale the data pipelines to your liking without any interruptions.
After development, an application can be easily executed in Cloud Foundry, Apache YARN, Kubernetes or Apache Mesos, but with the Service Provider Interface you can deploy your application to other runtimes.&lt;/p&gt;

&lt;h2 id=&quot;spring-data&quot;&gt;Spring Data&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Data&quot; src=&quot;/img/spring-ecosystem/spring-data.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Whether you’re working with relational or non-relational databases, Spring Data will soothe your needs.
As an umbrella project it will ease your way into data access.
It abstracts the complexity of data access layers by allowing the developer to simply extend an interface.
Some of the related sub-projects will help you develop quicker for your favorite database, like Spring Data Mongodb, Spring Data JPA, Spring Data for Apache Cassandra or Spring Data for Apache Solr.
And through the help of some community modules this is extended to several others.
With Spring Data REST you can expose your Spring Data repository automatically as a REST resource.
As usual with Spring projects, they provide an excellent base but can be customised to your own needs.
A full list of sub-projects and community projects are available &lt;a href=&quot;http://projects.spring.io/spring-data&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;spring-hateoas&quot;&gt;Spring HATEOAS&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring HATEOAS&quot; src=&quot;/img/spring-ecosystem/spring-hateoas.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;HATEOAS stands for Hypermedia As The Engine Of Application State.
It enables the server to update its functionality by decoupling the server and client.
With Spring HATEOAS it’s easy to create a REST resource implementation using the HATEOAS as an underlying principle.
It helps the client by returning a response in combination with more information on what to do next.
If the state of the resource changes, the information on the next steps will also vary throughout the application.
As this is a subconstraint one of the core principles of REST, the uniform interface, using Spring HATEOAS you can achieve ‘the glory of REST’.&lt;/p&gt;

&lt;h2 id=&quot;spring-rest-docs&quot;&gt;Spring REST Docs&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring REST Docs&quot; src=&quot;/img/spring-ecosystem/spring-rest-docs.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;When you develop a RESTful service, you’ll probably want to document it so it’s easy for other developers to implement your API.
Spring REST Docs helps you with the documentation process to make it more accurate and readable.
It does this by running integration tests, which generate guaranteed up-to-date request and response snippets when those tests succeed.
Those snippets can be included in Asciidoctor templates, which are then converted to HTML output.
Alternatively it can be configured to use Markdown.
The advantage here is that the documentation is always up-to-date with your code, since the integration tests will fail otherwise.
There are also options for you to customize the layout of the documentation.
A more in-depth look at Spring REST Docs was presented at Spring IO 2016 by JWorks colleague Andreas Evers: &lt;a href=&quot;https://speakerdeck.com/andreasevers/writing-comprehensive-and-guaranteed-up-to-date-rest-api-documentation-springone-platform-2016&quot;&gt;&lt;em&gt;Writing Comprehensive and Guaranteed Up-to-date REST API Documentation&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;spring-social&quot;&gt;Spring Social&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Social&quot; src=&quot;/img/spring-ecosystem/spring-social.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Spring Social lets you connect your application with Facebook, Twitter and LinkedIn.
But through its many community projects it’s possible to connect to dozens other like Google, Instagram, Pinterest, …
The full list is of supported third-party APIs is available &lt;a href=&quot;http://projects.spring.io/spring-social&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;spring-session&quot;&gt;Spring Session&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Session&quot; src=&quot;/img/spring-ecosystem/spring-session.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;When someone uses your web application, they will be using an HTTP session underneath.
Spring Session allows you to manage those sessions separately, outside of the servlet container.
It supports multiple sessions at once and can even send the sessions in the header.
Spring sessions isn’t specifically tied to any container.
Although the project is quite popular and has very interesting features, the project hasn’t had any major changes over the past year.&lt;/p&gt;

&lt;h1 id=&quot;other&quot;&gt;Other&lt;/h1&gt;

&lt;p&gt;These projects are mainly focused on one specific (niche) part of an application.
Some wil help you with the development of specific front-end applications, while others will help you implement specific patterns.&lt;/p&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 2.5rem auto;&quot;&gt;
&lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Other projects&quot; src=&quot;/img/spring-ecosystem/spring-other.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;spring-amqp&quot;&gt;Spring AMQP&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring AMQP&quot; src=&quot;/img/spring-ecosystem/spring-amqp.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;AMQP is an abbreviation for Advanced Messaging Query Protocol which Spring AMQP implements.
It helps you with routing, queuing, exchanging and bindings.
Additionally, there’s a listener available when sending messages asynchronously.
Spring AMQP also provides a template service for sending and receiving messages.
In the upcoming second version of Spring AMQP it uses version 4.0.x of the library which has been developed by RabbitMQ.&lt;/p&gt;

&lt;h2 id=&quot;spring-mobile&quot;&gt;Spring Mobile&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Mobile&quot; src=&quot;/img/spring-ecosystem/spring-mobile.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Spring Mobile is the Spring team’s attempt at making it easier to develop mobile web applications with the use of Spring MVC.
Spring Mobile implements a way of detecting the type of the device used to view the url and tries to adjust its view accordingly.
Unfortunately the project isn’t that well maintained as significant updates are several years ago.&lt;/p&gt;

&lt;h2 id=&quot;spring-for-android&quot;&gt;Spring for Android&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring for Android&quot; src=&quot;/img/spring-ecosystem/spring-for-android.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Another project without any recent updates is Spring for Android
Spring for Android brings some of the key benefits of using Spring to Google’s mobile operating system, Android.
It has a REST API client for Android with authentication support.
For your social media authentication, you can use Spring Social in conjunction with Spring for Android.
But there’s no use of Spring’s dependency injection, transaction manager or some other useful Spring features.&lt;/p&gt;

&lt;h2 id=&quot;spring-shell&quot;&gt;Spring Shell&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Shell&quot; src=&quot;/img/spring-ecosystem/spring-shell.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The Spring team provided a way for building command-line applications.
Through the use of Spring you could build a full-featured shell application with your very own commands or just use the default commands that are already implemented.
Or you could get access to an exposed REST API.
The Spring Shell hasn’t been updated with new functionality in more than 3 years.&lt;/p&gt;

&lt;h2 id=&quot;spring-xd&quot;&gt;Spring XD&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring XD&quot; src=&quot;/img/spring-ecosystem/spring-xd.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Spring XD is the predecessor of Spring Cloud Data Flow and therefore hasn’t been maintained.
End of support will be in July 2017.&lt;/p&gt;

&lt;h2 id=&quot;spring-flo&quot;&gt;Spring Flo&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Flo&quot; src=&quot;/img/spring-ecosystem/spring-flo.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This JavaScript library was a foundation for the stream builder in Spring Cloud Data Flow.
It provides a basic embeddable HTML5 visual builder.
Spring Flo is especially focused on pipelines and simple graphs.
It’s built using Grunt where the commands can be ran directly or indirectly through Maven.
With the use of a drag and drop interface it’s easy to create real-time streaming and batch pipelines.
Additionally you can also choose to use the shell instead of the GUI interface.&lt;/p&gt;

&lt;h2 id=&quot;spring-kafka&quot;&gt;Spring Kafka&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Kafka&quot; src=&quot;/img/spring-ecosystem/spring-kafka.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This is Spring for Apache Kafka, an open-source streaming processing platform.
Spring Kafka provides an interface for sending messages for Kafka-based applications.
It also supports a listener container and a way of sending message-driven POJOs.&lt;/p&gt;

&lt;h2 id=&quot;spring-statemachine&quot;&gt;Spring Statemachine&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right small&quot;&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Spring Statemachine&quot; src=&quot;/img/spring-ecosystem/spring-statemachine.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Some applications may require state machine concepts being implemented.
Spring Statemachine provides a framework that helps with that.
It provides a lot of useful things for making complex configuration easy, but also provides listener states and much more.&lt;/p&gt;

&lt;h2 id=&quot;spring-roo&quot;&gt;Spring Roo&lt;/h2&gt;

&lt;p&gt;Spring Roo gives you the possibility to easily build full Java applications.
This is a tool for rapid development of Java applications that are fully written in Java.
It is focused on using the new Spring projects, like Spring Boot and Spring Data, as well as other common Java technologies.
However, since the introduction of Spring Boot, Spring Roo has become less of a necessity, as Spring Boot hides a lot of the boilerplate code Spring Roo was designed to generate.&lt;/p&gt;

&lt;h2 id=&quot;spring-scala&quot;&gt;Spring Scala&lt;/h2&gt;

&lt;p&gt;When developing applications in Scala, you can make use of Spring through Spring Scala, a community project.
This brings a lot of Spring technologies to the Scala programming language.
This is one of the two presented community projects by the Spring team on their main project page, the other one being Spring Roo.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Matthias&quot;, &quot;last_name&quot;=&gt;&quot;Caryn&quot;, &quot;permalink&quot;=&gt;&quot;/author/matthias-caryn/&quot;, &quot;avatar&quot;=&gt;&quot;matthias-caryn.jpg&quot;, &quot;title&quot;=&gt;&quot;Java Developer&quot;, &quot;email&quot;=&gt;&quot;matthias.caryn@ordina.be&quot;, &quot;github&quot;=&gt;&quot;caryntjen&quot;, &quot;linkedin&quot;=&gt;&quot;caryntjen&quot;, &quot;phone&quot;=&gt;32473836044, &quot;bio&quot;=&gt;&quot;Matthias is Java Developer at Ordina Belgium. He enjoys to discover new Java and JavaScript technologies. He's passionate about machine learning and artificial intelligence. In his spare time he enjoys a good board or tabletop games and a good walk in the park with his dogs.&quot;}</name><email>matthias.caryn@ordina.be</email></author><category term="Spring" /><category term="Spring" /><category term="Ecosystem" /><category term="Cloud" /><category term="Conference" /><summary type="html">When I was at Spring IO back in May, I was intrigued by a presentation given by Jeroen Sterken. There he talked about the Spring Ecosystem in 50 minutes. Since he only had 50 minutes, he could not focus on all the projects Spring boasts. I wanted to get a feel of what the Spring team has to offer in all its glory, by getting to know all of the main projects.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/spring.png" /></entry><entry><title type="html">Blockchain introduction</title><link href="https://ordina-jworks.github.io/blockchain/2017/05/10/Blockchain-Introduction.html" rel="alternate" type="text/html" title="Blockchain introduction" /><published>2017-05-10T00:00:00+00:00</published><updated>2017-05-10T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/blockchain/2017/05/10/Blockchain-Introduction</id><content type="html" xml:base="https://ordina-jworks.github.io/blockchain/2017/05/10/Blockchain-Introduction.html">&lt;blockquote&gt;
  &lt;p&gt;A lot of people are talking about blockchain these days.
They’re talking about blockchain as the next big thing after mainframes, computers, the internet and social networking.
This introduction is the first part in a series of blockchain posts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;topics&quot;&gt;Topics&lt;/h1&gt;

&lt;p&gt;In this first article about the innovative blockchain technology, we’ll cover the following topics:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#blockchain-and-its-relation-to-bitcoin&quot;&gt;Blockchain and its relation to Bitcoin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-blockchain&quot;&gt;What is blockchain&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#types-of-blockchain-networks&quot;&gt;Types of blockchain networks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-consensus-process&quot;&gt;The consensus process&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#smart-contracts&quot;&gt;Smart contracts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#valid-blockchain-business-cases&quot;&gt;Valid blockchain business cases&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#existing-platforms&quot;&gt;Existing platforms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#thinking-decentralized&quot;&gt;Thinking decentralized&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#recommended-reading&quot;&gt;Recommended reading&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;blockchain-and-its-relation-to-bitcoin&quot;&gt;Blockchain and its relation to Bitcoin&lt;/h1&gt;

&lt;p&gt;First of all, Bitcoin and blockchain are two different things.
People tend to use both words by each other in three different contexts:&lt;/p&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 2.5rem 0;&quot;&gt;
  &lt;div class=&quot;col-md-offset-3 col-md-2&quot; style=&quot;width:32%&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Crypto-currency&quot; src=&quot;/img/blockchain/bitcoin_currency.png&quot; /&gt;
    
    &lt;figcaption&gt;1. Digital cryptocurrency&lt;/figcaption&gt;
    
&lt;/figure&gt;

  &lt;/div&gt;
  &lt;div class=&quot;col-md-2&quot; style=&quot;width:32%&quot;&gt;

&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Protocol&quot; src=&quot;/img/blockchain/bitcoin_protocol.png&quot; /&gt;
    
    &lt;figcaption&gt;2. Protocol and client for executing transactions&lt;/figcaption&gt;
    
&lt;/figure&gt;

  &lt;/div&gt;
  &lt;div class=&quot;col-md-2&quot; style=&quot;width:32%&quot;&gt;
	
&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Blockchain&quot; src=&quot;/img/blockchain/bitcoin_blockchain.png&quot; /&gt;
    
    &lt;figcaption&gt;3. The blockchain which stores all Bitcoin transactions&lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So when talking about Bitcoin or blockchain with people, it’s important to mind this terminology.
Here’s a funny quote I read in the book &lt;a href=&quot;http://www.goodreads.com/book/show/24714901-blockchain&quot;&gt;Blockchain: A Blueprint for a New Economy&lt;/a&gt;,
which describes this ambiguity very well:&lt;/p&gt;
&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
It's as if PayPal called the internet PayPal on which the PayPal protocol was run to transfer PayPal currency.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In January 2009, the Bitcoin network came into existence.
Bitcoin isn’t the first attempt to digital currency, but it’s the first one that uses a &lt;strong&gt;peer-to-peer network&lt;/strong&gt; to create a platform for executing transactions &lt;strong&gt;without depending on central authorities&lt;/strong&gt; who validates them.&lt;/p&gt;

&lt;p&gt;You should see Bitcoin as the first platform that implemented blockchain technology.&lt;/p&gt;

&lt;h1 id=&quot;what-is-blockchain&quot;&gt;What is blockchain?&lt;/h1&gt;

&lt;p&gt;So forget about Bitcoin now.
That’s not what this post is about.
People say blockchain is as important as the introduction of the internet. 
The internet is a worldwide network to &lt;strong&gt;share information&lt;/strong&gt; with one another, but it is far less suitable for transferring value.
If you send someone a file, it is always a copy of your file, which means you and the receiver are both in possession of the file.
As we already stated, that is ideal for sharing information, but not applicable for money, certificate of ownership, and so forth.
And the latter is exactly what blockchain enables: digitalizing and transferring such values.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the underlying decentralized ledger technology.
We believe blockchain’s definition is a good starting point:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Blockchain is a type of &lt;strong&gt;distributed database&lt;/strong&gt; that stores a &lt;strong&gt;permanent&lt;/strong&gt; and &lt;strong&gt;tamper-proof&lt;/strong&gt; ledger of &lt;strong&gt;transaction data&lt;/strong&gt;.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tldr-version&quot;&gt;TL;DR version&lt;/h3&gt;

&lt;p&gt;Blockchain is a &lt;strong&gt;decentralized immutable data structure&lt;/strong&gt;.
In short the blockchain is a network of computers, called nodes. 
Every node has the same copy of the database which they manage together. 
A transaction is encrypted and signed on a mathematical way. 
When a transaction is saved in the blockchain, it is duplicated across all nodes in the network.
That’s why we talk of blockchain as &lt;strong&gt;distributed ledger technology&lt;/strong&gt;, a ledger of transactions, distributed across a computer network.
Transactions are bundled in one &lt;strong&gt;block&lt;/strong&gt; before they are validated by other nodes.
Once the network reached consensus about the validity of these transactions, the block is appended to the existing &lt;strong&gt;chain&lt;/strong&gt; of blocks.
The block stores the validated transactions together with a hash and a reference to the previous block.
Stored transactions cannot be undone, as this would invalidate all hashes in the chain.&lt;/p&gt;

&lt;h3 id=&quot;now-a-little-more-in-detail&quot;&gt;Now a little more in detail…&lt;/h3&gt;

&lt;p&gt;Transactions are broadcasted to the network for miners to &lt;strong&gt;mine&lt;/strong&gt;. 
They assess the non-validated transactions on the memory pool by solving a mathematical puzzle. 
A miner builds a block containing all transactions, a proof of work that the puzzle was solved (also known as the &lt;strong&gt;block root hash&lt;/strong&gt;, which is also the ID of the block) and a hash to the previous block.&lt;/p&gt;

&lt;p&gt;A block also contains the following items:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A timestamp&lt;/li&gt;
  &lt;li&gt;a nonce&lt;/li&gt;
  &lt;li&gt;and a &lt;strong&gt;merkle root hash&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &lt;strong&gt;merkle root&lt;/strong&gt; does not verify transactions, but verifies a set of transactions.
Transaction IDs are hashes of the transaction, and the merkle tree is constructed from these hashes.
It means that if a single detail in any of the transactions changes, so does the merkle root. 
It also means that if the exact same transactions are listed in a different order, the merkle root will also change.
So the merkle root is cryptographic proof of the transactions in the block together with the order they are in.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;nonce number&lt;/strong&gt; is a field whose value is set so that the hash of the block will comply with the predefined network rules (eg: a run of leading zeros in Bitcoin).
 Miners increase the nonce until the hash is valid.
 Sha-256 is used to hash.&lt;/p&gt;

&lt;p&gt;The miner appends the block to the blockchain. 
And the majority of the other nodes, 50% + 1, double-check by &lt;strong&gt;verifying the proof of work&lt;/strong&gt; in the block.
It sometimes occurs that miners will validate two blocks at the same time and they will be appended to the chain. 
When this occurs, which doesn’t happen often, the principle of &lt;strong&gt;Longest Chain Wins&lt;/strong&gt; will be implemented.
The longest chain remains and the conflicting chain will be discarded.
The transactions of the discarded chains will be put back in the memory pool to be mined another time.&lt;/p&gt;

&lt;p&gt;You now have a basic understanding of why we call it &lt;strong&gt;the blockchain&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 2.5rem auto;&quot;&gt;
  &lt;div class=&quot;col-md-offset-3 col-md-6&quot;&gt;
	
&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Short explanation&quot; src=&quot;/img/blockchain/how-blockchain-works.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;types-of-blockchain-networks&quot;&gt;Types of blockchain networks&lt;/h1&gt;

&lt;h3 id=&quot;public-blockchains-aka-permissionless&quot;&gt;Public blockchains (aka. permissionless)&lt;/h3&gt;

&lt;p&gt;This is a blockchain that everyone in the world can view, write transactions to, expect that these transactions will be validated and added to the blockchain.
In this type of blockchain network, any connected node can contribute the consensus process.
This process is used to determine if a block is valid or not.
You can read more about &lt;a href=&quot;#the-consensus-process&quot;&gt;the consensus process&lt;/a&gt; further in this blogpost.&lt;/p&gt;

&lt;p&gt;The public blockchain is generally a complete peer-to-peer network. Its characteristics are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The users from the chain get protected from the creators of the chain, because there are actions to the network that even they cannot perform.
&lt;strong&gt;Developers are not the owners&lt;/strong&gt; of the network and don’t have more or less privileges than normal users.&lt;/li&gt;
  &lt;li&gt;These chains are &lt;strong&gt;transparent&lt;/strong&gt; because everyone can see what is happening inside the chain.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;
&quot;In some cases, public is clearly better; in others, some degree of private control is simply necessary.
 As is often the case in the real world, it depends.&quot;
 - Vitalik Buterin of Ethereum
&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;consortium-blockchains&quot;&gt;Consortium blockchains&lt;/h3&gt;

&lt;p&gt;In this type of blockchain network, the consensus process is executed by a &lt;strong&gt;predetermined group of nodes&lt;/strong&gt; in the network.
Let’s take a consortium of fifteen financial institutions as an example, each with a node.
From this group of fifteen, there are ten nodes that need to sign each block before it is valid.
You could say that these ten take ownership of the data in the blockchain.
They decide which transactions are valid and which ones are not.
&lt;strong&gt;Read rights&lt;/strong&gt; can be &lt;strong&gt;public or restricted&lt;/strong&gt; to the members of the network, eg. we can limit public view to a set number of times.&lt;/p&gt;

&lt;p&gt;Public and consortium blockchain networks are decentralized, with the difference that the consortium network is &lt;strong&gt;not completely peer-to-peer&lt;/strong&gt;, because not everyone is equal.&lt;/p&gt;

&lt;h3 id=&quot;private-blockchains-aka-permissioned&quot;&gt;Private blockchains (aka. permissioned)&lt;/h3&gt;

&lt;p&gt;There is only a small difference between consortium and private blockchain networks: write rights are with &lt;strong&gt;one organization&lt;/strong&gt; instead of multiple.
The read rights can be the same as with a consortium blockchain.&lt;/p&gt;

&lt;p&gt;The following characteristics apply for a private blockchain network:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The company that controls the private chain can alter the rules of the chain. In some cases this can be necessary.&lt;/li&gt;
  &lt;li&gt;The nodes that confirm a block are known, so there can’t be a majority by a mining farm with a 51% attack.&lt;/li&gt;
  &lt;li&gt;Transactions are cheaper than with public chains. This is because they need to be verified by less nodes.&lt;/li&gt;
  &lt;li&gt;Nodes are well connected and errors can be fixed quickly with manual interaction.
This means that these networks give a faster confirmation and they will always be &lt;strong&gt;faster&lt;/strong&gt; than public networks.&lt;/li&gt;
  &lt;li&gt;Private blockchains are just better at privacy because the &lt;strong&gt;access to the blockchain can be limited&lt;/strong&gt;.
From a &lt;strong&gt;legal point-of-view&lt;/strong&gt;, this characteristic can have significant impact on the type of blockchain network you’ll pick.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-consensus-process&quot;&gt;The consensus process&lt;/h1&gt;

&lt;p&gt;As we mentioned before, the network must reach a &lt;strong&gt;consensus&lt;/strong&gt; of 50%+1 for a transaction to be written to the blockchain.
There are a few ways a blockchain network will do this.
We will be discussing the two most used.
Ronald Chan wrote a nice article about consensus mechanisms in &lt;a href=&quot;https://www.linkedin.com/pulse/consensus-mechanisms-used-blockchain-ronald-chan&quot;&gt;Consensus Mechanisms used in blockchain&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;proof-of-work&quot;&gt;Proof-of-Work&lt;/h3&gt;

&lt;p&gt;This is used to deter people from tampering with the blocks and launching (d)dos attacks. 
We let them do a feasible but not insignificant amount of work to get a consensus. 
For example in the blockchain they need to find the correct nonce number that is part of the block to create a hash that fits the predetermined rules. 
A rule can be that the hash must start with six zeros.&lt;/p&gt;

&lt;h3 id=&quot;proof-of-stake&quot;&gt;Proof-of-Stake&lt;/h3&gt;

&lt;p&gt;In this case you don’t need to find a nonce number but you just need to proof that you have a certain stake in the network.
The bigger your stake, the more you can mine from the network.&lt;/p&gt;

&lt;h1 id=&quot;smart-contracts&quot;&gt;Smart Contracts&lt;/h1&gt;
&lt;p&gt;The term &lt;strong&gt;smart contract&lt;/strong&gt; has no clear and settled definition.
So what is it?&lt;br /&gt;
Smart contracts are traditional contracts and official documents, but written in code.
As such, the contract is understandable for everyone across the globe, irrespective of the jurisdiction it is related to. 
Smart contracts are like &lt;strong&gt;If This Then That&lt;/strong&gt; statements, only they tend to be a lot more complex.&lt;/p&gt;

&lt;p&gt;The different definitions usually fall into one of the following two categories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sometimes the term is used to identify a specific technology.
&lt;strong&gt;Pieces of code&lt;/strong&gt; that are stored, verified and executed on a blockchain.
For example, a hello world program.&lt;/li&gt;
  &lt;li&gt;The term can also be used to refer to a specific application of that technology: as a complement, or substitute, for &lt;strong&gt;legal contracts&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 2.5rem auto; padding: 0;&quot;&gt;
  &lt;div class=&quot;col-md-offset-3 col-md-6&quot; style=&quot;padding: 0;&quot;&gt;
	
&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Smart contract explained&quot; src=&quot;/img/blockchain/smart-contract.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;valid-blockchain-business-cases&quot;&gt;Valid blockchain business cases&lt;/h1&gt;

&lt;p&gt;It’s important to understand that blockchain isn’t a solution to all of your business problems.
Like in any other project, you shouldn’t make critical technology decisions on hyped buzzwords.
Instead you should focus on the business value it delivers.
When we translate the blockchain characteristics to business values, it can potentially solve business problems in the following five key elements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#transparency&quot;&gt;Transparency&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#operation-harmonization&quot;&gt;Operation harmonization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#business-continuity&quot;&gt;Business continuity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#permanence&quot;&gt;Permanence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#security&quot;&gt;Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#thinking-decentralized&quot;&gt;Decentralized&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’ll discuss each element in detail and explain why blockchain technology can be an answer to that business problem.&lt;/p&gt;

&lt;h3 id=&quot;transparency&quot;&gt;Transparency&lt;/h3&gt;

&lt;p&gt;In a public blockchain network, by default every member of the ecosystem can access all transactions stored in the chain.
They can even access smart contracts.&lt;/p&gt;

&lt;p&gt;An example of improved transparency is in the supply chain. 
Documenting a product’s journey across the supply chain reveals its true origin and touchpoints, which increases trust and helps eliminate the bias found in today’s opaque supply chains.
Manufacturers can also reduce recalls by sharing logs with OEMs and regulators.&lt;/p&gt;

&lt;p&gt;Another potential use involves the recording of patents and intellectual property. 
Due to blockchain’s 100% transparency and its unforgeable nature, the information cannot be altered.
Because transactions are easily trackable, it’s the perfect solution for recording ownership of patents and properties.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can only achieve &lt;strong&gt;100% transparency&lt;/strong&gt; if you setup a public, permissionless blockchain network.
In a consortium- or private blockchain network, you &lt;strong&gt;can&lt;/strong&gt; define access rules to say which members can query certain information, which reduces its transparent nature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;operation-harmonization&quot;&gt;Operation harmonization&lt;/h3&gt;

&lt;p&gt;Because business logic is implemented as &lt;strong&gt;smart contracts&lt;/strong&gt;, and smart contracts are replicated over the different nodes that execute them, you have decentralized business logic.
This allows you to use the same open source technology in all departments of your business.
As a result, business processes are joint together, in contrast to Enterprise BPM, where business logic reuse is limited due to single enterprise data silos.&lt;/p&gt;

&lt;h3 id=&quot;business-continuity&quot;&gt;Business continuity&lt;/h3&gt;

&lt;p&gt;By using blockchain technology, you have less dependency on a central infrastructure.
That is because all nodes can execute transactions.
When one node goes down, other nodes take over the processing.
You can say that in a blockchain network, you have &lt;strong&gt;automatic failover&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;permanence&quot;&gt;Permanence&lt;/h3&gt;

&lt;p&gt;We already talked about the fact that activities in a blockchain cannot be undone.
They are &lt;strong&gt;immutable&lt;/strong&gt;.
Because of this characteristic, there’s an &lt;strong&gt;audit trail&lt;/strong&gt; of what happened in the system.&lt;/p&gt;

&lt;p&gt;You could say that this audit trail has a lot of similarities with the architectural pattern &lt;strong&gt;Event Sourcing&lt;/strong&gt;.
With Event Sourcing, all changes to application state are stored as a &lt;strong&gt;sequence of events&lt;/strong&gt;.
This is comparable to how transactions are stored in the blockchain.
It could be interesting to combine both blockchain technology and Event Sourcing principles in a project.&lt;/p&gt;

&lt;p&gt;If you want to learn more about Event Sourcing, make sure to visit the following pages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There’s an excellent article on &lt;a href=&quot;http://martinfowler.com/eaaDev/EventSourcing.html&quot;&gt;Martin Fowler’s blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our colleague Yannick De Turck also has a chapter on Event Sourcing in his &lt;a href=&quot;/microservices/2016/04/22/Lagom-First-Impressions-and-Initial-Comparison-to-Spring-Cloud.html#cqrs-and-event-sourcing&quot;&gt;blogpost about Lagom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ken Coenen has written about &lt;a href=&quot;/domain-driven%20design/2016/02/02/A-Decade-Of-DDD-CQRS-And-Event-Sourcing.html&quot;&gt;CQRS and Event Sourcing&lt;/a&gt; too after Ordina JWorks was present at &lt;a href=&quot;https://dddeurope.com&quot;&gt;DDD Europe&lt;/a&gt; back in 2016&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please note that you can only achieve &lt;strong&gt;full immutability&lt;/strong&gt; if you setup a public, permissionless blockchain network.
In a consortium or private blockchain network, transactions can be altered because you know the nodes that validate them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;security&quot;&gt;Security&lt;/h3&gt;

&lt;p&gt;Blocks are timestamped and protected with &lt;strong&gt;cryptographic technology&lt;/strong&gt; that is considered unbreakable.
If a block is added it can’t be removed or altered.
If you change a single bit of a transaction, the hash of this transaction will be completely different. 
So the &lt;strong&gt;merkle root&lt;/strong&gt; hash (Merkle trees are explained in the section &lt;a href=&quot;#what-is-blockchain&quot;&gt;What is blockchain&lt;/a&gt;) won’t be the same, the &lt;strong&gt;nonce&lt;/strong&gt; number will then be wrong and the block will be considered invalid.
In this way transactions are secure once chained to the blockchain.&lt;/p&gt;

&lt;p&gt;The cryptographic technology works with the principal of &lt;strong&gt;public and private keys&lt;/strong&gt;, but hashing is also a part of this technology.
The private key is linked to the public key, but you cannot find out the private key if you have the public key. 
The private key allows you to verify that you are the owner of the public key. 
To make transactions, you’ll need a unique key (private key) to make a digital signature to prove that you are the owner.
The private key is stored in your &lt;strong&gt;wallet&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your wallet doesn’t always need to contain money, it can also hold your identity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The network is also protected from (d)dos attacks because of the distributed nature of blockchain. 
If a hacker wants to take down the blockchain they would need to take down every node in the network. 
The proof-of-work can also help deter these attacks and spam because of the high costs of mining. 
Even if a hacker is able to penetrate one network and attempts to steal funds, there are multiple redundant copies of the same ledger stored around the world. 
If one is tampered with, the others could be used as a backup to prove what funds actually belong in each account.&lt;/p&gt;

&lt;h1 id=&quot;existing-platforms&quot;&gt;Existing platforms&lt;/h1&gt;

&lt;p&gt;We will now discuss a few platforms that can be used to set up a blockchain and also compare Bluemix and Azure.&lt;/p&gt;

&lt;p&gt;The first one is &lt;a href=&quot;https://www.ethereum.org/&quot;&gt;&lt;strong&gt;Ethereum&lt;/strong&gt;&lt;/a&gt;, a public blockchain. Ethereum looks like the Bitcoin blockchain, but it uses Ether as the currency.
It is faster than Bitcoin with a transaction taking seven seconds instead of ten minutes. 
We can also put smart contracts on the chain, with bitcoin you can only put transactions on there.&lt;/p&gt;

&lt;p&gt;Another big one we have is &lt;a href=&quot;https://www.hyperledger.org/&quot;&gt;&lt;strong&gt;Hyperledger&lt;/strong&gt;&lt;/a&gt;. 
This is a open source collaborative effort created by The Linux Foundation. 
Another big partner in Hyperledger is IBM because they helped them with development and donated some patents.
Hyperledger is also more focused on private networks.
The fun part is that you can run Hyperledger locally on your computer and try out the technology.
That brings us to &lt;a href=&quot;http://www.ibm.com/blockchain/&quot;&gt;&lt;strong&gt;IBM Blockchain&lt;/strong&gt;&lt;/a&gt;.
IBM’s Bluemix platform focusses on private blockchains.
It empowers businesses to digitize their transaction workflow through a highly secured, shared and replicated ledger.
The current technology possibilities weren’t cutting it in terms of privacy so they added their code and patents to the Hyperledger project.&lt;/p&gt;

&lt;p&gt;The next one is &lt;a href=&quot;http://www.multichain.com/&quot;&gt;&lt;strong&gt;Multichain&lt;/strong&gt;&lt;/a&gt;. 
Multichain is an open source private blockchain, which is Bitcoin compatible.&lt;/p&gt;

&lt;p&gt;Next up is &lt;a href=&quot;https://www.openchain.org/&quot;&gt;&lt;strong&gt;Openchain&lt;/strong&gt;&lt;/a&gt;. 
Openchain is a little bit special because it doesn’t use the concept of blocks but the transactions are directly chained with one another, which makes it a lot faster.
Openchain is an open source private blockchain. 
It also doesn’t use proof-of-work but proof-of-authority.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bigchaindb.com/&quot;&gt;&lt;strong&gt;BigChainDB&lt;/strong&gt;&lt;/a&gt; is not really a complete blockchain but it is more a database with blockchain features like: decentralization, immutability, public/private and consensus.
BigChainDB is also open source.&lt;/p&gt;

&lt;p&gt;Last but not least, we have &lt;a href=&quot;https://azure.microsoft.com/en-us/solutions/blockchain/&quot;&gt;&lt;strong&gt;Microsoft Azure blockchain&lt;/strong&gt;&lt;/a&gt; left to discuss.
As you may have guessed, Azure is the complete opposite of IBM’s Bluemix.
Azure focuses on being public, although this does not mean they don’t believe in the private model.
Microsoft has said that private networks will still be important for the commercial adaptation of the blockchain technology.
Microsoft also don’t dedicate their platform to one type of technology like Hyperledger for Bluemix but they support many different technologies like Ethereum, Hyperledger and more. 
They do have a preference though for Ethereum because they joined the Enterprise Ethereum Alliance.&lt;/p&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 2.5rem auto; width: 66%;&quot;&gt;
  &lt;div class=&quot;col-md-offset-3 col-md-6&quot; style=&quot;padding: 0;&quot;&gt;
	
&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Companies and consortiums&quot; src=&quot;/img/blockchain/partners.png&quot; /&gt;
    
    &lt;figcaption&gt;Table: IBM is part of Hyperledger and Microsoft is part of Enterprise Ethereum Alliance.&lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;thinking-decentralized&quot;&gt;Thinking decentralized&lt;/h1&gt;

&lt;p&gt;Last year, Ken Coenen gave a presentation about the popularity of APIs, and how companies team up to create innovative solutions.
Data is freed from their silos and made available through APIs.
It’s consumable for other departments and even other companies.
However, when you think about it, all of this data is centralized and we need extra effort to expose it to other parties.&lt;/p&gt;

&lt;p&gt;When working with blockchain technology, your data is &lt;strong&gt;decentralized by nature&lt;/strong&gt;.
It’s funny when you think about it…
Why do we want to store the data somewhere centralized in a silo and then make an extra effort to expose it?
Isn’t is easier to start decentralized from the beginning and give access to the people who need it?
What have we been doing all these years?&lt;/p&gt;

&lt;p&gt;We’ll give an example.
All applications implement their own user profile functionality.
All of this user data - &lt;strong&gt;your profile information&lt;/strong&gt; - is duplicated across many companies.
It’s already a big improvement that applications allow you to use another platform’s credentials.
Logging in with your Facebook or Google account is becoming a habit.
This gives the end user a way to minimize his/her digital footprint.
Don Tapscott explains this really well in summer 2016’s TED Talk &lt;a href=&quot;https://youtu.be/og7PCYlDYsU?t=849&quot;&gt;How the blockchain is changing money and business&lt;/a&gt;.
Of course, blockchain technology is still in its early stages.
It’s not even sure whether the technology will last.
Although these statements are purely hypothetical, we find much food for thought in them.&lt;/p&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 2.5rem auto; width: 66%; padding: 0;&quot;&gt;
  &lt;div class=&quot;col-md-offset-3 col-md-6&quot; style=&quot;padding: 0;&quot;&gt;
	
&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;Network types&quot; src=&quot;/img/blockchain/network-types.jpg&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;When talking with people about the possibilities of blockchain, it quickly becomes clear that we still have a long way to go.
People aren’t waiting for yet another technological revolution.
Instead, we need to start small.
Blockchain and distributed ledger technology in general will have to evolve naturally.&lt;/p&gt;

&lt;p&gt;Blockchain solutions like IBM Blockchain or Microsoft Azure Blockchain-as-a-Service make the technology very accessible to companies in an early stage.
We believe that a &lt;strong&gt;private blockchain network&lt;/strong&gt; is the &lt;strong&gt;best way to start&lt;/strong&gt; for a company because of the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Throwing all your data at the world is still a very scary idea&lt;/li&gt;
  &lt;li&gt;You have to take all &lt;strong&gt;legal aspects&lt;/strong&gt; into account (think of the EU’s new &lt;a href=&quot;http://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf&quot;&gt;General Data Protection Regulation&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;You can start small and expose some transactions by defining permissions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Companies are starting to develop applications on their proprietary Bluemix- or Azure platform, without exposing everything to the outside world.
Get inspired by visiting &lt;a href=&quot;http://dapps.ethercasts.com/&quot;&gt;State of the Dapps&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;recommended-reading&quot;&gt;Recommended reading&lt;/h1&gt;

&lt;p&gt;You can read the following books if you like to get a grasp on possible use cases which can be implemented using blockchain technology.
Please note that neither of these books will deep dive into the technical aspects.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.goodreads.com/book/show/24714901-blockchain&quot;&gt;Blockchain: Blueprint for a New Economy by Melanie Swan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.goodreads.com/book/show/25894041-blockchain-revolution&quot;&gt;Blockchain Revolution: How the Technology Behind Bitcoin Is Changing Money, Business, and the World by Don Tapscott, Alex Tapscott&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Ken&quot;, &quot;last_name&quot;=&gt;&quot;Coenen&quot;, &quot;twitter&quot;=&gt;&quot;CoenenKen&quot;, &quot;linkedin&quot;=&gt;&quot;coenenken&quot;, &quot;github&quot;=&gt;&quot;kencoenen&quot;, &quot;permalink&quot;=&gt;&quot;/author/ken-coenen/&quot;, &quot;avatar&quot;=&gt;&quot;ken-coenen.png&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Backend Practice Manager&quot;, &quot;email&quot;=&gt;&quot;ken.coenen@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Ken is a Principal Java Consultant at Ordina, passionate about all Java- and JavaScript related technologies. Aside from his day-to-day occupation as a consultant, he is also Backend Practice Manager of the Ordina JWorks unit. In this capacity, he narrows the gap between consultants and potential innovative customer projects. He does this by organizing workshops, talks and courses about the newest technologies, whereby people can grow in their role as a software consultant.&quot;}</name><email>ken.coenen@ordina.be</email></author><category term="Blockchain" /><category term="Blockchain" /><category term="Hyperledger" /><category term="Ethereum" /><category term="Smart contracts" /><summary type="html">A lot of people are talking about blockchain these days. They’re talking about blockchain as the next big thing after mainframes, computers, the internet and social networking. This introduction is the first part in a series of blockchain posts.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/blockchain/blockchainHeaderImagePNG.png" /></entry></feed>