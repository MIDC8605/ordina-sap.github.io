<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.1">Jekyll</generator><link href="https://ordina-jworks.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ordina-jworks.github.io/" rel="alternate" type="text/html" /><updated>2017-10-21T05:31:41+00:00</updated><id>https://ordina-jworks.github.io/</id><title type="html">Ordina JWorks Tech Blog</title><subtitle>We build innovative solutions with Java and JavaScript. To support this mission, we have several Competence Centers. From within those Competence Centers, we provide coaching to the employee and expert advice towards our customer. In order to keep in sync with the latest technologies and the latest trends, we frequently visit conferences around the globe.
</subtitle><entry><title type="html">First edition of the Ordina Architecture Kata</title><link href="https://ordina-jworks.github.io/architecture/2017/10/20/Ordina-Architecture-Kata.html" rel="alternate" type="text/html" title="First edition of the Ordina Architecture Kata" /><published>2017-10-20T00:00:00+00:00</published><updated>2017-10-20T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/architecture/2017/10/20/Ordina-Architecture-Kata</id><content type="html" xml:base="https://ordina-jworks.github.io/architecture/2017/10/20/Ordina-Architecture-Kata.html">&lt;blockquote&gt;
  &lt;p&gt;On the 18th of October 2017, Ordina Belgium organized the first &lt;strong&gt;Ordina Architecture Kata&lt;/strong&gt;.
The session was presided by Bart Blommaerts, cross-unit Competence Manager Architecture.
A group of sixteen senior consultants, with different areas of expertise, were gathered in Mechelen to practice software architecture.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-is-a-kata&quot;&gt;What is a Kata?&lt;/h2&gt;

&lt;p&gt;Kata is a Japanese word most commonly known for the presence in martial arts.
The English term for Kata is &lt;strong&gt;form&lt;/strong&gt; and it refers to the detailed choreographed patterns of movements practiced either solo or in pairs.&lt;/p&gt;

&lt;p&gt;You might know the saying &lt;strong&gt;practice makes perfect&lt;/strong&gt;, and Architectural Katas are exactly that: practicing.
These Katas were born out of a simple desire — Software architects need a chance to practice being software architects.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“So how are we supposed to get great architects, if they only get the chance to architect fewer than a half-dozen times in their career?” - Ted Neward&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pragmatic-architecture-today---recap&quot;&gt;Pragmatic Architecture Today - Recap&lt;/h2&gt;

&lt;p&gt;In his conference talk and blog post &lt;a href=&quot;https://ordina-jworks.github.io/architecture/2017/06/21/pragmatic-architecture-today.html&quot; target=&quot;_blank&quot;&gt;Pragmatic Architecture, Today&lt;/a&gt;, Bart Blommaerts discusses the need to think about Software Architecture.&lt;/p&gt;

&lt;p&gt;Since this is very relevant to this Architecture Kata, we recap quickly what we learned back then.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-need-an-architecture&quot;&gt;Why do we need an architecture?&lt;/h3&gt;

&lt;p&gt;We need to build a system.
A system is build for stakeholders.
Customers, users, developers, … are all stakeholders of a particular system.
Those stakeholders need to have a clear view on what needs to be built.&lt;/p&gt;

&lt;p&gt;Every system has an architecture, even those where architectural decisions weren’t formally made.&lt;/p&gt;

&lt;p&gt;An architecture is described in an Architectural Description.
This description is also particularly useful for the stakeholders.&lt;/p&gt;

&lt;p&gt;An Architectural Description uses views, which are shaped by perspectives.&lt;/p&gt;

&lt;h3 id=&quot;ooda&quot;&gt;OODA&lt;/h3&gt;

&lt;p&gt;OODA is a re-entrant feedback loop, that consists of four stages:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Observe: Listen to customers, gather requirements, available resources, …&lt;/li&gt;
  &lt;li&gt;Orient: Assess comparable systems, use your experience to make sense of your earlier observations.&lt;/li&gt;
  &lt;li&gt;Decide: From the orientation stage, multiple alternatives might need to be considered. 
In the decision stage, we take a decision.&lt;/li&gt;
  &lt;li&gt;Act: Act on your decision, implement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An exercise that can help you in the different stages, is to start with some bullet points and then writing them out explicitly.
Comparing the full text with the bullet points, will often be very insightful.&lt;/p&gt;

&lt;p&gt;To reach consensus when taking decisions, share these with customers, peers, … and verify if they share your ideas.&lt;/p&gt;

&lt;h2 id=&quot;visualization-of-the-architecture&quot;&gt;Visualization of the architecture&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;“One cannot see the ocean’s currents by studying drops of water” — Grady Booch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To a certain amount, you can derive business logic from the code.
One might say that the code is the truth, but not the whole truth.&lt;/p&gt;

&lt;p&gt;Goals of visualizing your architecture:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Consistency&lt;/li&gt;
  &lt;li&gt;Reporting — Architecture needs to be in the heads of the stakeholders&lt;/li&gt;
  &lt;li&gt;Checking and validating — Share the architecture with your different stakeholders&lt;/li&gt;
  &lt;li&gt;Share information — Other people might have experience with certain challenges&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;unified-modeling-language-uml&quot;&gt;Unified Modeling Language (UML)&lt;/h3&gt;

&lt;p&gt;Using a language like &lt;strong&gt;UML&lt;/strong&gt; can be useful, especially when doing model-driven development. 
Also, be very aware that this way of working can become very inefficient.
When you are not doing MDD, UML can still be used, if there is shared understanding of the created diagrams.&lt;/p&gt;

&lt;h3 id=&quot;boxes-and-lines&quot;&gt;Boxes and lines&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Boxes and lines&lt;/strong&gt; are a possibility too, and Bart recommends this more pragmatic approach.
Don’t make things more complex than they need to be, boxes and lines are fine.
Just make sure to be &lt;strong&gt;consistent&lt;/strong&gt; and always provide a &lt;strong&gt;legend&lt;/strong&gt;.
Also make sure your stakeholders understand what you’re drawing.
A legend will really help with getting the message across.
It’s important that you can discuss a matter while speaking a common language.&lt;/p&gt;

&lt;p&gt;Avoid fluffy diagrams and mixed abstractions.
Don’t mix eg. user interaction information with data flow information.&lt;/p&gt;

&lt;h3 id=&quot;decision-log&quot;&gt;Decision log&lt;/h3&gt;

&lt;p&gt;Document your decisions and alternatives in a &lt;strong&gt;Decision log&lt;/strong&gt;, also known as Architecture Decision Record (ADR).
It will prove itself useful in the future and requires you to think about a decision.&lt;/p&gt;

&lt;p&gt;There’s no need to invent the wheel here.
There are several templates for different use cases available on the internet, for example in &lt;a href=&quot;https://github.com/joelparkerhenderson/architecture_decision_record&quot; target=&quot;_blank&quot;&gt;this ADR repo&lt;/a&gt; on Github.&lt;/p&gt;

&lt;p&gt;Only document what’s useful.&lt;/p&gt;

&lt;h2 id=&quot;viewpoints&quot;&gt;Viewpoints&lt;/h2&gt;

&lt;p&gt;Views help you to make architectural decisions.
Bart explained the different views with sharp-cut examples.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Context View&lt;/strong&gt; — Describes the relationships, dependencies and interactions between the system and its environment.
Added in the second print of the book.
Bart thinks this might be the most important view of them all.
Every component is a part of the greater system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Functional View&lt;/strong&gt; — Defines the architectural elements that deliver the systems functionality.
It documents the systems functional structure.
You can make decisions on a functional level eg. two components are doing similar things.
Should they be separate components?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Information View&lt;/strong&gt; — Models the system data and its state.
The purpose of many applications today is capturing data.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sidenote: Data modeling can be a long and complex process.
As an architect, you need to do data modeling at an architecturally significant level of detail.
Go to the level of detail that is needed for your team of developers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Concurrency View&lt;/strong&gt; — Describes the concurrency structure of the system, mapping functional elements to concurrency units to clearly identify the parts of the system that can execute concurrently eg. process a file in blocks.
You can solve a lot with specific language constructs and asynchronous messaging.
If you want to dig deeper and want to know the nitty gritty details of messaging, a must-read is the book &lt;a href=&quot;https://www.goodreads.com/book/show/85012.Enterprise_Integration_Patterns&quot; target=&quot;_blank&quot;&gt;Enterprise Integration Patterns&lt;/a&gt; by Gregor Hohpe and Bobby Woolf.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Development view&lt;/strong&gt; — Describes the architecture that supports the software development process.
When you have an experienced development team, this can be very high-level.
Make sure you include the senior developers in the team, when constructing the development view.
They have the experience and on top of that… they will be more motivated to be part of the decision making process and technical vision.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deployment view&lt;/strong&gt; — Describes the physical environment into which the system will be deployed, including the system dependencies on its runtime environment.
Make sure you include all information relevant for deploying the application, eg. OS, Apache HTTPD, Tomcat, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Operational view&lt;/strong&gt; — Describe how the system will be operated, administered, and supported when it is running in its production environment.
You can use a state chart to describe the operations process.&lt;/p&gt;

&lt;h2 id=&quot;perspectives&quot;&gt;Perspectives&lt;/h2&gt;

&lt;p&gt;Perspectives shape the views for non-functional requirements.&lt;/p&gt;

&lt;p&gt;When you introduce perspectives, you’ll have to make trade-offs.
An architectural decision will favour certain perspectives and at the same time, hinder other perspectives.
For example, strong encryption favours security but hinders performance.&lt;/p&gt;

&lt;p&gt;Here’s a list of very plausible non-functional requirements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Accessibility&lt;/strong&gt; — Ability of the system to be used by people with disabilities.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Evolution&lt;/strong&gt; — Ability of the system to be flexible in the face of the inevitable change that all systems experience after deployment, balanced against the cost of providing such flexibility.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Location&lt;/strong&gt; — Ability of your system to overcome problems brought about by the absolute location of your system’s components.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Performance and scalability&lt;/strong&gt; — Ability of the system to predictably execute within its mandatory performance profile and to handle increased processing volumes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Regulation&lt;/strong&gt; — Ability of the system to conform to local and international laws, quasi-legal regulations, company policies, and other rules and standards.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt; — Ability of the system to reliably control, monitor and audit who can perform what actions on what resources and to detect and recover from failures in security mechanisms.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Usability&lt;/strong&gt; — The ease with which people who interact with the system can work effectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-kata&quot;&gt;The Kata&lt;/h2&gt;

&lt;p&gt;Our kata for today — AM.I.SCK&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Nurses that answer questions from patients via a chat platform.&lt;/li&gt;
  &lt;li&gt;250+ nurses&lt;/li&gt;
  &lt;li&gt;Access to medical histories&lt;/li&gt;
  &lt;li&gt;Assist nurses in providing medical diagnosis&lt;/li&gt;
  &lt;li&gt;Reach local medical staff, even ahead of time&lt;/li&gt;
  &lt;li&gt;Enable parts of the system for direct patient usage&lt;/li&gt;
  &lt;li&gt;Conversations are not considered medical records&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The sixteen attendees were divided in groups of four.&lt;/p&gt;

&lt;p&gt;Each team had fifteen to twenty minutes to brainstorm about the case and create the first four views on a whiteboard together.
Afterwards, each team had to present their views to the entire group.
Bart challenged our opinions and gave practical tips on how to improve our thinking.&lt;/p&gt;

&lt;p&gt;After a second theoretical deep dive about how perspectives can have an effect on your views, we did the same excercise for the last three views.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Ordina Architectural Kata&quot; src=&quot;/img/kata/banner-small.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h2&gt;

&lt;p&gt;The different viewpoints really complement each other.
When drawing a view, you’ll notice that you might be able to add more information to another view and vice versa.&lt;/p&gt;

&lt;p&gt;When drawing a context view, focus on the interactions with other systems.
Don’t be tempted in drawing eg. a frontend and a backend component for your system, unless these are separated by external systems.
That granularity is not important for the context view.&lt;/p&gt;

&lt;p&gt;One view can contain several diagrams (eg. you can have multiple state diagrams in the Information View), additional text, tables containing data, etc.&lt;/p&gt;

&lt;p&gt;Use the experience of every team member to draw the diagrams.
Think of similar projects and previous professional experiences.&lt;/p&gt;

&lt;h2 id=&quot;ordina-accelerator-2018&quot;&gt;Ordina Accelerator 2018&lt;/h2&gt;

&lt;p&gt;This course was part of the &lt;a href=&quot;https://ordina-accelerator.be/&quot; target=&quot;_blank&quot;&gt;Ordina Accelerator program&lt;/a&gt;.
With Accelerator, Ordina offers its employees the necessary tools to develop themselves further.
Not only technical-, but also social- and organizational skills are included in the program.&lt;/p&gt;

&lt;p&gt;Medior and Senior experts get the chance to literally &lt;strong&gt;accelerate their career&lt;/strong&gt; by extensively following courses and workshops over a period of two years.&lt;/p&gt;

&lt;h2 id=&quot;links-and-resources&quot;&gt;Links and resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Recommended reading: 
&lt;a href=&quot;https://www.goodreads.com/book/show/11686849-software-systems-architecture&quot; target=&quot;_blank&quot;&gt;Software Systems Architecture&lt;/a&gt; by Eoin Woods and Nick Rozanski.
In this book, they discuss Viewpoints and Perspectives&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nealford.com/katas/about.html&quot; target=&quot;_blank&quot;&gt;Architectural Katas&lt;/a&gt; on neilford.com&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://archkatas.herokuapp.com/&quot; target=&quot;_blank&quot;&gt;https://archkatas.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://groups.google.com/forum/#!forum/architecturalkatas&quot; target=&quot;_blank&quot;&gt;ArchitecturalKatas&lt;/a&gt; Google User Group&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://liminalthinking.com/&quot; target=&quot;_blank&quot;&gt;Liminal Thinking&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.enterpriseintegrationpatterns.com/&quot; target=&quot;_blank&quot;&gt;Enterprise Integration Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Ken&quot;, &quot;last_name&quot;=&gt;&quot;Coenen&quot;, &quot;twitter&quot;=&gt;&quot;CoenenKen&quot;, &quot;linkedin&quot;=&gt;&quot;coenenken&quot;, &quot;github&quot;=&gt;&quot;kencoenen&quot;, &quot;permalink&quot;=&gt;&quot;/author/ken-coenen/&quot;, &quot;avatar&quot;=&gt;&quot;ken-coenen.png&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Backend Practice Manager&quot;, &quot;email&quot;=&gt;&quot;ken.coenen@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Ken is a Principal Java Consultant at Ordina, passionate about all Java- and JavaScript related technologies. Aside from his day-to-day occupation as a consultant, he is also Backend Practice Manager of the Ordina JWorks unit. In this capacity, he narrows the gap between consultants and potential innovative customer projects. He does this by organizing workshops, talks and courses about the newest technologies, whereby people can grow in their role as a software consultant.&quot;}</name><email>ken.coenen@ordina.be</email></author><category term="Architecture" /><category term="Architecture" /><category term="Agile" /><category term="OODA" /><summary type="html">On the 18th of October 2017, Ordina Belgium organized the first Ordina Architecture Kata. The session was presided by Bart Blommaerts, cross-unit Competence Manager Architecture. A group of sixteen senior consultants, with different areas of expertise, were gathered in Mechelen to practice software architecture.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/kata/kata-6-thumb.jpg" /></entry><entry><title type="html">JavaOne 2017</title><link href="https://ordina-jworks.github.io/tech/2017/10/18/javaone.html" rel="alternate" type="text/html" title="JavaOne 2017" /><published>2017-10-18T00:00:00+00:00</published><updated>2017-10-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/tech/2017/10/18/javaone</id><content type="html" xml:base="https://ordina-jworks.github.io/tech/2017/10/18/javaone.html">&lt;p&gt;The last time I visited &lt;a href=&quot;https://www.oracle.com/javaone/index.html&quot; target=&quot;_blank&quot;&gt;JavaOne&lt;/a&gt; was back in 2014.
So, I was very excited to go back to San Francisco this year.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;image fit&quot; alt=&quot;Keynote&quot; src=&quot;/img/javaone/keynote.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;h2 id=&quot;jdk9&quot;&gt;JDK9&lt;/h2&gt;

&lt;p&gt;JDK9 was the “big topic” of JavaOne, with &lt;a href=&quot;https://www.youtube.com/watch?v=C5yX-elG4w0&quot; target=&quot;_blank&quot;&gt;Jigsaw&lt;/a&gt; getting a lot of attention.
Jigsaw might break some code (eg. code that uses internal Sun APIs), but Java modularity will surely help further adoption of Java.
Many libraries and frameworks already work together nicely with JDK9.
We saw this in a nice demo of &lt;a href=&quot;https://www.jetbrains.com/idea/&quot; target=&quot;_blank&quot;&gt;IntelliJ&lt;/a&gt; where the IDE does a lot of the Jigsaw heavy lifting.
Another interesting change, is that Java will have a new release every six months from now on.
These releases will also introduce a new &lt;a href=&quot;https://jaxenter.com/java-9-version-numbering-scheme-137544.html&quot; target=&quot;_blank&quot;&gt;numbering scheme&lt;/a&gt;, comparable to what Ubuntu has been using.
While I applaud the idea to deliver faster, it will definitely come with a learning effort, for developers.&lt;/p&gt;

&lt;h3 id=&quot;the-good-copbad-cop-guide-to-java-9&quot;&gt;The Good Cop/Bad Cop Guide to Java 9&lt;/h3&gt;

&lt;p&gt;A very entertaining talk on JDK9 was the one from &lt;a href=&quot;https://twitter.com/sjmaple&quot; target=&quot;_blank&quot;&gt;Simon Maple&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/shelajev&quot; target=&quot;_blank&quot;&gt;Oleg Šelajev&lt;/a&gt; from &lt;a href=&quot;https://zeroturnaround.com/&quot; target=&quot;_blank&quot;&gt;Zeroturnaround&lt;/a&gt; where they discussed pros and cons of &lt;a href=&quot;http://openjdk.java.net/projects/jigsaw/&quot; target=&quot;_blank&quot;&gt;JDK9 modules&lt;/a&gt;, &lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/g1gc-1984535.html&quot; target=&quot;_blank&quot;&gt;G1GC&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/JShell&quot; target=&quot;_blank&quot;&gt;JShell&lt;/a&gt; and other API updates.&lt;/p&gt;

&lt;p&gt;It was probably one of my favorite talks, because it was both funny and educational.&lt;/p&gt;

&lt;h2 id=&quot;fn-project&quot;&gt;FN Project&lt;/h2&gt;

&lt;p&gt;During the first Java keynote, the &lt;a href=&quot;http://fnproject.io/&quot; target=&quot;_blank&quot;&gt;FN Project&lt;/a&gt; was announced and open-sourced.
The FN project is a container native serverless platform that you can use on any platform supporting Docker.
This also means that local development becomes very easy, which isn’t always the case with other serverless solutions.
It has out of the box support Java, Go, Ruby, Python, PHP, and Node.js
I definitely look forward to playing with it.&lt;/p&gt;

&lt;h2 id=&quot;microservices-bof&quot;&gt;Microservices BOF&lt;/h2&gt;

&lt;p&gt;In the microservices BOF on Monday evening, &lt;a href=&quot;https://twitter.com/crichardson&quot; target=&quot;_blank&quot;&gt;Chris Richardson&lt;/a&gt; presented what must be the perfect summary of the current state of everything going on in the microservices landscape.
He created a &lt;a href=&quot;http://microservices.io/patterns/index.html&quot; target=&quot;_blank&quot;&gt;pattern language&lt;/a&gt; for microservice architectures at &lt;a href=&quot;http://microservices.io/&quot; target=&quot;_blank&quot;&gt;microservices.io&lt;/a&gt; that I find particularly interesting.
After Chris, &lt;a href=&quot;https://twitter.com/starbuxman&quot; target=&quot;_blank&quot;&gt;Josh Long&lt;/a&gt; proved that he can bring a 45 mins talk in 15 mins with only live coding which was very amusing to watch.
JavaOne surely showed us that microservices are still hot!&lt;/p&gt;

&lt;h2 id=&quot;acid-is-so-yesterday-maintaining-data-consistency-with-sagas&quot;&gt;ACID Is So Yesterday: Maintaining Data Consistency with Sagas&lt;/h2&gt;

&lt;p&gt;When creating a distributed system with microservices, using a database per microservice is generally seen as a best-practice.
A drawback of this approach is that transaction management becomes a big hurdle and ACID (Atomicity, Consistency, Isolation, Durability) is no longer a desirable option.
An alternative for ACID, is &lt;a href=&quot;http://www.dataversity.net/acid-vs-base-the-shifting-ph-of-database-transaction-processing/&quot; target=&quot;_blank&quot;&gt;BASE&lt;/a&gt;: Basically Available, Soft state, Eventual consistency.
BASE can be realized with &lt;a href=&quot;http://microservices.io/patterns/data/saga.html&quot; target=&quot;_blank&quot;&gt;sagas&lt;/a&gt;.
A saga is a sequence of local transactions.
Each local transaction updates the database and publishes a message or event to trigger the next local transaction in the saga.
If a local transaction fails because it violates a business rule then the saga executes a series of compensating transactions that undo the changes that were made by the preceding local transactions.&lt;/p&gt;

&lt;h2 id=&quot;clouds-and-containers&quot;&gt;Clouds and containers&lt;/h2&gt;

&lt;p&gt;As expected, a lot of talks focused on cloud deployment and operation.
One of the more interesting ones, compared the different container orchestration options and runtimes like Docker Swarm Mode, Kubernetes, Amazon ECS, Mesos/Marathon, Rancher and Triton.
The talk demoed some differences between (for example) &lt;a href=&quot;https://docs.docker.com/engine/swarm/stack-deploy/#set-up-a-docker-registry&quot; target=&quot;_blank&quot;&gt;Docker Stack&lt;/a&gt; and &lt;a href=&quot;https://kubernetes.io/&quot; target=&quot;_blank&quot;&gt;Kubernetes&lt;/a&gt;, like the scaling of pods vs. the scaling of services.
To make a correct choice between all options, it is imperative to take consistency, portability, build integration with CI / CD, community and transferability of skills into consideration.
Source code of the comparison is available &lt;a href=&quot;https://github.com/JMHReif/CloudsAndContainersDemoScripts&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;my-talk&quot;&gt;My Talk&lt;/h1&gt;

&lt;p&gt;My talk: &lt;a href=&quot;https://www.slideshare.net/secret/u70m0cjrWflo9n&quot; target=&quot;_blank&quot;&gt;10 Tips To Become An Awesome Technical Lead&lt;/a&gt; was scheduled on Thursday in the exquisite Marriott Marquis.
From the start, I had a lot of interaction with the attendees and that obviously is very motivating.
Thanks a lot for that!
I uploaded my slides on &lt;a href=&quot;https://www.slideshare.net/BartBlommaerts/javaone-2017-10-tips-to-become-an-awesome-technical-lead-v3&quot; target=&quot;_blank&quot;&gt;Slideshare&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;networking-events&quot;&gt;Networking Events&lt;/h1&gt;

&lt;h2 id=&quot;silicon-valley&quot;&gt;Silicon Valley&lt;/h2&gt;

&lt;p&gt;After landing in San Francisco, my colleague &lt;a href=&quot;https://twitter.com/andreasevers&quot; target=&quot;_blank&quot;&gt;Andreas&lt;/a&gt;, picked me up at the airport and we went to visit some of the most famous tech companies in Silicon Valley.
Silicon Valley, in the southern San Francisco Bay Area of California, is home to many start-up and global technology companies.
Apple, Facebook and Google are among the most prominent.
The size of some of these companies really was remarkable.
Visiting the HP garage, the Android statues etc. was a really great way to cope with jetlag :)&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit shadowed&quot; alt=&quot;Silicon Valley&quot; src=&quot;/img/javaone/google.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;Silicon Valley&quot; src=&quot;/img/javaone/hp.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;Silicon Valley&quot; src=&quot;/img/javaone/netflix.jpg&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;oracle-openworld-benelux-bike-tour-2017&quot;&gt;Oracle OpenWorld Benelux Bike Tour 2017&lt;/h2&gt;

&lt;p&gt;Sunday morning, Oracle Benelux organised a Bike Tour for the Benelux attendees, which I liked a lot.
We biked the typical San Francisco route: Fisherman’s Wharf, Fort Mason, the Marina, Golden Gate Bridge, Sausalito and then back by ferry.
Three years ago, I did a similar tour, but did not take the ferry back.
The ferry was actually very nice: passing Alcatraz and watching the San Francisco skyline pop up.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;Bike The Bridge&quot; src=&quot;/img/javaone/bikethebridge.jpg&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;social-events-and-parties&quot;&gt;Social events and parties&lt;/h2&gt;

&lt;p&gt;There are &lt;em&gt;a lot&lt;/em&gt; of parties happening during JavaOne.
One of the highlights, for me, was &lt;a href=&quot;https://twitter.com/hashtag/PartyOne?src=hash&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;PartyOne 2017&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://zeroturnaround.com/&quot; target=&quot;_blank&quot;&gt;ZeroTurnaround&lt;/a&gt;, &lt;a href=&quot;https://hazelcast.com/&quot; target=&quot;_blank&quot;&gt;Hazelcast&lt;/a&gt;, &lt;a href=&quot;http://www.tomitribe.com/&quot; target=&quot;_blank&quot;&gt;Tomitribe&lt;/a&gt; and &lt;a href=&quot;https://www.baincapital.com/&quot; target=&quot;_blank&quot;&gt;BainCapital&lt;/a&gt;.
This was an incredible opportunity to talk to some of the really big names of the Java industry in a very relaxed atmosphere as you can see in the following picture :)&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;PartyOne&quot; src=&quot;/img/javaone/partyone.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Another fun event, was &lt;a href=&quot;https://www.oracle.com/openworld/cloudfest.html&quot; target=&quot;_blank&quot;&gt;Oracle Cloud Fest&lt;/a&gt;: a concert of Ellie Goulding and The Chainsmokers in the AT&amp;amp;T Park.
We teamed up with our &lt;a href=&quot;https://www.ordina.nl&quot; target=&quot;_blank&quot;&gt;Ordina&lt;/a&gt; colleagues from the Netherlands to enjoy our last night in San Francisco.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;Oracle Cloud Fest&quot; src=&quot;/img/javaone/att.jpg&quot; /&gt;
&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Bart&quot;, &quot;last_name&quot;=&gt;&quot;Blommaerts&quot;, &quot;avatar&quot;=&gt;&quot;bart-blommaerts.png&quot;, &quot;twitter&quot;=&gt;&quot;DaggieBe&quot;, &quot;linkedin&quot;=&gt;&quot;bartblommaerts&quot;, &quot;github&quot;=&gt;&quot;bart-blommaerts&quot;, &quot;permalink&quot;=&gt;&quot;/author/bart-blommaerts/&quot;, &quot;title&quot;=&gt;&quot;Software Architect&quot;, &quot;title2&quot;=&gt;&quot;Competence Manager Architecture&quot;, &quot;email&quot;=&gt;&quot;bart.blommaerts@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Bart Blommaerts is a passionate Software Architect at Ordina, who believes closing the model-code gap is essential to make rapid, agile delivery sustainable. Bart has a strong focus on API design, reuse, automation and security. He is always looking for technical challenges.&quot;}</name><email>bart.blommaerts@ordina.be</email></author><category term="Tech" /><category term="javaone" /><category term="conference" /><summary type="html">The last time I visited JavaOne was back in 2014. So, I was very excited to go back to San Francisco this year.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/j1.jpg" /></entry><entry><title type="html">Stairway to Health with IoT and the MEAN stack</title><link href="https://ordina-jworks.github.io/iot/2017/10/12/Stairway-To-Health.html" rel="alternate" type="text/html" title="Stairway to Health with IoT and the MEAN stack" /><published>2017-10-12T00:00:00+00:00</published><updated>2017-10-12T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/iot/2017/10/12/Stairway-To-Health</id><content type="html" xml:base="https://ordina-jworks.github.io/iot/2017/10/12/Stairway-To-Health.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/css/lightbox.css&quot; /&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.9.0/js/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;Healthier at the office with the ‘Internet of Things’.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-is-stairway-to-health&quot;&gt;What is Stairway to Health&lt;/h2&gt;
&lt;p&gt;In an effort to improve worker health in a fun and engaging way, Proximus wanted to encourage their employees to take the stairs instead of the elevator.
This is when the idea of a little game between the three towers came along. 
On different dashboards across Proximus and on the Stairway to Health website, the employees could see which tower had the most employees taking the stairs.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;buildings&quot; src=&quot;/img/stairwaytohealth/buildings.jpg&quot; class=&quot;image fit&quot; /&gt;
&lt;img alt=&quot;overview&quot; src=&quot;/img/stairwaytohealth/overview.jpg&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;They can also get a more detailed look of how many people taking the stairs where and when, with drilldown views for monthly, weekly, daily, and even hourly statistics.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;details&quot; src=&quot;/img/stairwaytohealth/details.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;weekly&quot; src=&quot;/img/stairwaytohealth/weekly.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;daily&quot; src=&quot;/img/stairwaytohealth/daily.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-does-it-do&quot;&gt;What does it do?&lt;/h2&gt;
&lt;p&gt;The Stairway to Health project is a simple yet great example to show what the Internet of Things can do:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;LoRa sensors detect door openings, these are installed on the doors of the staircases&lt;/li&gt;
  &lt;li&gt;These sensors communicate via the Proximus LoRa network to report their status&lt;/li&gt;
  &lt;li&gt;Sensor data is sent to the Proximus MyThings platform which processes the data&lt;/li&gt;
  &lt;li&gt;The data gets sent to the Stairway to Health application&lt;/li&gt;
  &lt;li&gt;The Stairway to Health application interprets and visualizes the data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In summary: 
We install sensors on the doors (things) to measure usage and we analyse the data to persuade people to move more. 
The result is a good example of how IoT can influence our daily lives. 
Proximus was able to provide us with all the necessary building blocks to offer a complete end-to-end solution!&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;dataflow&quot; src=&quot;/img/stairwaytohealth/dataflow.jpg&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mythings-and-stairway-to-health&quot;&gt;MyThings and Stairway to Health&lt;/h2&gt;
&lt;p&gt;MyThings is the Proximus IoT platform for onboarding, managing, configuring and monitoring IoT sensors. By registering (onboarding) our sensors to the platform, we can let MyThings take care of decoding the messages and set up a stream to our application.
This way every time a log comes in from the sensor, we get the decoded data posted to our designated endpoint.&lt;/p&gt;

&lt;h2 id=&quot;the-requirements&quot;&gt;The Requirements&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The usage of the stairways is measured and the results should be visualized on large screens in the towers.&lt;/li&gt;
  &lt;li&gt;These screens should have a QR code so that employees can easily visit the application on their mobile devices.&lt;/li&gt;
  &lt;li&gt;When visiting the website, they should be able to click on the results to get a more detailed view of the data.&lt;/li&gt;
  &lt;li&gt;The frontend application should be available in Dutch and French and the dashboard should switch between these languages every minute when viewing it on the large screens.&lt;/li&gt;
  &lt;li&gt;Admins should be able to manage locations (towers) and chart timespans.&lt;/li&gt;
  &lt;li&gt;It should have an info page with some information about the project and its purpose.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So technically this translates to build an application that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Has an endpoint to receive logs from the MyThings Application,&lt;/li&gt;
  &lt;li&gt;Stores the data to its own database,&lt;/li&gt;
  &lt;li&gt;Show the data in charts that have multiple layers to see more/less details,&lt;/li&gt;
  &lt;li&gt;Shows the ratio of the results per tower,&lt;/li&gt;
  &lt;li&gt;The frontend dashboard data has to reload automatically (since it is shown on some big screens @ Proximus),&lt;/li&gt;
  &lt;li&gt;Add multi-language (automatically switch languages when viewing on tower’s large screens),&lt;/li&gt;
  &lt;li&gt;Is performant (able to handle many logs coming in and calculate the data to be displayed in the graphs),&lt;/li&gt;
  &lt;li&gt;CRUDs for managing timespans and locations,&lt;/li&gt;
  &lt;li&gt;Use the timespans / locations when displaying data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh, and did we mention we were only given four weeks to complete this mission…&lt;/p&gt;

&lt;h2 id=&quot;the-ingredients&quot;&gt;The Ingredients&lt;/h2&gt;
&lt;p&gt;So given all the requirements listed above and the fact we didn’t have a lot of time to waste, 
we chose to use a &lt;strong&gt;MEAN (TypeScript)&lt;/strong&gt; stack. 
MEAN stands for MongoDB Express Angular and NodeJS. 
It’s possible to use the mean stack with plain JavaScript, 
we chose to implement it with TypeScript since we wanted some strong typings on the backend application and we were going to use Angular 4 on the frontend which comes with TypeScript as well.&lt;/p&gt;

&lt;h3 id=&quot;nodejs&quot;&gt;NodeJs:&lt;/h3&gt;
&lt;p&gt;Write event driven applications with asynchronous I/O powered by the ultra fast Google V8 Engine. 
Mostly known for running your local dev environment and automating build tasks for frontend developers. 
NodeJS is probably one of the best and easiest options out there for real-time applications (with socket.io), 
which is exactly what we needed for our application.&lt;/p&gt;

&lt;h3 id=&quot;mongodb&quot;&gt;MongoDB:&lt;/h3&gt;
&lt;p&gt;Great to work with when dealing with JavaScript Objects. Good driver support with Mongoose for NodeJs. 
Document based structure, which makes it really flexible when it comes to modelling and it’s extremely scalable. 
We also took advantage of the very performant aggregation functionality for dealing with large amounts of data.&lt;/p&gt;

&lt;h3 id=&quot;expressjs&quot;&gt;ExpressJS:&lt;/h3&gt;
&lt;p&gt;A node framework that comes with some great functionality for setting up your node server and makes it easy to create routes, 
middleware, handling requests/responses, serving files from the filesystem, configuring static files, easy connections to the database, 
and much more.&lt;/p&gt;

&lt;h3 id=&quot;angular4&quot;&gt;Angular(4):&lt;/h3&gt;
&lt;p&gt;A TypeScript-based open-source frontend web application platform led by the Angular Team at Google and by a community of individuals and corporations to address all of the parts of the developer’s workflow while building complex web applications.&lt;/p&gt;

&lt;h3 id=&quot;socketio&quot;&gt;Socket.IO:&lt;/h3&gt;
&lt;p&gt;Socket.IO enables real-time bidirectional event-based communication. It works on every platform, browser or device, focusing equally on reliability and speed. To trigger events on our frontend application we used this great library to be able to detect when new data has been received and refresh the dashboard.&lt;/p&gt;

&lt;h3 id=&quot;highcharts&quot;&gt;Highcharts:&lt;/h3&gt;
&lt;p&gt;Interactive JavaScript library for creating dynamic charts. Highcharts is based on native browser technologies and not reinvent the wheel. Thousands of developers have contributed their work for us to use in our own projects. Also backwards compatible for IE.&lt;/p&gt;

&lt;h2 id=&quot;javascript-across-the-stack&quot;&gt;JavaScript across the stack&lt;/h2&gt;
&lt;p&gt;Not only does it make development quite a bit faster and easier by having a large community with lots of reusable code for your application (npm), it also lowers the barriers between frontend and backend developers by using the same programming language over the entire stack, so more efficiency and faster, leaner development which in turn means lower development costs. 
Also worth noting is that JavaScript currently is THE most popular programming language, so more developers will be able to easily understand and contribute to the application if needed. 
And probably the most important criteria: when it comes to cloud hosting, RAM is probably the main influencing factor when it comes to pricing. NodeJs uses less RAM than comparable Java applications.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;performance&quot; src=&quot;/img/stairwaytohealth/performance.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:800px;&quot; /&gt;
&lt;small style=&quot;font-size: 70%;&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.ibm.com/developerworks/library/mo-nodejs-1/index.html&quot;&gt;Source and more about these tests&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Now that I’ve listed some of the pros of full-stack JS, I should also mention that it might not be the best solution for computation-heavy backend applications.
For projects like machine learning or heavy mathematical calculations the single CPU core and having only one thread that processes one request at a time might be easily blocked by a single compute-intensive task. 
Yet, there are numerous ways to overcome this limitation. 
By simply creating child processes or breaking complex tasks into smaller independent microservices.&lt;/p&gt;

&lt;p&gt;Let me just note that the comparison with Java above here is not because we are claiming that one is better than the other, it’s just to demonstrate that they both have their use cases and can be equally worth considering when choosing a technology for your application.&lt;/p&gt;

&lt;p&gt;Some great use cases for JavaScript across the stack are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;real-time chat,&lt;/li&gt;
  &lt;li&gt;Internet of Things,&lt;/li&gt;
  &lt;li&gt;real-time finance (stocks),&lt;/li&gt;
  &lt;li&gt;monitoring applications,&lt;/li&gt;
  &lt;li&gt;event-driven applications,&lt;/li&gt;
  &lt;li&gt;server-side proxies,&lt;/li&gt;
  &lt;li&gt;many more…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;blocking-vs-non-blocking&quot;&gt;Blocking vs. Non-Blocking&lt;/h3&gt;
&lt;p&gt;In NodeJs you can take advantage of JavaScript promises. 
One of the benefits of this is that we can write non-blocking code.
To demonstrate how this works, I’ll give you an example in pseudo code for reading a file from the filesystem.&lt;/p&gt;

&lt;h3 id=&quot;blocking&quot;&gt;Blocking:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;read file from filesystem, set equal to &quot;contents&quot;&lt;/code&gt;&lt;br /&gt; 
&lt;code&gt;print content&lt;/code&gt;&lt;br /&gt; 
&lt;code&gt;do something else&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;non-blocking&quot;&gt;Non-Blocking:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;read file from filesystem&lt;/code&gt;&lt;br /&gt; 
&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Whenever we're complete print contents &lt;span style=&quot;color:#e7904b;&quot;&gt;(callback)&lt;/span&gt; 
&lt;/code&gt; 
&lt;br /&gt; 
&lt;code&gt;do something else&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;blocking-vs-non-blocking&quot; src=&quot;/img/stairwaytohealth/blocking-vs-non-blocking.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:800px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-up-our-dev-environment--build&quot;&gt;Setting up our dev environment / build&lt;/h2&gt;
&lt;p&gt;The frontend part of this was really easy. 
We used angular-cli to generate a new project. 
In the future this also gave us the advantage of generating new components, services, pipes, testing and much more. 
Also for the charts and translations we choose for easy to use libraries like Highcharts and ngx-translate (previous ng2-translate).&lt;/p&gt;

&lt;p&gt;For the backend we decided to go with gulp. 
We added some tasks to transpile our server site TypeScript files to JavaScript so that node can execute it. 
For local serving we created a sequence task that combines running &lt;code class=&quot;highlighter-rouge&quot;&gt;ng build&lt;/code&gt; from the angular-cli and a gulp task to use &lt;code class=&quot;highlighter-rouge&quot;&gt;nodemon&lt;/code&gt; for running our server and restarting on changes. 
When working on the frontend, doing an ‘ng build’ was a bit too slow, therefore we added a &lt;code class=&quot;highlighter-rouge&quot;&gt;--standalone&lt;/code&gt; flag, to the serve task so that we could just build the backend application and do the frontend serve with &lt;code class=&quot;highlighter-rouge&quot;&gt;ng serve&lt;/code&gt; which is a lot more performant than having to do a ‘ng build’ on every change.
Since we are using TypeScript throughout the application, it only felt right to use the TypeScript version of gulp as well. 
It takes a little effort to get used to, but once you get the hang of it, it makes writing gulp tasks a lot more fun and less error prone.
Using the provided decorators, our gulp tasks look something like the following:&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./dist/app/server/config/mongo.connection.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;yargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'prod'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mongodb://localhost:27017/stairway'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./secrets'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mongoUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./dist/app/server/config'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and create sequence tasks with:&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;SequenceTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mocha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'buildApp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'runMochaTests'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now that we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.ts&lt;/code&gt; file, we need to ensure that the gulpfile gets transpiled as well, we did this by adding an npm script, so that we can use TypeScript compiler with the &lt;code class=&quot;highlighter-rouge&quot;&gt;tsc&lt;/code&gt; command to transpile the file and make sure we are using the latest changes every time we use gulp.
(to get the tsc command, install typescript globally with npm)&lt;/p&gt;

&lt;h2 id=&quot;building-stairway-to-health&quot;&gt;Building Stairway to Health&lt;/h2&gt;
&lt;p&gt;After setting up our dev environment, database and getting a simple application up and running it’s time to start implementing our first features.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Receiving data from MyThings&lt;/strong&gt;&lt;br /&gt;
So first things first, on MyThings we took a look at how we were going to structure the data that was going to be streamed to the Stairway to Health application.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;stream.png&quot; src=&quot;/img/stairwaytohealth/stream.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the MyThings application every sensor can have a &lt;code class=&quot;highlighter-rouge&quot;&gt;friendlyName1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;friendlyName2&lt;/code&gt;, we used these to specify which tower and which floor they represent. 
The sensors send a lot more data than just the magnetic pulse counts, therefore we needed the &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt; field, to be able to filter on &lt;code class=&quot;highlighter-rouge&quot;&gt;counter&lt;/code&gt; logs only (however, we store the other messages as well, maybe for future use). 
The &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; field is the amount of times the sensor was triggered, in other words, the actual counts. And of course a &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp&lt;/code&gt; since we will show the data in time based graphs.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp&lt;/code&gt; represents the time that the sensor has sent its message to the MyThings application, we also wanted to keep track of when our application has received the log, so before saving we added one extra field to store this in our database.&lt;/p&gt;

&lt;p&gt;After we defined our model/schema of our logs, it was simply adding an endpoint to our express router and our first feature was ready. 
Well not exactly, we needed to trigger an event to refresh the data on our dashboard, but we’ll get back to this later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Dashboard&lt;/strong&gt;&lt;br /&gt;
Since we created an Angular(4) application, we took advantage of the great features of angular-cli which makes it really easy to get a new project up and running and generate new components, services, tests and much more. 
We started by adding all the components needed for the application and adding the Proximus styling to the project. 
After that we imported the Highcharts library from npm to first make the charts on the homepage and later making the charts for the detailed views. 
All the charts were first made with mock data so that we could perfectly say from the backend what data we needed and in which format. 
From now on we knew how our JSON for the charts had to be made and we could implement the api endpoints for the dashboard and the details page. 
Finally after adding all the charts we started on adding the different languages to the application. Here we got our biggest ‘lesson learned’, it is much faster to start with I18N then to end with it, this is because you have to find all the normal text in the HTML files and copy them to the JSON-files. 
ALso we had to quickly create a translation list that the business could translate for us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mongo Aggregates&lt;/strong&gt;&lt;br /&gt;
As for displaying the daily, weekly and total counts below the buildings, we had to get this data from the database, keeping in mind that we would have to iterate over millions of sensor logs (at the time of writing this blog post, 1.4 million over 4 months). We had to make sure it was performant. This is where the Mongo aggregates come in handy. Instead of looping over the results and adding them up, we let Mongo take care of this with the &lt;code class=&quot;highlighter-rouge&quot;&gt;$sum&lt;/code&gt; operator which in code looks like the following:&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sensorLogModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'counter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$ne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}},&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// group them by fn1 (tower) and add up all 'value' fields&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$friendlyName1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Remember, we store all the logs, but we only need counter logs. So for a little more performance, we leave out the ones with value 0 (a lot of them in the weekends), that’s what the &lt;code class=&quot;highlighter-rouge&quot;&gt;$match&lt;/code&gt; is for&lt;/em&gt;
The result: an array with objects that have an &lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt; field with &lt;code class=&quot;highlighter-rouge&quot;&gt;friendlyName1&lt;/code&gt; as value and a &lt;code class=&quot;highlighter-rouge&quot;&gt;total&lt;/code&gt; field with the sum of all (counter) values per tower. We repeat this for daily and weekly, but add a start and end date (which we simply create with TypeScript). &lt;code class=&quot;highlighter-rouge&quot;&gt;$match&lt;/code&gt; then looks something like this:&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;$match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'counter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;$ne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;$gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Later on we added some more calls to get the data by time span and location for the more detailed chart data, but you get the idea, we simply edit the timestamps or &lt;code class=&quot;highlighter-rouge&quot;&gt;friendlyName1&lt;/code&gt; (also by &lt;code class=&quot;highlighter-rouge&quot;&gt;friendlyName2&lt;/code&gt; on the hourly chart, which displays the hourly data per floor).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Socket.IO&lt;/strong&gt;&lt;br /&gt;
Now that we have data that can be retrieved and displayed on the frontend, time to implement some way to let our frontend application know when we receive some new data, so that it in turn can do a request for that new data.&lt;/p&gt;

&lt;p&gt;For this one to be clear we’re going to skip ahead in time and show a high level scheme of how the application is made up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/stairwaytohealth/folder-structure.png&quot; data-lightbox=&quot;structure&quot; data-title=&quot;Structure&quot;&gt;
    &lt;img alt=&quot;folder-structure&quot; src=&quot;/img/stairwaytohealth/folder-structure.png&quot; class=&quot;image fit&quot; style=&quot;margin:0px auto; max-width:800px;&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The bin (js) file is where we create our http, https and socket servers. To communicate between them, we use the node event emitter. 
The &lt;code class=&quot;highlighter-rouge&quot;&gt;server.ts&lt;/code&gt; file (let’s call it the app) gets bootstrapped onto these servers and when creating the app, we pass the created event emitter to it. 
This enables us to listen and broadcast events back and forward. 
The event emitter emits events between the backend services and the socket.io server emits events to our frontend application.&lt;/p&gt;

&lt;p&gt;So in our case, to let the frontend know when the sensor-log endpoint has received a message, we emit a &lt;code class=&quot;highlighter-rouge&quot;&gt;log-received&lt;/code&gt; event on the node event emitter. 
In the socket IO server we are listening on this event and we broadcast a &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; event to every connected frontend application. 
The frontend applications are listening for this &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; event and refresh their data by calling the dashboard endpoints.
However, since we have about 60 sensors sending data, this event was triggering quite a lot and with the chart rendering animations on our frontend application we had to wrap the &lt;code class=&quot;highlighter-rouge&quot;&gt;log-received&lt;/code&gt; in a timeout so that we would only refresh it once every 30 seconds (if a log was received).&lt;/p&gt;

&lt;p&gt;I’ve picked a few lines of code from our bin file to demonstrate how we pass the &lt;code class=&quot;highlighter-rouge&quot;&gt;eventEmitter&lt;/code&gt; when bootstrapping our application on to the http and https services from node.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../dist/app/server'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'events'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventEmitter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EventEmitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eventEmitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpsServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eventEmitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, we bootstrap the created https server on to the socket.io application. It too gets the same &lt;code class=&quot;highlighter-rouge&quot;&gt;EventEmitter&lt;/code&gt; instance passed into its constructor.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'socket.io'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;httpsServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../dist/app/sockets'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ioApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Sockets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventEmitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our sockets file, the method that gets executed will listen on the &lt;code class=&quot;highlighter-rouge&quot;&gt;logsReceived&lt;/code&gt; from our passed EventEmitter, and emits a &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; event on our &lt;code class=&quot;highlighter-rouge&quot;&gt;io&lt;/code&gt; instance.&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eventEmitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;eventEmitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'logsReceived'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/socket/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;configuration-crud&quot;&gt;Configuration CRUD&lt;/h2&gt;
&lt;p&gt;Since we did not want our configuration to be hard coded, we added some configuration screens to be able to change the time spans and entities (towers).&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin:0px auto;&quot;&gt;
    &lt;a href=&quot;/img/stairwaytohealth/crud1.png&quot; data-lightbox=&quot;crud&quot; data-title=&quot;Entities CRUD&quot;&gt;
        &lt;img alt=&quot;crud1&quot; src=&quot;/img/stairwaytohealth/crud1.png&quot; class=&quot;image fit&quot; style=&quot;width: 48%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/stairwaytohealth/crud2.png&quot; data-lightbox=&quot;crud&quot; data-title=&quot;Timespans CRUD&quot;&gt;
        &lt;img alt=&quot;crud2&quot; src=&quot;/img/stairwaytohealth/crud2.png&quot; class=&quot;image fit&quot; style=&quot;width: 48%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;br /&gt;
&lt;/div&gt;

&lt;p&gt;By the way, ‘gewicht’ in the first image stands for weight. 
To make sure the ratios are fair, we made sure that every tower has a ‘weight’ to multiply its log values by. 
These weights are calculated by the amount of employees/tower, with the largest tower having a weight of 1.&lt;/p&gt;

&lt;p&gt;Let’s take a look at how we set up our backend structure for creating crud endpoints.
In our &lt;code class=&quot;highlighter-rouge&quot;&gt;/routes&lt;/code&gt; directory we keep all files that define the urls and methods of every endpoint, and tell it which controller and method to use:&lt;br /&gt;
&lt;em&gt;timespan.route.ts&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/timespan/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NextFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timespanController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTimespanList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/timespan/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NextFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timespanController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTimespan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;next under our &lt;code class=&quot;highlighter-rouge&quot;&gt;/controllers&lt;/code&gt; directory we have our controllers where all our functionality/logic is&lt;br /&gt;
&lt;em&gt;timespan.controller.ts&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getTimespanList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NextFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timespanModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;authentication&quot;&gt;Authentication&lt;/h2&gt;
&lt;p&gt;To prevent everyone from changing these configurations of course we had to add some authentication functionality. 
As you can see in the router code above, we created an authentication middleware so that on every route that we want the user to be authenticated, we can simply add &lt;code class=&quot;highlighter-rouge&quot;&gt;this.authenticate()&lt;/code&gt; to the route. 
This checks a JWT token in the headers. 
We check the token to be valid. 
If it’s not valid, we send an &lt;code class=&quot;highlighter-rouge&quot;&gt;unauthorized&lt;/code&gt; response, and if it is valid, we decode it and add it as a user object on the request. 
This way we can access it in the controller and do some logic depending on its role, etc.
&lt;code class=&quot;highlighter-rouge&quot;&gt;this.authenticate&lt;/code&gt; is a method we added to the &lt;code class=&quot;highlighter-rouge&quot;&gt;core.route.ts&lt;/code&gt;.
Every route extends this super class so that we can put common code and middleware in this file.&lt;/p&gt;

&lt;p&gt;JWT stands for JSON Web Token and is a JSON-based open standard for creating access tokens that assert some number of claims. 
For example, a server could generate a token that has the claim &lt;code class=&quot;highlighter-rouge&quot;&gt;logged in as admin&lt;/code&gt; and provide that to a client. 
The client could then use that token to prove that he is logged in as admin.&lt;/p&gt;

&lt;h2 id=&quot;deploy&quot;&gt;Deploy&lt;/h2&gt;
&lt;p&gt;Finally we deployed it to the Proximus data center and watched the Proximus employees take on the challenge.&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin: 0px auto;&quot;&gt;
    &lt;a href=&quot;/img/stairwaytohealth/result1.jpg&quot; data-lightbox=&quot;results&quot; data-title=&quot;Large screen @ Proximus towers&quot;&gt;
        &lt;img alt=&quot;result1&quot; src=&quot;/img/stairwaytohealth/result1.jpg&quot; class=&quot;image fit&quot; style=&quot;width: 61.45%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/img/stairwaytohealth/result2.jpg&quot; data-lightbox=&quot;results&quot; data-title=&quot;Informing the employees&quot;&gt;
        &lt;img alt=&quot;result2&quot; src=&quot;/img/stairwaytohealth/result2.jpg&quot; class=&quot;image fit&quot; style=&quot;width: 34.55%; display: inline-block;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;After four hard weeks of working and writing many lines of code, we delivered our project to Proximus and the contest could start.
 Things we would have done differently:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use mongo indexes and aggregation for large amounts of data&lt;/li&gt;
  &lt;li&gt;Use javascript date in stead of timestamps in mongo, easier to create aggregate with dates&lt;/li&gt;
  &lt;li&gt;Dockerize! So far, the most work has gone into getting the application deployed&lt;/li&gt;
  &lt;li&gt;Implement I18N translations at the beginning, as it is better to add translations while working on the component&lt;/li&gt;
  &lt;li&gt;Also we learned how complicated it can be to have one component with multiple switching charts. Instead of switching components.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Michael&quot;, &quot;last_name&quot;=&gt;&quot;Vervloet&quot;, &quot;permalink&quot;=&gt;&quot;/author/michael-vervloet/&quot;, &quot;avatar&quot;=&gt;&quot;michael-vervloet.jpg&quot;, &quot;linkedin&quot;=&gt;&quot;michaelvervloet&quot;, &quot;github&quot;=&gt;&quot;MiVvlt&quot;, &quot;title&quot;=&gt;&quot;SoftWare Engineer&quot;, &quot;title2&quot;=&gt;&quot;JavaScript Developer&quot;, &quot;email&quot;=&gt;&quot;michael.vervloet@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Michael is a full stack JavaScript developer specializing himself in backend development with NodeJs and Express, with a solid background of frontend/hybrid mobile development. As a member of Ordina's core 'Internet of Things' team he has collaborated on some challenging and innovative IoT applications.&quot;}</name><email>michael.vervloet@ordina.be</email></author><category term="IoT" /><category term="NodeJS" /><category term="MongoDB" /><category term="Angular" /><category term="Angular4" /><category term="ExpressJS" /><category term="Express" /><category term="TypeScript" /><category term="Angular-CLI" /><category term="Gulp" /><category term="Internet of Things" /><category term="IoT" /><category term="LoRa" /><category term="Proximus" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/stairwaytohealth/stairway-to-health.jpg" /></entry><entry><title type="html">Percona Live 2017 Dublin</title><link href="https://ordina-jworks.github.io/conference/2017/10/09/perconaLive2017.html" rel="alternate" type="text/html" title="Percona Live 2017 Dublin" /><published>2017-10-09T00:00:00+00:00</published><updated>2017-10-09T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2017/10/09/perconaLive2017</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2017/10/09/perconaLive2017.html">&lt;p&gt;
  &lt;img class=&quot;image fit&quot; alt=&quot;Percona Live Europe Dublin Logo&quot; src=&quot;/img/percona-live-2017/logo.png&quot; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Percona Live Europe is a yearly conference on open source database organized by &lt;a href=&quot;https://www.percona.com/live/e17/&quot; target=&quot;_blank&quot;&gt;Percona&lt;/a&gt;.
We had the opportunity to attend this year’s conference in the beautiful city of Dublin.
Beside enjoying the local brews and drafts we attended several sessions out of which we highlight some sessions in this blog post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;mongodb-shootout-mongodb-atlas-azure-cosmosdb-and-doing-it-yourself&quot;&gt;MongoDB Shootout: MongoDB Atlas, Azure CosmosDB and Doing It Yourself&lt;/h2&gt;

&lt;p&gt;When running MongoDB in the cloud, you have several options. 
David Murphy compared &lt;a href=&quot;https://www.mongodb.com/cloud/atlas&quot; target=&quot;_blank&quot;&gt;MongoDB Atlas&lt;/a&gt;, &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/cosmos-db/introduction&quot; target=&quot;_blank&quot;&gt;CosmosDB&lt;/a&gt; and the good old DIY.&lt;/p&gt;

&lt;p&gt;Using Atlas, you get monitoring, automation and the possibility to pay for backups.
You pay per instance and you have a wide variety of instances and regions to choose from on AWS, GCP and Azure.
The biggest downside is that the cost is about 44% more than running you own servers in the cloud.
This means that, in contrast to DIY, you continuously pay more instead of writing off your initial investment and paying less in the end.
The monitoring is really good but the problem here is that if you have have a polyglot environment with your own monitoring and alerting, you can not integrate it with Atlas so you end up with yet another tool.
Upgrading is really easy and just a click of the button thanks to the automation.
Backups need to be paid for per GB and are taken continuously.&lt;/p&gt;

&lt;p&gt;CosmosDB is offered by Microsoft on Azure and claims to be MongoDB compatible. 
This is not completely true because they have no support for the aggregation framework.
So you can only use it for simple CRUD operations.
The pricing is based on a pay-per-operation model which means it’s really hard to figure out what your cost will be and how it will evolve over time.
Here you also have the downside of continuously paying more than DIY.
The monitoring is very basic and of no help when you run into problems or strange behaviour, it’s like a black box.
Upgrading is done behind the scenes which means you don’t have to worry unless the upgrade means your code is no longer compatible, then you are stuck.
Backups are very basic because they are taken approximately every four hours and only the latest 2 backups are stored.&lt;/p&gt;

&lt;p&gt;DIY has the most power to offer IF you have a mature, and complete DevOps team.
With DIY you pay a high price up-front for hardware and people.
You need to implement your own monitoring, i.e. with the &lt;a href=&quot;https://www.elastic.co/products&quot; target=&quot;_blank&quot;&gt;Elastic stack&lt;/a&gt; or Percona’s &lt;a href=&quot;https://www.percona.com/doc/percona-monitoring-and-management/index.html&quot; target=&quot;_blank&quot;&gt;PMM&lt;/a&gt;.
Also, automation is a big part of the effort.
And last but not least, you need to implement your own backup strategy.
The biggest upside is that you have full control over what you implement and how you do things.
You choose the cloud service provider or the hardware you want to use.
You choose what you want to monitor and how you alert.
You choose how often and when you backup.
But of course, it’s all up to you.&lt;/p&gt;

&lt;h2 id=&quot;visualize-your-data-with-grafana&quot;&gt;Visualize Your Data With Grafana&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://grafana.com/&quot; target=&quot;_blank&quot;&gt;Grafana&lt;/a&gt; is used to build monitoring dashboards based on time series data.
Grafana supports a wide range of &lt;a href=&quot;https://grafana.com/plugins?type=datasource&quot; target=&quot;_blank&quot;&gt;data sources&lt;/a&gt; to get its data and generate the dashboard.
There are already a lot of pre-built &lt;a href=&quot;https://grafana.com/dashboards&quot; target=&quot;_blank&quot;&gt;dashboards&lt;/a&gt; you can use and customize for your own needs.
You can build your own dashboards with &lt;a href=&quot;https://grafana.com/plugins?type=panel&quot; target=&quot;_blank&quot;&gt;panels&lt;/a&gt;.
Each panel is fed with data from a datasource based on a query.
Grafana has created a query editor with support for different data sources, like PromQL for Prometheus, to make it easier to build the queries you need.
The end result can look like this :
&lt;img src=&quot;/img/percona-live-2017/grafanaDashboard.png&quot; alt=&quot;Grafana Dashboard&quot; class=&quot;image&quot; width=&quot;55%&quot; target=&quot;_blank&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;database-reliability-engineering-what-why-and-how&quot;&gt;Database Reliability Engineering: What, Why and How?&lt;/h2&gt;

&lt;p&gt;The DBA from the old days, hidden in a basement behind closets, performing magic on that mysterious thing called a database, is dead.
Enter the Database Reliability Engineer (DBRE, loosely based on &lt;a href=&quot;https://en.wikipedia.org/wiki/Site_reliability_engineering&quot; target=&quot;_blank&quot;&gt;SRE&lt;/a&gt;), a person who embraces the new paradigms in the IT-world.
He is an advocate of how data should be treated and used, he teaches his colleagues, he takes part in pair-programming, he is an active team member in cross-functional teams.
A DBRE’s knowledge is not confined to a single system, he can support polyglot persistence.
He can support these systems on premise and in the cloud.
He automates as much as possible and uses tools of the trade including source control systems and helps creating infrastructure as code.
The DBRE enables his organisation to apply known principles of the software engineering world to the database world.
In this role he applies principles from Database Reliability Engineering, like designing for scale, availability, operations and performance.
Also visibility, alerting and database change and release management are just a few parts of the tasks to do.
For more detailed information make sure to check out the book &lt;a href=&quot;http://shop.oreilly.com/product/0636920039761.do&quot; target=&quot;_blank&quot;&gt;Database Reliability Engineering&lt;/a&gt;, a must read for everyone in the field.&lt;/p&gt;

&lt;h2 id=&quot;mongodb-security-checklist&quot;&gt;MongoDB Security Checklist&lt;/h2&gt;

&lt;p&gt;MongoDB has been in the news lately due to MongoDB ransomware attacks. 
This might make you wonder whether or not MongoDB is secure.
Well, rest assured it is very secure.
But you need to turn security on, at least until the next major release where security will be on by default.
MongoDB has a plethora of security features in their community edition and the commercial offering provides even more goodies like LDAP integration and baked in encryption-at-rest.
It starts with simple username/password authentication and moves on to x.509 certificates based authentication.
Once authenticated you have authorization with either build-in or user-defined roles and privileges, so you can fine-tune which users have access to which database or collection and which actions they can perform on them.
You can further lock-down your MongoDB by fixing the network interface it is listening to so it’s not open to the internet, or encrypting the communication between replica-set or sharded-cluster members.
If you are running MongoDB, then reading the &lt;a href=&quot;https://docs.mongodb.com/manual/administration/security-checklist/&quot; target=&quot;_blank&quot;&gt;security checklist&lt;/a&gt; is a must!&lt;/p&gt;

&lt;h2 id=&quot;improvements-to-mongorocks-in-2017&quot;&gt;Improvements to MongoRocks in 2017&lt;/h2&gt;

&lt;p&gt;MongoRocks is MongoDB using RocksDB as the underlying storage engine.
From the MongoRocks &lt;a href=&quot;http://mongorocks.org/&quot; target=&quot;_blank&quot;&gt;website&lt;/a&gt; :&lt;/p&gt;
&lt;blockquote class=&quot;clear&quot;&gt;&lt;p&gt;&quot;RocksDB is a key-value library based on Log Structured Merge Trees. It is maintained by the Facebook Database Engineering Team, and is based on LevelDB, by Sanjay Ghemawat and Jeff Dean at Google&quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;MongoRocks differs from WiredTiger in the way it stores data.
WiredTiger uses a B-tree where MongoRocks uses a LSM-tree structure.
Both have pros and cons of course.
An LSM-tree structure favours space and insert efficiency over read efficiency.
An B+ tree structure favours update and read efficiency over space efficiency.
So depending on your workload you can choose which might suit you better.
Of course, nothing beats measuring what the effect of your workload is on performance of the choosen storage engine.
Because, you know, silver bullets and such…
So testing and measuring is key in deciding which engine you should choose.
Nevertheless, MongoRocks is showing nice improvements over previous versions and has several interesting benefits over WiredTiger.
Certainly when storage endurance is an issue or if your working set does not fit into memory.&lt;/p&gt;

&lt;h2 id=&quot;automatic-database-management-system-tuning-through-large-scale-machine-learning&quot;&gt;Automatic Database Management System Tuning Through Large-Scale Machine Learning&lt;/h2&gt;

&lt;p&gt;This is probably the most stunning talk of the conference.
OtterTune is a tool developed by students and researchers at Carnegie Mellon to automatically tune your database.
This is done by making clever use of previously collected data of other tunings and applying machine learning to it.
The presented results showed that for the given workload, OtterTune was at par with DBAs which had double digit years of experience.
Looking at this from the bright side, OtterTune would help DBAs to focus on areas other than figuring out which combination of the multiple settings they should use to tune their database.
It would definitely help to do better Database Reliability Engineering.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This is just a small portion of the huge amount of sessions at Percona Live, but of course, one needs to choose.
It’s really great to see this conference putting open source on the foreground and displaying the wealth of choice and diversity of technologies in the open source database world.
We see that this space is continuously expanding and that the future is looking even more promising than the present.
Good times ahead!&lt;/p&gt;

&lt;h3 id=&quot;useful-links--further-reading&quot;&gt;Useful links &amp;amp; further reading&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.percona.com/live/e17/&quot; target=&quot;_blank&quot;&gt;Percona Live Europe Dublin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mongorocks.org/&quot; target=&quot;_blank&quot;&gt;MongoRocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://grafana.com/&quot; target=&quot;_blank&quot;&gt;Grafana&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/cloud/atlas&quot; target=&quot;_blank&quot;&gt;MongoDB Atlas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/products&quot; target=&quot;_blank&quot;&gt;Elastic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.mongodb.com/manual/administration/security-checklist/&quot; target=&quot;_blank&quot;&gt;MongoDB security checklist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920039761.do&quot; target=&quot;_blank&quot;&gt;Database Reliability Engineering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Chris&quot;, &quot;last_name&quot;=&gt;&quot;De Bruyne&quot;, &quot;permalink&quot;=&gt;&quot;/author/chris-de-bruyne&quot;, &quot;avatar&quot;=&gt;&quot;chris-de-bruyne.jpg&quot;, &quot;title&quot;=&gt;&quot;Senior Java Developer&quot;, &quot;title2&quot;=&gt;&quot;Competence Lead Databases&quot;, &quot;email&quot;=&gt;&quot;chris.debruyne@ordina.be&quot;, &quot;twitter&quot;=&gt;&quot;ceedeebee2901&quot;, &quot;bio&quot;=&gt;&quot;Chris is a Senior Java Developer at Ordina Belgium, passionate about Java and MongoDB. As competence leader Databases he guides his fellow developers by giving workshops and presentations. Chris is passionate to help colleagues and clients to get the most out of MongoDB and the Java eco system.&quot;}</name><email>chris.debruyne@ordina.be</email></author><category term="Conference" /><category term="Percona Live" /><category term="MySql" /><category term="MongoDB" /><category term="MariaDB" /><category term="DBA" /><category term="PostgreSQL" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/percona-live-2017/logo2.png" /></entry><entry><title type="html">Kickstarter Trajectory 2017</title><link href="https://ordina-jworks.github.io/kickstarters/2017/10/05/Kickstarter-Trajectory-2017.html" rel="alternate" type="text/html" title="Kickstarter Trajectory 2017" /><published>2017-10-05T00:00:00+00:00</published><updated>2017-10-05T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/kickstarters/2017/10/05/Kickstarter-Trajectory-2017</id><content type="html" xml:base="https://ordina-jworks.github.io/kickstarters/2017/10/05/Kickstarter-Trajectory-2017.html">&lt;blockquote&gt;
  &lt;p&gt;This year, 45 young professionals started the various Ordina Kickstarter trajectories.
Five of those, participated in the Kickstarter trajectory of JWorks.
Each of them looking for a challenge and a fresh start!
For some, it was a transition between school and work, and Ordina handled this very well.
The main goal of this trajectory was to widen every student’s knowledge of the IT world.
They taught us the basics of every topic that’s hot at the moment.
This will definitely come in handy during our first project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;first-impressions&quot;&gt;First impressions&lt;/h1&gt;

&lt;p&gt;When we arrived the first day, we were welcomed with breakfast and afterwards, we got a tour around the building.
The corporate culture here is truly a plus for Ordina and we immediately felt at home as everybody is really friendly and helpful.
We got our equipment consisting of a car and either a Windows laptop or a MacBook Pro depending on our preference.
It’s clear that, starting from day one, Ordina makes sure that their consultants are well equipped to work successfully.&lt;/p&gt;

&lt;h1 id=&quot;what-is-the-kickstarter-trajectory&quot;&gt;What is the Kickstarter trajectory?&lt;/h1&gt;

&lt;p&gt;The Kickstarter trajectory consisted of intensive training spanning two months.
During this time, courses on different frontend and backend technologies, methods, tools and soft skills were given by senior consultants and external lecturers. 
This trajectory is ideal for graduating students and people who want to make a switch to IT.
The constant guidance and support made this a good preparation for our first project.&lt;/p&gt;

&lt;p&gt;During the fourth week we had a team building event with all the kickstarters from the different units. 
The goal was to get to know the other kickstarters and strengthen our team spirit by shooting each other with bow and arrow!&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Teambuilding&quot; src=&quot;/img/kickstarters/2017/teambuilding-kickstarter.jpg&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During the last week of the Kickstarter trajectory, the ‘&lt;a href=&quot;https://jobs.ordina.be/nl-nl/evenementen/2017/join/&quot; target=&quot;_blank&quot;&gt;JOIN Event&lt;/a&gt;’ was held.
This day was split into two parts: the unit meeting where the whole JWorks unit gathers for a year report where every competence center presents its past and upcoming activities, and the completed and current projects are highlighted. 
And in the afternoon the JOIN Event itself. 
There were talks given by members of JWorks as well as by external speakers about upcoming or commonly used technologies such as Docker and Spinnaker, but also about Scrum and User Experience.
In addition to gaining knowledge about these subjects, this event provides a unique opportunity to meet most members of the unit or at least see them, since there are over a hundred.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Join 2017&quot; src=&quot;/img/kickstarters/2017/join.jpg&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Other events we could participate in were the CC-meetings and the Ordina Boardgame Night.
These also provided opportunities to get to know both our and other units as we deepened our understanding of the presented subjects.
As you can see Ordina employees are very involved.&lt;/p&gt;

&lt;h1 id=&quot;training&quot;&gt;Training&lt;/h1&gt;

&lt;p&gt;We kicked off our career at Ordina in the JWorks unit.
The main technologies used in this unit are Java &amp;amp; JavaScript.
Most of the workshops in the Kickstarter trajectory are based on these two technologies.
Small side note, don’t be fooled by these names: Java &amp;amp; JavaScript have no underlying connection.
In general, the development of modern applications is divided into two main groups: the frontend part and the backend part.
Java dominates in the backend part, while JavaScript is located in the frontend part.
For two months, we’ve had the luxury to deepen our knowledge in both domains, in order to obtain a comprehensive understanding of the cutting-edge technology stack that’s being used in JWorks.
Below you’ll find a brief overview of the technologies we explored and applied in the workshops.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Frontend&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;HTML5, CSS3, BEM, SASS&lt;/li&gt;
      &lt;li&gt;JavaScript, TypeScript&lt;/li&gt;
      &lt;li&gt;Angular (2+), Ionic&lt;/li&gt;
      &lt;li&gt;Npm, Bower, webpack&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Backend&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Newest features in Java 7/8/9&lt;/li&gt;
      &lt;li&gt;Java EE, Spring, Spring Boot with Maven&lt;/li&gt;
      &lt;li&gt;JPA, Hibernate&lt;/li&gt;
      &lt;li&gt;Unit Testing: JUnit, Mockito, etc.&lt;/li&gt;
      &lt;li&gt;MongoDB&lt;/li&gt;
      &lt;li&gt;Cloud solutions (PaaS, IaaS, SaaS): Pivotal Cloud Foundry and OpenShift&lt;/li&gt;
      &lt;li&gt;Docker, Git&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Design principles and methodologies&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Microservices&lt;/li&gt;
      &lt;li&gt;Agile, Scrum&lt;/li&gt;
      &lt;li&gt;DevOps, Continuous Integration&lt;/li&gt;
      &lt;li&gt;DDD, BDD, TDD&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rather than learning these technologies in isolation, we learned to create applications by combining them.
For example, we used TypeScript, CSS and Ionic to build mobile apps, we wrote backend logic by uniting the forces of Spring Boot, Java and unit testing.
We also combined Angular, TypeScript, SASS, HTML and npm to create a web application.&lt;/p&gt;

&lt;p&gt;In our projects, we learned to utilize the Version Control System Git to collaborate with a team and share projects and code progress.
One thing we’ll never forget is that if we push breaking changes to the master branch and break the build, we’ll have to buy “boterkoeken” for the unit!
Last but not least, we were introduced to the wonderful world where clean code and microservices are the heroes that kick spaghetti code and monoliths in the butt.&lt;/p&gt;

&lt;p&gt;During the trajectory we also had a couple of “free” days during which we had to read the &lt;a href=&quot;https://www.amazon.de/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot; target=&quot;_blank&quot;&gt;Clean Code&lt;/a&gt; book and prepare ourselves for the &lt;a href=&quot;https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;amp;get_params=p_exam_id:1Z0-808&quot; target=&quot;_blank&quot;&gt;Oracle Certified Associate, Java SE 8 Programmer I exam&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;memorable-moments&quot;&gt;Memorable moments&lt;/h1&gt;

&lt;p&gt;“The soft skill sessions were real eyeopeners and gave me a better understanding regarding introducing myself, giving presentations and the Agile methodology.
The introduction to microservices was very interesting since moving away from monoliths is the way to go.” – Ken&lt;/p&gt;

&lt;p&gt;“The tips received during the communication essentials sessions are a backpack full, good enough to present myself in a proper way.
Diverse technologies used in JWorks e.g. turning a monolith to microservices, a different type of database like MongoDB, running your applications in Docker containers and such.” – Michiel&lt;/p&gt;

&lt;p&gt;“Learning about the existence of ‘microservices’ versus ‘monoliths’.
Writing unit-tests to see if the code does what it should do before deploying the application in production.
And the introduction to the MongoDB database and how to use it in the command line interface.” – Jef&lt;/p&gt;

&lt;p&gt;“The communication sessions were worth their weight in gold!
How often do you get a chance to practice communication in the most awkward situations?
I guess every day, but at least in these sessions there were no real repercussions :)” – Simon&lt;/p&gt;

&lt;p&gt;“Learning about all those different technologies.
There really is too much to choose from.
But if I have to pick something, it’s the Spring Boot session.
I previously experimented with Spring Boot at my internship, where nothing seemed to make sense.
But after this session, everything I was struggling with became clear and fell into place.” – Nick&lt;/p&gt;

&lt;h1 id=&quot;the-new-jworks-colleagues&quot;&gt;The new JWorks colleagues&lt;/h1&gt;

&lt;p&gt;&lt;img class=&quot;p-image&quot; alt=&quot;Nick Geudens&quot; src=&quot;/img/kickstarters/2017/nick-geudens.jpg&quot; /&gt;
&lt;img class=&quot;p-image&quot; alt=&quot;Ken De Becker&quot; src=&quot;/img/kickstarters/2017/ken-de-becker.jpg&quot; /&gt;
&lt;img class=&quot;p-image&quot; alt=&quot;Michiel Willems&quot; src=&quot;/img/kickstarters/2017/michiel-willems.jpg&quot; /&gt;
&lt;img class=&quot;p-image&quot; alt=&quot;Jef Willems&quot; src=&quot;/img/kickstarters/2017/jef-willems.jpg&quot; /&gt;
&lt;img class=&quot;p-image&quot; alt=&quot;Simon Buysse&quot; src=&quot;/img/kickstarters/2017/simon-buysse.jpg&quot; /&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Nick&quot;, &quot;last_name&quot;=&gt;&quot;Geudens&quot;, &quot;permalink&quot;=&gt;&quot;/author/nick-geudens/&quot;, &quot;avatar&quot;=&gt;&quot;nick-geudens.jpg&quot;, &quot;linkedin&quot;=&gt;&quot;nickgeudens&quot;, &quot;github&quot;=&gt;&quot;nickgeudens&quot;, &quot;title&quot;=&gt;&quot;Java Consultant&quot;, &quot;email&quot;=&gt;&quot;nick.geudens@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Nick is a motivated Java developer at Ordina where he successfully completed the kickstarter trajectory in 2017. His main focus is backend development where he likes to experiment with databases as well as Spring Boot applications.&quot;}</name><email>nick.geudens@ordina.be</email></author><category term="Kickstarters" /><category term="Spring" /><category term="Angular2" /><category term="Unit Test" /><category term="Microservices" /><category term="Spring Boot" /><category term="Ionic" /><category term="MongoDB" /><summary type="html">This year, 45 young professionals started the various Ordina Kickstarter trajectories. Five of those, participated in the Kickstarter trajectory of JWorks. Each of them looking for a challenge and a fresh start! For some, it was a transition between school and work, and Ordina handled this very well. The main goal of this trajectory was to widen every student’s knowledge of the IT world. They taught us the basics of every topic that’s hot at the moment. This will definitely come in handy during our first project.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/kicks.png" /></entry><entry><title type="html">Testing Angular with Karma 101</title><link href="https://ordina-jworks.github.io/angular/2017/10/04/Testing-angular-with-karma.html" rel="alternate" type="text/html" title="Testing Angular with Karma 101" /><published>2017-10-04T00:00:00+00:00</published><updated>2017-10-04T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/angular/2017/10/04/Testing-angular-with-karma</id><content type="html" xml:base="https://ordina-jworks.github.io/angular/2017/10/04/Testing-angular-with-karma.html">&lt;p&gt;Testing your code is as important as writing the code itself. 
This also counts for frontend applications such as Angular apps. 
Unit testing is one way to do so. 
The goal of these kind of tests is to isolate classes and verify the output of its functions to be what you expect when they are called.
We also need a tool to run our tests written in TypeScript.
&lt;a href=&quot;https://karma-runner.github.io/&quot; target=&quot;_blank&quot;&gt;Karma&lt;/a&gt; is the one we’ll be using to run tests described in this blog.
It will open a browser, execute pieces of JavaScript and report the results back to you.&lt;/p&gt;

&lt;p&gt;Now, I must admit that I’m not too fond of writing tests myself. 
However, I do strongly believe they help a lot towards improving the quality of the code. 
Writing unit tests can be quite a hassle, but with an application that is continuously growing and changing, they are an efficient way to prevent bugs getting to production.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#writing-tests&quot;&gt;Writing tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-to-test&quot;&gt;What to test&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tips--tricks&quot;&gt;Tips and tricks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;Let’s take a look at how it’s done in an Angular app using Karma.
If you’re using the Angular CLI, you’re in luck because setting up the unit tests is easy. 
It’s already done! 
All you need to do is run &lt;code class=&quot;highlighter-rouge&quot;&gt;ng test&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;npm test&lt;/code&gt;). 
It will transpile your tests and run them using Karma. 
If you’re not using the Angular CLI yet, I recommend creating a new project with the CLI and copying your existing project to it.
It will make your life a lot easier.&lt;/p&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;ng test&lt;/code&gt; will run the tests in watch mode, meaning that every time you save a change to a file, it will automatically rerun your tests. 
Additional flags can be passed like &lt;code class=&quot;highlighter-rouge&quot;&gt;--single-run&lt;/code&gt; to make it run only once. 
When passing the &lt;code class=&quot;highlighter-rouge&quot;&gt;--code-coverage&lt;/code&gt; flag, it generates a report in HTML. 
By default it’s found under &lt;code class=&quot;highlighter-rouge&quot;&gt;coverage/index.html&lt;/code&gt; and it indicates which parts of your code were covered by your unit tests.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;img class=&quot;image fit&quot; style=&quot;max-width: 785px&quot; alt=&quot;Code coverage&quot; src=&quot;/img/2017-10-02-testing-angular-with-karma/code-coverage.png&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;writing-tests&quot;&gt;Writing tests&lt;/h1&gt;
&lt;h2 id=&quot;structure&quot;&gt;Structure&lt;/h2&gt;
&lt;p&gt;Now that the setup is done, let’s look at how to write the tests themselves.
First of all, test files should be named after the &lt;code class=&quot;highlighter-rouge&quot;&gt;.ts&lt;/code&gt; file you’re testing, but with &lt;code class=&quot;highlighter-rouge&quot;&gt;.spec&lt;/code&gt; added to the file name (e.g. when testing &lt;code class=&quot;highlighter-rouge&quot;&gt;login.component.ts&lt;/code&gt;, the test file should be named &lt;code class=&quot;highlighter-rouge&quot;&gt;login.component.spec.ts&lt;/code&gt;). 
It’s best practice to keep the spec file in the same folder as the ts file. So mostly, for a component, you’ll end up with a HTML, scss, spec.ts and ts file in one folder (unless you like to inline your HTML and CSS).&lt;/p&gt;

&lt;p&gt;
    &lt;img class=&quot;image&quot; alt=&quot;Folder structure&quot; src=&quot;/img/2017-10-02-testing-angular-with-karma/files.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Next up, the content of a test file. 
The Jasmine spec is used to format the tests (&lt;a href=&quot;https://jasmine.github.io/pages/getting_started.html&quot; target=&quot;_blank&quot;&gt;more info&lt;/a&gt;).
This means that individual tests are grouped together in a &lt;code class=&quot;highlighter-rouge&quot;&gt;describe&lt;/code&gt; block. 
A test itself starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt;. 
Besides tests, you can also add other blocks to a &lt;code class=&quot;highlighter-rouge&quot;&gt;describe&lt;/code&gt;, like &lt;code class=&quot;highlighter-rouge&quot;&gt;beforeEach&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;beforeAll&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;afterEach&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;afterAll&lt;/code&gt;… 
What these blocks do, is quite self-explanatory. 
Here’s an example how it could be used: when testing a class, you’ll want to create an instance of that class for each test, so instead of writing the same code in each test to create an instance, you could put that code in the &lt;code class=&quot;highlighter-rouge&quot;&gt;beforeEach&lt;/code&gt; clause. 
Simply pass a function (in lambda notation) to &lt;code class=&quot;highlighter-rouge&quot;&gt;beforeEach&lt;/code&gt; containing the code you want it to run.&lt;/p&gt;

&lt;p&gt;Within a test itself, the class’ public functions can be called and assertions can be made. 
Assertions are made using the &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; function. You can give it a variable or a call to a function and tell it what you expect the result to be with &lt;code class=&quot;highlighter-rouge&quot;&gt;toBe&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;toEqual&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;toBeTruthy&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;toBeFalsy&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;toBeNull&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;Here’s an example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'NAME_OF_YOUR_CLASS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialize&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    
    &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Actual&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tests&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'should have a car selected'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assertions&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;carSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toBeThruthy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'should find my favorite car brand'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assertions&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;carBrand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFavoriteCarBrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carBrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Mazda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, you can pass some text as an argument in the &lt;code class=&quot;highlighter-rouge&quot;&gt;describe&lt;/code&gt; call. 
This is usually the name of the class you’re testing and it’ll be shown when running the tests. 
For the tests themselves, you can also pass some text which will be shown. 
These are mainly used for you to be able to identify failing tests. 
The text should describe what’s being tested, for example “It should get the brand of the car”, could be written as &lt;code class=&quot;highlighter-rouge&quot;&gt;it('should get the brand of the car', () =&amp;gt; ...&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;writing-the-actual-tests&quot;&gt;Writing the actual tests&lt;/h2&gt;
&lt;p&gt;There are multiple ways to write unit tests for an Angular app. 
Either you use the Angular TestBed, the ReflectiveInjector or you simply call the constructor of the class directly. 
ReflectiveInjector and TestBed have a similar approach, so I’ll only be discussing TestBed here.
It’s something pretty cool Angular came up with in order to test your components. 
TestBed can create components and injects all its dependencies.
The instance of the component that is returned can then be used for testing.
Accessing the view is also possible.&lt;/p&gt;

&lt;p&gt;Now, although I said there are multiple ways to unit test an Angular app, there’s actually only one correct way: calling the constructor.
Since TestBed loads the view as well as any components, directives… used in the view, you’re actually also testing how the class integrates with them.
In other words, you’re entering the domain of integration testing, which is also important, but out of scope for this blog post.&lt;/p&gt;

&lt;p&gt;The unit tests you would write using the constructor approach, could practically look the same when you would use TestBed to instatiate the components. 
However, there are some problems with using the Angular TestBed for unit tests which I’ll be explaining below.&lt;/p&gt;

&lt;h2 id=&quot;1-testbed&quot;&gt;1. TestBed&lt;/h2&gt;
&lt;p&gt;Setting up the TestBed configuration for a component kind of looks like a module definition. 
You should list all components, directives and services that are used by the component you’re testing directly or by importing a module that includes them. 
Calling &lt;code class=&quot;highlighter-rouge&quot;&gt;createComponent&lt;/code&gt; will return a ‘fixture’ which can be used to access the view and also get the instance of the class linked to it. 
With the fixture you can find HTML elements and perform actions on them, verify their content and attributes…
The instance of the class can be used to test its public functions (unit test).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'AppComponent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fixture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComponentFixture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;TestBed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configureTestingModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;declarations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CarBrandService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CommonLogicModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compileComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TestBed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;componentInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;detectChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'should test the class'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itself&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;carBrand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFavoriteCarBrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carBrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Mazda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'should test the view'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itself&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;carBrand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFavoriteCarBrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carBrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Mazda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;access&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTML&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debugElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'h1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nativeElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toContain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Mazda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;mocking&quot;&gt;Mocking&lt;/h3&gt;
&lt;p&gt;In unit testing, we are only interested in testing the class itself and try to isolate it as much as possible. 
We also want to be able to easily control the output of all dependencies of our class, such as services.&lt;/p&gt;

&lt;h4 id=&quot;spyon&quot;&gt;spyOn&lt;/h4&gt;
&lt;p&gt;One way to do so is by creating spies for all calls to functions of those dependencies. 
That’s where the &lt;code class=&quot;highlighter-rouge&quot;&gt;spyOn&lt;/code&gt; function comes into play:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'AppComponent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RequestPopupContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fixture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComponentFixture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        

    &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;TestBed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configureTestingModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;declarations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CarBrandService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CommonLogicModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compileComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TestBed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;componentInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;carBrandService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debugElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;injector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CarBrandService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;spyOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carBrandService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'findAll'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;returnValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Mazda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Japan'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'BMW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Germany'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;    

        &lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;detectChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the example above, you can see when the &lt;code class=&quot;highlighter-rouge&quot;&gt;AppComponent&lt;/code&gt; would call &lt;code class=&quot;highlighter-rouge&quot;&gt;carBrandService.findAll()&lt;/code&gt;, instead of making a HTTP call, an Observable is returned with a list of car brands which is defined in the test itself. 
This is pretty cool, but also very error prone. 
If you forget to place a spy on a certain function, it will perform the actual call, possibly a HTTP call.
That’s something we do not want at all.&lt;/p&gt;

&lt;h4 id=&quot;mock-classes&quot;&gt;Mock classes&lt;/h4&gt;
&lt;p&gt;To prevent forgetting to spy on a certain function, you could create mock classes and inject them instead of the actual classes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MockCarBrandService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CarBrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Mazda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Japan'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'BMW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Germany'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;     
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'AppComponent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fixture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComponentFixture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        

    &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;TestBed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configureTestingModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;declarations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;provide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CarBrandService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;useClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MockCarBrandService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CommonLogicModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compileComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again we see that &lt;code class=&quot;highlighter-rouge&quot;&gt;findAll()&lt;/code&gt; will return an Observable containing a list. 
By using this approach, you’ll get an error when you forgot to define a function in the mock class. 
This may solve our previous problem, but now we have created another one. 
Karma allows us to assert whether a function was called using &lt;code class=&quot;highlighter-rouge&quot;&gt;toHaveBeenCalled&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;toHaveBeenCalledWith&lt;/code&gt;. 
The problem here is that we don’t have any spies, so those functions can’t be used.
We can again add spies like in the first approach, but you can imagine that this is a lot of work and will get quite messy.&lt;/p&gt;

&lt;h4 id=&quot;jasmine-spy-objects&quot;&gt;Jasmine spy objects&lt;/h4&gt;
&lt;p&gt;So, the first two approaches have some issues. Luckily there’s a better way, Jasmine spy objects:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'AppComponent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        
    &lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fixture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComponentFixture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

    &lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockCarBrandService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jasmine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createSpyObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'carBrandService'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'findAll'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mockCarBrandService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;returnValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Mazda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Japan'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'BMW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Germany'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;TestBed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configureTestingModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;declarations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;provide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CarBrandService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;useValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockCarBrandService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CommonLogicModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compileComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first argument of &lt;code class=&quot;highlighter-rouge&quot;&gt;jasmine.createSpyObj&lt;/code&gt; is the name for the object and will be used to mention it in the console.
This is usually the name you gave the instance of the corresponding class in the constructor. 
The second argument is an array containing all function names of that corresponding class that are called from the class being tested. 
In other words, not all functions offered by the class that’s being mocked have be listed, only the ones actually being used.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Also note that in the providers list, we have to use &lt;code class=&quot;highlighter-rouge&quot;&gt;useValue&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;useClass&lt;/code&gt; since &lt;code class=&quot;highlighter-rouge&quot;&gt;jasmine.createSpyObj&lt;/code&gt; already returns an instance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;spyOn&lt;/code&gt; isn’t needed, a spy object is already being spied upon (hence the name) and you can call the &lt;code class=&quot;highlighter-rouge&quot;&gt;toHaveBeenCalled&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;toHaveBeenCalledWith&lt;/code&gt; functions on it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'should call the findAll method'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFavoriteCarBrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockCarBrandService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toHaveBeenCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I think it’s obvious to say that using Jasmine spy objects is the way to go. 
If you forget to define a function, you’ll get an error when it’s called. 
The functions that are defined, are also spied upon. 
So all the problems with the first and second approach are solved. 
There’s even another benefit when using spy objects. 
The implementation (&lt;code class=&quot;highlighter-rouge&quot;&gt;returnValue&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;callFake&lt;/code&gt;) can be changed at any time, even in the middle of a test!&lt;/p&gt;

&lt;h3 id=&quot;issues-with-unit-testing&quot;&gt;Issues with unit testing&lt;/h3&gt;
&lt;p&gt;A side effect of using TestBed is that when the component is loaded, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ngOnInit&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ngAfterViewInit&lt;/code&gt;… lifecycle events are called automatically.
This means you have less control over them.&lt;/p&gt;

&lt;p&gt;Getting all the imports, providers and declarations setup can be quite a struggle too. 
If there’s any subcomponent in the HTML of the component you’re testing, they should either be imported through a module or added in the declarations of the TestBed configuration.
If you don’t feel like doing all that, you can also tell Angular to skip elements it doesn’t recognise by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;NO_ERRORS_SCHEMA&lt;/code&gt; to the TestBed configuration:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;TestBed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configureTestingModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;declarations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;schemas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NO_ERRORS_SCHEMA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s very likely that you’ll be using the Angular router in some of your components, so you’ll have to account for that too. 
You could mock the router dependency using a Jasmine spy object or you can add &lt;code class=&quot;highlighter-rouge&quot;&gt;RouterTestingModule&lt;/code&gt; as an import instead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;RouterModule&lt;/code&gt; itself. 
The routes that are relevant can then be defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;RouterTestingModule&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RouterTestingModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/*List mock routes here*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;To learn more about writing tests using Angular TestBed, I recommend reading this guide: &lt;a href=&quot;https://angular.io/guide/testing&quot; target=&quot;_blank&quot;&gt;https://angular.io/guide/testing&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;2-calling-the-constructor&quot;&gt;2. Calling the constructor&lt;/h2&gt;

&lt;p&gt;A much better way to do unit testing is to simply call the constructor of the class you want to test.
You should get an instance of each dependency that’s needed in the component’s constructor.
Of course we want to mock these classes and as we saw in the Angular TestBed section, the Jasmine spy objects are the way to go.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'AppComponent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        
    &lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockCarBrandService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jasmine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createSpyObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'carBrandService'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'findAll'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mockCarBrandService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;returnValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Mazda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Japan'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'BMW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Germany'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockCarBrandService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Without the TestBed, you don’t have access to the view. 
However, your tests will run much faster as there are less things to load. 
When using TestBed, you’ll probably be including lots of dependencies just to make it work, giving you less control. 
This is something you do not want in unit testing as you want to isolate the class as much as possible. 
Another difference with TestBed is that you have to call the lifecycle events yourself, again giving you more control over the code you’re testing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'should find the car brand'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ngOnInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;carBrand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFavoriteCarBrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carBrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Mazda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;async-fakeasync-tick&quot;&gt;Async, fakeAsync, tick&lt;/h1&gt;
&lt;p&gt;Angular is full of Observables and writing tests for them is a little trickier. 
You might also be using the &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval&lt;/code&gt; functions. 
To cope with all that, Angular provides the &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fakeAsync&lt;/code&gt; functions. 
You can simply wrap your test in an &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; and it should only finish after all async calls are finished. 
If you want to have more control, you can wrap the test in a &lt;code class=&quot;highlighter-rouge&quot;&gt;fakeAsync&lt;/code&gt; instead. 
Then the &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; function can be called to advance time with one tick. 
By passing an argument to it, time can be advanced by more ticks at once: &lt;code class=&quot;highlighter-rouge&quot;&gt;tick(500)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Suppose we have this class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TimeoutExample&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;updateCounterWithDelay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And this test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;  
&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'should increase the counter with a delay'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TimeoutExample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;updateCounterWithDelay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It clearly shows how the &lt;code class=&quot;highlighter-rouge&quot;&gt;tick&lt;/code&gt; function manipulates the advancement of time, although it isn’t really a useful test,&lt;/p&gt;

&lt;h3 id=&quot;observables&quot;&gt;Observables&lt;/h3&gt;

&lt;p&gt;Now, what if you want to test a function that returns an Observable? 
Well, simply subscribe to it in an async block and check the result!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'should return a list of cars'&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toBeFalsy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The error clause may seem strange. 
However, what if the &lt;code class=&quot;highlighter-rouge&quot;&gt;findAll()&lt;/code&gt; call returns an error and you don’t have the error clause in your test? 
You’ll simply think that your test has passed because it appears green in the console. 
With code coverage enabled, you may notice that the part of the code you were testing isn’t marked as covered. 
By adding &lt;code class=&quot;highlighter-rouge&quot;&gt;expect(true).toBeFalsy();&lt;/code&gt; to the error clause, your test will fail because it shouldn’t get there!&lt;/p&gt;

&lt;h1 id=&quot;what-to-test&quot;&gt;What to test&lt;/h1&gt;
&lt;p&gt;Now that we know a little on how to test, let’s have a look at what to test.&lt;/p&gt;

&lt;p&gt;For starters, you don’t have access to private and protected variables/functions, so all you can do is test the public ones. 
All variables that are accessed by the view should be public, so those are the ones you can use for your tests. 
The constructor and all lifecycle events can be called as well as they are public. 
You should never ever set a variable or function to public in order to test it. 
If you can’t test it because it’s private, you’re doing something wrong. 
You should be able to get to it through other functions.&lt;/p&gt;

&lt;p&gt;Generally, you give an input and assert the output, it’s as simple as that. 
Your different inputs should also make sure that all branches are tested (e.g. an &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; gives you two branches, one where the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; resolves to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; and one to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;).
Unit tests in Karma also allow you to assert whether a function has been called and optionally with which parameters (&lt;code class=&quot;highlighter-rouge&quot;&gt;toHaveBeenCalled&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;toHaveBeenCalledWith&lt;/code&gt;). 
This can be useful when for example testing a &lt;code class=&quot;highlighter-rouge&quot;&gt;void&lt;/code&gt; function that calls a mocked function. 
That way you can still assert the output. 
So, think of possible scenarios for the functions to test, provide the input and assert the output using &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt;. 
Also try to cover other paths than just the happy paths!&lt;/p&gt;

&lt;p&gt;Testing getters and setters usually isn’t needed, unless they are more complex. 
In most cases they’re not and it’s quite pointless to call a setter and then assert whether it has been set correclty. 
Most of the time, these will be called indirectly when testing other functions.&lt;/p&gt;

&lt;p&gt;The code coverage report can help you find functions that aren’t fully tested yet. 
However, your goal shouldn’t be to get a 100% coverage. 
Getting a 100% isn’t that hard, simply calling all functions with some different inputs will get you there.
It won’t mean that your code is fully tested.
To give you an example, suppose you have a function that sorts a list.
You write some tests with different inputs so all branches are covered and you get a 100% coverage.
The ordering of the list could still be completely wrong and not what you expect, although it’s fully covered.
By using &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; to verify that the output is correct, you’ll be doing a way better job.
Even then there may be scenarios that aren’t tested despite the coverage report stating that part of the code is covered.
So try to think of the various possible scenarios (both success and error scenarios) and translate those to tests.&lt;/p&gt;

&lt;h1 id=&quot;tips--tricks&quot;&gt;Tips &amp;amp; tricks&lt;/h1&gt;
&lt;h2 id=&quot;only-run-certain-tests&quot;&gt;Only run certain tests&lt;/h2&gt;
&lt;p&gt;When your test base begins to grow, you don’t always want to wait for all tests to have run when only testing a certain class or function. 
Therefore, you can choose to only run specific &lt;code class=&quot;highlighter-rouge&quot;&gt;describe&lt;/code&gt; blocks or tests (&lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt;) by adding an &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; (which stands for focus) in front of them, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;fdescribe&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fit&lt;/code&gt;. 
To exclude certain &lt;code class=&quot;highlighter-rouge&quot;&gt;describe&lt;/code&gt; blocks or tests, you can prefix them with an &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; (exclude), like &lt;code class=&quot;highlighter-rouge&quot;&gt;xdescribe&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;xit&lt;/code&gt;. 
This will certainly come of use.&lt;/p&gt;

&lt;h2 id=&quot;nesting-describe-blocks&quot;&gt;Nesting describe blocks&lt;/h2&gt;
&lt;p&gt;Describe blocks can also be nested. 
If you want for example different &lt;code class=&quot;highlighter-rouge&quot;&gt;beforeEach&lt;/code&gt; blocks for your tests when testing a class, you can create a nested &lt;code class=&quot;highlighter-rouge&quot;&gt;describe&lt;/code&gt; block for each case.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'AppComponent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockCarBrandService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jasmine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createSpyObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'carBrandService'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'findAll'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Happy path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;mockCarBrandService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;returnValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Mazda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Japan'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'BMW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Germany'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Error path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;mockCarBrandService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;returnValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;using-the-injector&quot;&gt;Using the injector&lt;/h2&gt;
&lt;p&gt;Dependency injection is used all over Angular meaning that it isn’t possible to simply call &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; for certain classes. 
Normally, you simply put the dependencies in the constructor of your class and Angular takes care of the rest (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor(private formBuilder: FormBuilder)&lt;/code&gt;).
When calling the constructor of a class in a test, you don’t always want to mock those dependencies, so you’ll need to get instances of them somehow. 
For example when using Angular’s &lt;code class=&quot;highlighter-rouge&quot;&gt;FormBuilder&lt;/code&gt; or when you need it to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;FormGroup&lt;/code&gt; to use in your test. 
In that case, you can use Angular’s ReflectiveInjector which takes care of getting an instance for you.
Here’s an example how:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;injector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReflectiveInjector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resolveAndCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FormBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;injector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FormBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, you can simply pass the class name and it will return an instance of that class. 
That instance can then be passed in the constuctor of the class you’re testing.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;When writing unit tests, it’s better to call the constructors direcly and not to use Angular TestBed. 
It will give you more freedom and more control, run the tests much faster and allow you to completely isolate classes. 
You should also write integration tests and TestBed will serve that purpose very well.
To mock classes, Jasmine spy objects are simply the way to go.
Changing their implementation or return value is easy and can be done at any time!
Code coverage reports can be very useful to find parts of uncovered code. 
However, getting a high percentage of code coverage shouldn’t be your goal. 
Write useful tests and also, don’t limit your tests to the happy path!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Martijn&quot;, &quot;last_name&quot;=&gt;&quot;Willekens&quot;, &quot;linkedin&quot;=&gt;&quot;mwillekens&quot;, &quot;permalink&quot;=&gt;&quot;/author/martijn-willekens/&quot;, &quot;avatar&quot;=&gt;&quot;martijn-willekens.jpg&quot;, &quot;title&quot;=&gt;&quot;Frontend developer&quot;, &quot;email&quot;=&gt;&quot;martijn.willekens@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Martijn is a frontend developer at Ordina Belgium. He primarily devotes himself to building Angular and Ionic apps written in TypeScript. ReactiveX is his favorite set of tools to work with.&quot;}</name><email>martijn.willekens@ordina.be</email></author><category term="Angular" /><category term="Angular" /><category term="Karma" /><category term="Unit testing" /><category term="Jasmine" /><category term="TypeScript" /><summary type="html">Testing your code is as important as writing the code itself. This also counts for frontend applications such as Angular apps. Unit testing is one way to do so. The goal of these kind of tests is to isolate classes and verify the output of its functions to be what you expect when they are called. We also need a tool to run our tests written in TypeScript. Karma is the one we’ll be using to run tests described in this blog. It will open a browser, execute pieces of JavaScript and report the results back to you.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/2017-10-02-testing-angular-with-karma/unit-tests.png" /></entry><entry><title type="html">Spring Cloud Stream - A New Rick and Morty Adventure</title><link href="https://ordina-jworks.github.io/spring/2017/10/04/Spring-Cloud-Stream-Rick-And-Morty-Adventure.html" rel="alternate" type="text/html" title="Spring Cloud Stream - A New Rick and Morty Adventure" /><published>2017-10-04T00:00:00+00:00</published><updated>2017-10-04T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/spring/2017/10/04/Spring-Cloud-Stream-Rick-And-Morty-Adventure</id><content type="html" xml:base="https://ordina-jworks.github.io/spring/2017/10/04/Spring-Cloud-Stream-Rick-And-Morty-Adventure.html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;One of the most interesting aspects of the Spring Framework and its ecosystem is &lt;strong&gt;abstraction&lt;/strong&gt;.
The Spring project maintainers and contributors have always succeeded in hiding complexity from the application developer, by adding different layers of abstraction.&lt;/p&gt;

&lt;p&gt;For example, the way a Spring &lt;code class=&quot;highlighter-rouge&quot;&gt;Bean&lt;/code&gt; of a certain Interface can be autowired and how Spring will find a suitable implementation class at runtime, is a very obvious example of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot; target=&quot;_blank&quot;&gt;Liskov Substitution Principle&lt;/a&gt; or &lt;strong&gt;how to abstract away implementation from specification&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A second, higher level example is the &lt;a href=&quot;http://projects.spring.io/spring-data/&quot; target=&quot;_blank&quot;&gt;Spring Data&lt;/a&gt; project which offers a common programming model for SQL as well as NoSQL databases, abstracting away the specifics of the database internals.&lt;/p&gt;

&lt;p&gt;Another great example of abstraction is the one I’ll be discussing in this blog post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: a big part of this blog post will explain how Spring Cloud Stream works by using heavy references to the animated series &lt;a href=&quot;http://rickandmorty.wikia.com/wiki/Rickipedia&quot; target=&quot;_blank&quot;&gt;Rick and Morty&lt;/a&gt;, with the intention to be hilarious and informative at the same time.
If you don’t know the show or have no sense of humor, this blog post will be informative only 😉&lt;/p&gt;

&lt;p&gt;I will ignore the obvious third option: &lt;em&gt;this blog post might not be funny at all&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;spring-cloud-stream&quot;&gt;Spring Cloud Stream&lt;/h1&gt;

&lt;p&gt;I just can’t start explaining something without a definition, that would be cruel and irresponsible:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spring Cloud Stream is a framework for building message-driven microservices
It provides an &lt;strong&gt;opinionated configuration&lt;/strong&gt; of message brokers, introducing the concepts of persistent pub/sub semantics, consumer groups and partitions &lt;strong&gt;across several middleware vendors&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The last part is what I like the most.
Spring Cloud Stream abstracts away the complexity of connecting to different middleware solutions.
It does this &lt;em&gt;the Spring Boot way&lt;/em&gt;: by &lt;strong&gt;automatically configuring sensible defaults&lt;/strong&gt; and allowing the developer to adapt the parts he wants.&lt;/p&gt;

&lt;p&gt;It might be surprising, but &lt;a href=&quot;https://cloud.spring.io/spring-cloud-stream/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Stream&lt;/a&gt; is not &lt;em&gt;that&lt;/em&gt; new in the Spring Cloud ecosystem.
The project was called &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-bus&lt;/code&gt; during its prototype phase and the first real commit was on May 28th 2015.
&lt;a href=&quot;https://twitter.com/david_syer&quot; target=&quot;_blank&quot;&gt;Dave Syer&lt;/a&gt; performed the commit that changed it to its current name on &lt;strong&gt;July 8th 2015&lt;/strong&gt;, so I will call that &lt;strong&gt;the birth of Spring Cloud Stream&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;The most active contributor up until now is probably &lt;a href=&quot;https://twitter.com/mariusbogoevici&quot; target=&quot;_blank&quot;&gt;Marius Bogoevici&lt;/a&gt;.
Questions about the project can be directed to the most active contributors and community in the &lt;a href=&quot;https://gitter.im/spring-cloud/spring-cloud-stream&quot; target=&quot;_blank&quot;&gt;Spring Cloud Stream Gitter channel&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;application-model&quot;&gt;Application Model&lt;/h2&gt;

&lt;p&gt;As is described in the &lt;a href=&quot;https://docs.spring.io/spring-cloud-stream/docs/current-SNAPSHOT/reference/htmlsingle/&quot; target=&quot;_blank&quot;&gt;very detailed documentation&lt;/a&gt;, the following image details how a typical Spring Cloud Stream application is structured:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Spring Cloud Stream application model&quot; style=&quot;max-width: 367px&quot; src=&quot;/img/spring-cloud-stream/application-core.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An application defines &lt;code class=&quot;highlighter-rouge&quot;&gt;Input&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Output&lt;/code&gt; channels which are injected by Spring Cloud Stream at runtime.
Through the use of so-called &lt;code class=&quot;highlighter-rouge&quot;&gt;Binder&lt;/code&gt; implementations, the system connects these channels to external brokers.&lt;/p&gt;

&lt;p&gt;So once again, the difficult parts are abstracted away by Spring, leaving it up to the developer to simply define the inputs and outputs of the application.
How messages are being transformed, directed, transported, received and ingested are all up to the binder implementations.&lt;/p&gt;

&lt;h2 id=&quot;binder-implementations&quot;&gt;Binder Implementations&lt;/h2&gt;

&lt;p&gt;Currently, there are two official Binder implementations supported by Spring, for RabbitMQ and Kafka.
Next to those, there are &lt;strong&gt;several community binder implementations&lt;/strong&gt; available:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Spring Cloud Stream Binders implementations&quot; style=&quot;max-width: 367px&quot; src=&quot;/img/spring-cloud-stream/binders.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The current - non-exhaustive - list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-stream-binder-jms&quot; target=&quot;_blank&quot;&gt;JMS (ActiveMQ, HornetQ, IBM MQ,…)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-stream-binder-aws-kinesis&quot; target=&quot;_blank&quot;&gt;AWS Kinesis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-stream-binder-google-pubsub&quot; target=&quot;_blank&quot;&gt;Google Cloud Pub Sub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-stream-binder-redis&quot; target=&quot;_blank&quot;&gt;Redis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-stream-binder-gemfire&quot; target=&quot;_blank&quot;&gt;Gemfire&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;rick-and-morty&quot;&gt;Rick and Morty&lt;/h1&gt;

&lt;p&gt;As I have said earlier in the post, I will explain Spring Cloud Stream using a somewhat different approach, but I feel it helps to capture the power of the project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Behold&lt;/strong&gt;, our first character appears on stage:&lt;/p&gt;

&lt;h2 id=&quot;rick&quot;&gt;Rick&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&quot;Rick Sanchez&quot; style=&quot;max-width: 259px&quot; src=&quot;/img/spring-cloud-stream/rick.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is &lt;a href=&quot;http://rickandmorty.wikia.com/wiki/Rick_Sanchez&quot; target=&quot;_blank&quot;&gt;Rick Sanchez&lt;/a&gt;.
He is Morty’s grandfather, a genius mastermind, inventor of inter-dimensional travel, the Microverse, a butter-passing robot and much, much more.&lt;/p&gt;

&lt;p&gt;He is also an &lt;strong&gt;asshole&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Rick Sanchez&quot; style=&quot;max-width: 480px&quot; src=&quot;/img/spring-cloud-stream/purpose.gif&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ricks-obsession&quot;&gt;Rick’s Obsession&lt;/h2&gt;

&lt;p&gt;In the first episode of Season 3, Rick expressed his obsession with the &lt;a href=&quot;http://mcdonalds.wikia.com/wiki/Szechuan_Sauce&quot; target=&quot;_blank&quot;&gt;1998 Mulan Szechuan Sauce&lt;/a&gt;.
The saying goes that a picture is worth a thousand words, so that means this video below will explain, like, a bajillion words or something:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xilkhMtZD20&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;So now we know that Rick really wants this Szechuan sauce.&lt;/p&gt;

&lt;p&gt;Now, we have a purpose:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We will create a Spring Cloud Stream application, called &lt;em&gt;Rick&lt;/em&gt;, which sole purpose is to retrieve Szechuan sauce from McDonalds!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As with every Spring based application these days, it’s as easy as going to the happiest place on earth (next to &lt;strong&gt;production&lt;/strong&gt;): &lt;a href=&quot;https://start.spring.io&quot; target=&quot;_blank&quot;&gt;https://start.spring.io&lt;/a&gt;.
As our dependencies, we pick &lt;strong&gt;Spring Web MVC&lt;/strong&gt; to create some handy web endpoints and &lt;strong&gt;Stream Rabbit&lt;/strong&gt; since we want to send our messages over a RabbitMQ broker.
We end up with the following dependencies:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-stream-rabbit&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So how does a basic Spring Cloud Stream application look like? Well, it’s actually not that different from a regular Spring Boot application:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableBinding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RickApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RickApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looks pretty familiar, doesn’t it? That’s because the only new thing in the snippet above is the &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableBinding&lt;/code&gt; annotation, which automagically converts your application into a &lt;strong&gt;full-fledged messaging beast&lt;/strong&gt;!
The &lt;code class=&quot;highlighter-rouge&quot;&gt;InputChannels&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;OutputChannels&lt;/code&gt; interfaces are specific to my application.&lt;/p&gt;

&lt;p&gt;Very simply explained, we can describe the Rick microservice with the following diagram:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Rick Microservice&quot; style=&quot;max-width: 640px&quot; src=&quot;/img/spring-cloud-stream/diagram/rick.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we have defined one input channel called &lt;code class=&quot;highlighter-rouge&quot;&gt;rick&lt;/code&gt; and one output channel called &lt;code class=&quot;highlighter-rouge&quot;&gt;microverse&lt;/code&gt;.
These are implemented in a Spring Cloud Stream application like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputChannels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Input&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;SubscribableChannel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OutputChannels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Output&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;MessageChannel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;microverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Holy sh*t Rick, this almost seems like it’s too easy!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well Morty, erm dear reader, that’s because it is!
Didn’t I tell you that Spring is awesome at abstraction?
Yeah, this is why.
The only thing that is left for us to do, is write our “business logic”, or in our case: the part where we try to find our beloved Szechuan sauce!&lt;/p&gt;

&lt;p&gt;Since Rick is very lazy and an arrogant genius, he’s not gonna look for the sauce himself.
I mean, he’s got adventures to go on, inventions to invent and generally be a pain in the ass of the &lt;a href=&quot;http://rickandmorty.wikia.com/wiki/Galactic_Federation&quot; target=&quot;_blank&quot;&gt;Galactic Federation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s add another output channel to our interface:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OutputChannels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Output&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;MessageChannel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;meeseeks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Output&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;MessageChannel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;microverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Meeseeks?! What the hell is a meeseeks?
Patience my dear reader, all will be explained shortly.
First, let me show you the evil, brilliant piece of code which is gonna get us the Szechuan sauce:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SzechuanSauceFinder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_137&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C-137&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minimumRequestIntervalInMillis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEARCHING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findThatSauce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEARCHING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;SEARCHING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestIntervalInMillis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEARCHING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;meeseeks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buildMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I_WANT_MY_SZECHUAN_SAUCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_137&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

				&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestIntervalInMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

				&lt;span class=&quot;n&quot;&gt;requestIntervalInMillis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimumRequestIntervalInMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestIntervalInMillis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;SEARCHING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stopSearching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;SEARCHING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Isn’t that some of the most evil code you’ve ever seen?
Nothing more evil than static variables controlling state of an application, or precisely placed &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.sleep()&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;Okay, we’ve got a messaging microservice, pumping out messages at an increasing rate (up until 20 per second).
How will we know if our &lt;em&gt;meeseeks&lt;/em&gt;, whatever that is, has found the szechuan sauce?&lt;/p&gt;

&lt;p&gt;The rest of the code in this class will illustrate &lt;strong&gt;how an input channel can handle incoming messages&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SzechuanSauceFinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputChannels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputChannels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outputChannels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GlipGlop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glipGlop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GlipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getQuote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALL_DONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stopSearching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;microverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buildMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WUBBA_LUBBA_DUB_DUB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_137&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RickAndMortyQuote&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since the &lt;code class=&quot;highlighter-rouge&quot;&gt;rick&lt;/code&gt; input channel is a &lt;code class=&quot;highlighter-rouge&quot;&gt;SubscribableChannel&lt;/code&gt;, we can subscribe to it.
Well &lt;a href=&quot;http://pa1.narvii.com/6422/b662846ee28e630dd9661ecca86bd9c4ee0275ef_hq.gif&quot; target=&quot;_blank&quot;&gt;duh&lt;/a&gt; Sherlock!
A &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; can be of any type but we do need to cast it to our own format, a &lt;a href=&quot;https://www.youtube.com/watch?v=G9Ebl9vEKx0&amp;amp;t=28s&quot; target=&quot;_blank&quot;&gt;GlipGlop&lt;/a&gt;, but Spring has &lt;a href=&quot;https://docs.spring.io/spring-cloud-stream/docs/Elmhurst.BUILD-SNAPSHOT/reference/htmlsingle/#_using_streamlistener_for_automatic_content_type_handling&quot; target=&quot;_blank&quot;&gt;ways to make this easier&lt;/a&gt; for us.
We could have created a method annotated with the new &lt;code class=&quot;highlighter-rouge&quot;&gt;@StreamListener&lt;/code&gt; annotation, which would look like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@StreamListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RICK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GlipGlop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alright, so now we know what Rick wants, and how he intends to get it, we move to the next piece of the puzzle:&lt;/p&gt;

&lt;h1 id=&quot;mr-meeseeks&quot;&gt;Mr Meeseeks&lt;/h1&gt;

&lt;p&gt;Rick is such a genius, he invented a box that can spawn as many “Aladdin’s genies” as you want.
Use with caution though, you have been warned!
&lt;a href=&quot;http://rickandmorty.wikia.com/wiki/Mr._Meeseeks&quot; target=&quot;_blank&quot;&gt;Meeseeks&lt;/a&gt; are creatures created to serve a singular purpose for which they will go to any length to fulfill:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/qUYvIAP3qQk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;finding-the-sauce&quot;&gt;Finding the sauce&lt;/h2&gt;

&lt;p&gt;So our next task will be to create a &lt;strong&gt;Mr Meeseeks microservice&lt;/strong&gt;.
If I were to draw a very simple diagram of this application, it would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Mr Meeseeks Microservice&quot; style=&quot;max-width: 640px&quot; src=&quot;/img/spring-cloud-stream/diagram/meeseeks.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Same story as with the Rick microservice.
We need a very simple Spring Cloud Stream application with one input channel called &lt;code class=&quot;highlighter-rouge&quot;&gt;meeseeks&lt;/code&gt;.
In this case, we want to send GlipGlops to McDonalds, Rick and the Microverse, so we’re gonna need three output channels.&lt;/p&gt;

&lt;p&gt;The only thing we really need to put some effort in - &lt;em&gt;if you can even call it effort, I’ve had more effort tying my velcro shoes the other day&lt;/em&gt; - is the &lt;strong&gt;business logic&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MrMeeseekRoutine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputChannels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${INSTANCE_INDEX:${CF_INSTANCE_INDEX:0}}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MrMeeseekRoutine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputChannels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputChannels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outputChannels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;inputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;meeseeks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;GlipGlop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glipGlop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GlipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getQuote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I_WANT_MY_SZECHUAN_SAUCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;microverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageBuilder&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RickAndMortyQuote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OOOH_YEAH_CAN_DO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mcdonalds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageBuilder&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RickAndMortyQuote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PLEASE_GIVE_ME_SOME_SZECHUAN_SAUCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getQuote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YOU_ARE_A_WINNER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;MessageBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RickAndMortyQuote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL_DONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s getting quite boring already, this is child’s play.
What I’m &lt;a href=&quot;http://1.media.dorkly.cvcdn.com/23/26/c8f59cfc0bef4b6f164072daa2727e71.jpg&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;obviously&lt;/em&gt;&lt;/a&gt; doing here, is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;subscribe to the &lt;code class=&quot;highlighter-rouge&quot;&gt;meeseeks&lt;/code&gt; input channel&lt;/li&gt;
  &lt;li&gt;fetch the incoming GlipGlop&lt;/li&gt;
  &lt;li&gt;if its from Rick, comply and send a GlipGlop to the McDonalds channel requesting some Szechuan sauce&lt;/li&gt;
  &lt;li&gt;if its from McDonalds and a confirmation that we have just won some sauce, we let Rick know our task has been fulfilled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s see what our McDonalds microservice looks like.&lt;/p&gt;

&lt;h1 id=&quot;mcdonalds-where-the-sauce-is&quot;&gt;McDonalds: where the sauce is&lt;/h1&gt;

&lt;p&gt;&lt;img alt=&quot;Szechuan Sauce&quot; style=&quot;max-width: 600px&quot; src=&quot;/img/spring-cloud-stream/szechuan-poster.jpg&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More recently, to my surprise, &lt;a href=&quot;http://www.ign.com/articles/2017/10/02/rick-and-morty-mcdonalds-is-bringing-back-szechuan-sauce-for-one-day-only&quot; target=&quot;_blank&quot;&gt;McDonalds announced they were actually bringing back the now infamous 1998 Mulan Szechuan Sauce&lt;/a&gt;.
So I guess my demo just got a bit more relevant and my powers of clairvoyance are proven once again.&lt;/p&gt;

&lt;p&gt;At this point, it’s just more of the same. Let me show you the diagram:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;McDonalds Microservice&quot; style=&quot;max-width: 640px&quot; src=&quot;/img/spring-cloud-stream/diagram/mcdonalds.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spring Cloud Stream application&lt;/li&gt;
  &lt;li&gt;one input channel &lt;code class=&quot;highlighter-rouge&quot;&gt;mcdonalds&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;one output channel &lt;code class=&quot;highlighter-rouge&quot;&gt;meeseeks&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You get it by now.&lt;/p&gt;

&lt;p&gt;Here’s the code &lt;strong&gt;yawn&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;McdonaldsCashier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ODDS_AT_FINDING_SZECHUAN_SAUCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RAND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${INSTANCE_INDEX:${CF_INSTANCE_INDEX:0}}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luckyNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;McdonaldsCashier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputChannels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputChannels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;luckyNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RAND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ODDS_AT_FINDING_SZECHUAN_SAUCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;inputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mcdonalds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;GlipGlop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glipGlop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GlipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getQuote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RickAndMortyQuote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PLEASE_GIVE_ME_SOME_SZECHUAN_SAUCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RAND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ODDS_AT_FINDING_SZECHUAN_SAUCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luckyNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;meeseeks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;MessageBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RickAndMortyQuote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;YOU_ARE_A_WINNER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
							&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;outputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;meeseeks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;MessageBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RickAndMortyQuote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SORRY_NO_LUCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Oh man, I think I’m getting bored even writing this.
Stick with me, the demo is gonna be worth it.
Don’t scroll to the bottom just yet!
There’s only one piece of the puzzle left.&lt;/p&gt;

&lt;h1 id=&quot;morty&quot;&gt;Morty&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Aw djeez” - Morty&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt=&quot;Morty&quot; style=&quot;max-width: 167px&quot; src=&quot;/img/spring-cloud-stream/morty.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Morty is a young teenage boy.
He has short brown hair that he wears straight and neatly combed around his head.
He wears a yellow shirt, blue pants, and white shoes.&lt;/p&gt;

&lt;p&gt;He’s cute and adorable and is always along for the ride.
He gets to see all the incredible things that happen in the universe - &lt;em&gt;and microverse&lt;/em&gt; - so he’s the perfect character to represent our frontend.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Morty Microservice&quot; style=&quot;max-width: 640px&quot; src=&quot;/img/spring-cloud-stream/diagram/morty.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I just want to clarify that I’m in no way a great frontend developer.
I dabble in HTML, CSS and the occasional JavaScript, but my designer skills are abysmal.&lt;/p&gt;

&lt;p&gt;That’s why I love a framework like &lt;strong&gt;Bootstrap&lt;/strong&gt;: easy, intuitive and fast to create a semi decent web application.&lt;/p&gt;

&lt;p&gt;So &lt;em&gt;that’s&lt;/em&gt; why I choose to work with &lt;a href=&quot;http://bulma.io/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Bulma&lt;/strong&gt;&lt;/a&gt;: the even easier, &lt;em&gt;more&lt;/em&gt; intuitive version of Bootstrap.
You can check out my horrible frontend code &lt;a href=&quot;https://github.com/Turbots/szechuan/tree/master/morty/frontend&quot; target=&quot;_blank&quot;&gt;in the Git repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Morty microservice is a bit different than the others, since it needs to collect all the input messages and transfer them to a browser.
We do this using &lt;a href=&quot;https://www.w3schools.com/html/html5_serversentevents.asp&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;server-sent events&lt;/strong&gt; or &lt;strong&gt;SSE&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Spring MVC has had support for SSE for a while and it’s actually very easy to use:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_EVENT_STREAM_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SseEmitter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SseEmitter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SseEmitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, even &lt;a href=&quot;http://rickandmorty.wikia.com/wiki/Jerry_Smith&quot; target=&quot;_blank&quot;&gt;Jerry&lt;/a&gt; could figure this stuff out.
In the example above, nothing is actually being emitted.
When someone browses to the endpoint, it opens an HTTP connection and waits for messages.
It’s up to the server to actually start sending data messages from this emitter, which will trigger an &lt;code class=&quot;highlighter-rouge&quot;&gt;onMessage&lt;/code&gt; JavaScript event at client-side.&lt;/p&gt;

&lt;p&gt;Let’s see how we implemented this for our Morty microservice:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/events&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EventController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SseEmitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EventController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputChannels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;GlipGlopHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glipGlopHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlipGlopHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;inputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glipGlopHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;inputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;meeseeks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glipGlopHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;inputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mcdonalds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glipGlopHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;inputChannels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;microverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glipGlopHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_EVENT_STREAM_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SseEmitter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;SseEmitter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SseEmitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCompletion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onTimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GlipGlopHandler&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessagingException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;GlipGlop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glipGlop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GlipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glipGlop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;emitters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IOException when trying to send event&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: this code is not production-ready and can probably cause instant brain damage when observed.
This code is for demo purposes only.&lt;/p&gt;

&lt;p&gt;A quick explanation of the code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;we subscribe to the four input channels and attach the same message handler since we want to handle all the GlipGlops equally&lt;/li&gt;
  &lt;li&gt;when a client performs a GET request to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/events&lt;/code&gt; endpoint, it is assigned an &lt;code class=&quot;highlighter-rouge&quot;&gt;SseEmitter&lt;/code&gt; which is added to a list&lt;/li&gt;
  &lt;li&gt;whenever a GlipGlop on any of the four input channels is received, it is sent to all the registered SseEmitters&lt;/li&gt;
  &lt;li&gt;exactly nothing is done when errors occur - totally &lt;em&gt;intentional&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-microverse&quot;&gt;The Microverse&lt;/h2&gt;

&lt;p&gt;Everything that is described in this post, is transpiring inside the miniature dimension called &lt;strong&gt;The Microverse&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;The Microverse&quot; style=&quot;max-width: 367px&quot; src=&quot;/img/spring-cloud-stream/Microverse_Battery.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rickandmorty.wikia.com/wiki/Microverse_Battery&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;the Microverse&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In all seriousness - yeah, seriously - we are deploying our microservices on the &lt;a href=&quot;https://pivotal.io/platform&quot; target=&quot;_blank&quot;&gt;Pivotal Cloud Foundry&lt;/a&gt; (PCF) platform.
In this case, I’m using a paid account on &lt;a href=&quot;https://run.pivotal.io/&quot; target=&quot;_blank&quot;&gt;Pivotal Web Services&lt;/a&gt;, their online version of PCF.
Inside this powerful Platform as a Service (PaaS) offering, there’s this concept of &lt;strong&gt;organizations and spaces&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Inside of our Ordina JWorks organization, I have created a space called &lt;code class=&quot;highlighter-rouge&quot;&gt;microverse&lt;/code&gt; to house all of the applications in my demo.
This way, my wacky adventures cannot interfere with any of our actually useful applications.&lt;/p&gt;

&lt;p&gt;Through the powerful &lt;strong&gt;service broker&lt;/strong&gt; mechanism, I provisioned a RabbitMQ service and bound it to my applications.
This means the freshly created RabbitMQ instance’s connection details are automatically shared inside of my application’s containers as system properties.&lt;/p&gt;

&lt;p&gt;Since Spring Boot kicks ass at taking system properties and ramming them inside some auto-configuration, we don’t have to worry about anything remotely resembling boilerplate code.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Before I go over to the demo, I wanted to share my &lt;strong&gt;grand clarification of the Microverse and all things which lie within&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Grand Clarification&quot; style=&quot;max-width: 640px&quot; src=&quot;/img/spring-cloud-stream/diagram/clarification.png&quot; class=&quot;image fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, I have drawn &lt;strong&gt;multiple Meeseeks instances&lt;/strong&gt; in this diagram.
That’s because I want to spawn multiple Meeseeks to perform my task.&lt;/p&gt;

&lt;p&gt;Without any extra configuration, &lt;strong&gt;every Meeseeks instance will pick up every GlipGlop&lt;/strong&gt; posted to the &lt;code class=&quot;highlighter-rouge&quot;&gt;meeseeks&lt;/code&gt; input channel.
This means adding additional Meeseeks instances won’t help us very much (it will increase the total number of GlipGlops in the system and probably overload the server even faster).
We want every separate Meeseeks instance to pick up a unique message on that input channel.&lt;/p&gt;

&lt;p&gt;This can be accomplished by putting the Meeseeks application inside of a &lt;a href=&quot;https://docs.spring.io/spring-cloud-stream/docs/current/reference/htmlsingle/#consumer-groups&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;consumer group&lt;/strong&gt;&lt;/a&gt;.
Only &lt;em&gt;one&lt;/em&gt; property is required to do this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring:
  cloud:
    stream:
      bindings:
        meeseeks:
          group: szechuan-finder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This indicates we want the &lt;code class=&quot;highlighter-rouge&quot;&gt;meeseeks&lt;/code&gt; message channel to be part of a consumer group called &lt;code class=&quot;highlighter-rouge&quot;&gt;szechuan-finder&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;demo&quot;&gt;Demo&lt;/h1&gt;

&lt;p&gt;This could be quite anti-climactic, but you’re gonna have to &lt;strong&gt;touch Pickle Rick to see the demo&lt;/strong&gt;.
Go on… Touch him…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rnm-morty.cfapps.io&quot; target=&quot;_blank&quot;&gt;
    &lt;img alt=&quot;Grand Clarification&quot; style=&quot;max-width: 275px&quot; src=&quot;/img/spring-cloud-stream/pickle-rick.jpg&quot; class=&quot;image fit&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Press the Rick and Meeseeks image in the demo and enjoy the show!&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Github Repository with all the code: &lt;a href=&quot;https://github.com/Turbots/szechuan&quot; target=&quot;_blank&quot;&gt;https://github.com/Turbots/szechuan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Slides about this topic: &lt;a href=&quot;http://slides.com/turbots/spring-cloud-stream-rick-morty&quot; target=&quot;_blank&quot;&gt;http://slides.com/turbots/spring-cloud-stream-rick-morty&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Cloud Stream documentation: &lt;a href=&quot;https://docs.spring.io/spring-cloud-stream/docs/current/reference/htmlsingle/&quot; target=&quot;_blank&quot;&gt;https://docs.spring.io/spring-cloud-stream/docs/current/reference/htmlsingle/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;My presentation on our yearly JOIN event: &lt;a href=&quot;https://www.youtube.com/watch?v=Nl9OIuNRYwI&quot; target=&quot;_blank&quot;&gt;https://www.youtube.com/watch?v=Nl9OIuNRYwI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Try out Pivotal Cloud Foundry on your local workstation: &lt;a href=&quot;https://pivotal.io/platform/pcf-tutorials/getting-started-with-pivotal-cloud-foundry-dev/introduction&quot; target=&quot;_blank&quot;&gt;https://pivotal.io/platform/pcf-tutorials/getting-started-with-pivotal-cloud-foundry-dev/introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;improvements&quot;&gt;Improvements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Better error handling on Morty - too many browser connections when sending 150 messages a second over event streams is quite demanding apparently&lt;/li&gt;
  &lt;li&gt;Addition of Spring Cloud Data Flow in the mix - registering the applications and dragging around inputs and outputs should be fun - also, scaling!&lt;/li&gt;
  &lt;li&gt;Improved UI - obviously&lt;/li&gt;
  &lt;li&gt;Complete event-based demo instead of endpoints to force certain operations (spawning/killing Meeseeks, waking up Rick, …)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Dieter&quot;, &quot;last_name&quot;=&gt;&quot;Hubau&quot;, &quot;github&quot;=&gt;&quot;Turbots&quot;, &quot;twitter&quot;=&gt;&quot;dhubau&quot;, &quot;linkedin&quot;=&gt;&quot;dhubau&quot;, &quot;permalink&quot;=&gt;&quot;/author/dieter-hubau/&quot;, &quot;avatar&quot;=&gt;&quot;dieter-hubau.png&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Cloud and PaaS&quot;, &quot;email&quot;=&gt;&quot;dieter.hubau@ordina.be&quot;, &quot;phone&quot;=&gt;&quot;0032478458150&quot;, &quot;bio&quot;=&gt;&quot;Dieter is a Principal Java Consultant at Ordina, passionate about all Java- and JavaScript related technologies. Aside from his day-to-day occupation as a consultant, he helps fellow developers as a Competence Leader for the Cloud &amp;amp; PaaS Competence Center by giving workshops, talks and courses about the newest technologies. In his spare time, Dieter enjoys playing soccer, running, (online) gaming and fiddling around with all kinds of fancy new software.&quot;}</name><email>dieter.hubau@ordina.be</email></author><category term="Spring" /><category term="Spring" /><category term="Cloud" /><category term="Stream" /><category term="Microservices" /><category term="RabbitMQ" /><category term="Messaging" /><category term="Reactive" /><category term="Rick" /><category term="Morty" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/spring-cloud-stream.png" /></entry><entry><title type="html">Building end-to-end IoT demos with LoRa</title><link href="https://ordina-jworks.github.io/iot/2017/09/28/End-to-end-IoT.html" rel="alternate" type="text/html" title="Building end-to-end IoT demos with LoRa" /><published>2017-09-28T00:00:00+00:00</published><updated>2017-09-28T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/iot/2017/09/28/End-to-end-IoT</id><content type="html" xml:base="https://ordina-jworks.github.io/iot/2017/09/28/End-to-end-IoT.html">&lt;blockquote&gt;
  &lt;p&gt;To showcase end-to-end LoRa applications we built simple yet fun, real world demo applications. 
These applications show a full end-to-end implementation of the LoRa technology leveraging the Proximus MyThings Internet of Things platform.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; style=&quot;width: auto; max-height: 500px; margin:0px auto;&quot; alt=&quot;Booze-o-meter at devoxx&quot; src=&quot;/img/end-to-end-iot/booze-devoxx.jpg&quot; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Booze-o-meter V2 at Devoxx Belgium 2016.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;building-end-to-end-lora-iot-solutions&quot;&gt;Building end-to-end LoRa Iot Solutions&lt;/h1&gt;
&lt;p&gt;Building an enterprise IoT solution is challenging. Devices need to be enrolled, monitored and maintained.
You can roll your own network and handle all of this yourself, this however will require quite the backend system to facilitate all of this.
The &lt;strong&gt;Proximus LoRa network&lt;/strong&gt; in combination with their &lt;strong&gt;MyThings platform&lt;/strong&gt; takes away most of this and allows us to focus on the actual applications.&lt;/p&gt;

&lt;h2 id=&quot;technologies-overview&quot;&gt;Technologies overview&lt;/h2&gt;
&lt;p&gt;For our rapid prototypes and small to medium applications we have chosen the following technical stack:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Proximus LoRa network for LoRa connectivity&lt;/li&gt;
  &lt;li&gt;Proximus MyThings platform for device management&lt;/li&gt;
  &lt;li&gt;NodeJS with TypeScript on the backend&lt;/li&gt;
  &lt;li&gt;Angular on the frontend (The older versions are still on AngularJS)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will look into each item in full detail below:&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; style=&quot;max-width: 300px; margin:0px auto;&quot; alt=&quot;LoRa&quot; src=&quot;/img/end-to-end-iot/lora.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;1-lora&quot;&gt;1. LoRa&lt;/h3&gt;

&lt;p&gt;LoRa, short for LoRaWAN is a LPWAN (Low Power Wide Area Network) is meant for wireless battery powered devices or ‘things’.
It offers a low power, low bandwidth secure network to transceive information across large distances. The network is laid out in star topology and can easily be extended by placing more base stations also called LoRa gateways.&lt;/p&gt;

&lt;p&gt;Some network parameters:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Range of 5 to 15 kilometers (3,1 to 9,3 miles) depending on the conditions and signal strength.&lt;/li&gt;
  &lt;li&gt;Data rate of 0,3 kbps to 50 kbps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More detailed information and the full specifications can be found on the &lt;a href=&quot;https://www.lora-alliance.org/technology&quot; target=&quot;_blank&quot;&gt;LoRa Alliance website&lt;/a&gt;.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; style=&quot;max-width: 300px; margin:0px auto;&quot; alt=&quot;Proximus MyThings&quot; src=&quot;/img/end-to-end-iot/mythings.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;2-proximus-mythings&quot;&gt;2. Proximus MyThings&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://mythings.proximus.be/#/login/&quot; target=&quot;_blank&quot;&gt;Proximus MyThings&lt;/a&gt; is a LoRa device onboarding and management platform. 
It is used to enroll devices and sensors, to map their data to specific endpoints and provide tools for device management.&lt;/p&gt;

&lt;p&gt;The platform consists of three main parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MyThings Builder: Charts and sensor values (containers)&lt;/li&gt;
  &lt;li&gt;Mythings Manager: Online device onboarding and user management&lt;/li&gt;
  &lt;li&gt;MyThings Scanner: Offline (in the field) device onboarding&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; style=&quot;max-width: 250px; margin:0px auto;&quot; alt=&quot;NodeJS&quot; src=&quot;/img/end-to-end-iot/node.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;3-nodejs--typescript&quot;&gt;3. Node.js &amp;amp; TypeScript&lt;/h3&gt;

&lt;p&gt;Most people should be familiar with &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot;&gt;Node&lt;/a&gt;.
It is the JavaScript runtime built upon the V8 engine that Google Chrome uses.
It is a lightweight and efficient runtime that uses an event-driven, non-blocking I/O model.
This combined with the added type safety that TypeScript provides makes this an excellent choice for rapid prototyping.&lt;/p&gt;

&lt;p&gt;Some of our own demo applications make use of the Node Simple Server (NSS) application, while others just use &lt;a href=&quot;https://expressjs.com&quot; target=&quot;_blank&quot;&gt;Express&lt;/a&gt;. This depends on the needs of the project.
If you are interested in the NSS project, we have a blog post about it &lt;a href=&quot;http://ordina-jworks.github.io/iot/2017/01/21/Node-with-TypeScript.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and it is &lt;a href=&quot;https://github.com/ordina-jworks/NodeSimpleServer&quot; target=&quot;_blank&quot;&gt;on GitHub&lt;/a&gt; too!&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; style=&quot;max-width: 200px; margin:0px auto;&quot; alt=&quot;Angular&quot; src=&quot;/img/end-to-end-iot/angular.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;4-angular&quot;&gt;4. Angular&lt;/h3&gt;

&lt;p&gt;Like with Node, most people should be familiar with &lt;a href=&quot;https://angular.io&quot; target=&quot;_blank&quot;&gt;Angular&lt;/a&gt; (or the older AngularJS).
Angular is a development platform for building modern single page web applications.
It is a complete rewrite of the older AngularJS and therefor has some big changes in how things work.
Angular is easy to set up and use, it also is fully cross platform/browser compatible.&lt;/p&gt;

&lt;h2 id=&quot;our-demo-applications&quot;&gt;Our demo applications&lt;/h2&gt;
&lt;p&gt;All our demo applications are publicly available in the &lt;a href=&quot;https://github.com/ordina-jworks/NodeSimpleServer&quot; target=&quot;_blank&quot;&gt;GitHub project of NSS&lt;/a&gt;.
These demo applications are ever evolving as we are currently porting them from the older AngularJS to Angular with TypeScript.&lt;/p&gt;

&lt;p&gt;Our demo applications have been showcased and used at several events including internal Proximus events as well as conferences like &lt;a href=&quot;https://devoxx.be&quot; target=&quot;_blank&quot;&gt;Devoxx&lt;/a&gt;, &lt;a href=&quot;https://techorama.be&quot; target=&quot;_blank&quot;&gt;Techorama&lt;/a&gt; and &lt;a href=&quot;https://iot-convention.eu/en/home/&quot; target=&quot;_blank&quot;&gt;The Belgian IoT convention&lt;/a&gt; in Mechelen.&lt;/p&gt;

&lt;p&gt;Below we will go into detail about each application and how it came to be, as well as the iterations they went through.&lt;/p&gt;

&lt;p&gt;Aside from the &lt;strong&gt;Slotmachine&lt;/strong&gt; and the &lt;strong&gt;Booze-o-meter&lt;/strong&gt; we’ve also developed the &lt;strong&gt;Stairway to Health&lt;/strong&gt; application for Proximus. 
A blog post about this will be available in October.
For the impatient, the IoT talk at the annual JWorks JOIN event covered this topic already and can be viewed on YouTube.&lt;/p&gt;

&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 55%;&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/BbnwrvfozUs?rel=0&quot; width=&quot;100%&quot; height=&quot;100%;&quot; style=&quot;position: absolute; left: 0; top: 0; bottom: 0; right: 0;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;1-the-slotmachine&quot;&gt;1. The Slotmachine&lt;/h3&gt;
&lt;p&gt;The Slotmachine application does mostly what its name suggests, but with a twist.&lt;/p&gt;

&lt;p&gt;The idea is simple:
If required, the player registers him or herself in the application.
A simple push button sends a signal to the backend application. 
The application dispatches an event via a websocket to the frontend application which turns the Slotmachine. 
The Slotmachine can either result in a win or a loss. 
A maximum of three attempts are possible per player, after which a new player registration is required to play again.
The player registration can be disabled depending on the requirements of the event/conference.&lt;/p&gt;

&lt;p&gt;The light effects are also controlled by the application.
If the user has registered the gentle fading switches to a running light effect and if the user wins, the effect changes to a carrousel of different colors.
The effects are controlled the same way the button is controlled but in the opposite direction. 
The frontend application sends a websocket event to the backend application which controls the Arduino and the LEDs.&lt;/p&gt;

&lt;div style=&quot;text-align:center; margin:0px auto;&quot;&gt;
  &lt;img class=&quot;image fit&quot; style=&quot;width: 48%; display: inline-block;&quot; alt=&quot;Slotmachine application&quot; src=&quot;/img/end-to-end-iot/slotmachine-1.jpg&quot; /&gt;
  &lt;img class=&quot;image fit&quot; style=&quot;width: 48%; display: inline-block;&quot; alt=&quot;Slotmachine application&quot; src=&quot;/img/end-to-end-iot/slotmachine-2.jpg&quot; /&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Slotmachine V1 test setup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;v1&quot;&gt;V1&lt;/h4&gt;
&lt;p&gt;The first version was not LoRa enabled and used a push button and Arduino integration via Johnny-Five to allow interaction. This meant that an Arduino always needed to be connected to the server or laptop that was used as a server.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img class=&quot;image fit&quot; style=&quot;max-width: 650px; margin:0px auto;&quot; alt=&quot;Slotmachine application at devoxx 2015&quot; src=&quot;/img/end-to-end-iot/slotmachine-devoxx.jpg&quot; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Slotmachine V1 at Devoxx Belgium 2015.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;v2&quot;&gt;V2&lt;/h4&gt;
&lt;p&gt;The second version of the Slotmachine application swapped out the Arduino and the required wired connection with a &lt;strong&gt;LoRa enabled push button.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This allowed us to demonstrate the capabilities of the LoRa network in a fun and engaging way.
The application remained unchanged for the user, and was adapted to be more configurable:
Setting a win chance (up to 100%) and different images/styling for different events.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;2-the-booze-o-meter&quot;&gt;2. The Booze-o-meter&lt;/h3&gt;
&lt;p&gt;The Booze-o-meter application is a drink dispenser that relays liquid fill level in the dispenser.
It is a fun example to demonstrate how measuring the fill level of a container can be achieved.
This idea can be applied to container in a whole range of different industries and use cases. 
From oil tanks to garbage cans and to containers.&lt;/p&gt;

&lt;p&gt;The application setup is extremely similar to the Slotmachine application. 
The sensors relay their data via the MyThings platform to our backend, which in turns dispatches an event on a websocket so the frontend application can display the change.&lt;/p&gt;

&lt;div style=&quot;text-align:center; margin:0px auto;&quot;&gt;
  &lt;img class=&quot;image fit&quot; style=&quot;width: 48%; display: inline-block;&quot; alt=&quot;Booze-o-meter application&quot; src=&quot;/img/end-to-end-iot/booze-1.jpg&quot; /&gt;
  &lt;img class=&quot;image fit&quot; style=&quot;width: 48%; display: inline-block;&quot; alt=&quot;Booze-o-meter application&quot; src=&quot;/img/end-to-end-iot/booze-2.jpg&quot; /&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Booze-o-meter V1 test setup with regular water.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;v1-1&quot;&gt;V1&lt;/h4&gt;
&lt;p&gt;The first version of the Booze-o-meter used three sensors that can detect a liquid through a thin plastic container. This allowed us to represent the level in the container in a coarse way:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;FULL (initial state)&lt;/li&gt;
  &lt;li&gt;HIGH (sensor)&lt;/li&gt;
  &lt;li&gt;MEDIUM (sensor)&lt;/li&gt;
  &lt;li&gt;LOW (sensor)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The sensors have a simple binary readout, &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; if liquid is detected, &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; if not.
This data gets represented on the frontend application as the four states as mentioned above.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;v2-1&quot;&gt;V2&lt;/h4&gt;
&lt;div style=&quot;text-align:center; margin:0px auto;&quot;&gt;
  &lt;img class=&quot;image fit&quot; style=&quot;width: 48%; display: inline-block;&quot; alt=&quot;Booze-o-meter application&quot; src=&quot;/img/end-to-end-iot/booze-3.jpg&quot; /&gt;
  &lt;img class=&quot;image fit&quot; style=&quot;width: 48%; display: inline-block;&quot; alt=&quot;Booze-o-meter application&quot; src=&quot;/img/end-to-end-iot/booze-4.jpg&quot; /&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Booze-o-meter V2 at Devoxx Belgium 2016 with actual liquor!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second version of the Booze-o-meter application allowed us to get a more detailed reading of the remaining fluid level in the container thanks to the addition of an ultrasonic sensor.
This sensor can measure the distance between itself and a surface, in this case the surface of the liquid in the container.&lt;/p&gt;

&lt;p&gt;The application was updated to support this more granular approach that is able to show the level in the container accurately to 1%.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Our demo applications have served us well in bringing across the idea of LoRa to customers and other interested developers. 
We will continue to evolve our demo applications by adding new features, technologies and keeping them up to date.&lt;/p&gt;

&lt;h3 id=&quot;useful-links--further-reading&quot;&gt;Useful links &amp;amp; further reading&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lora-alliance.org/technology&quot; target=&quot;_blank&quot;&gt;LoRa Alliance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mythings.proximus.be/#/login/&quot; target=&quot;_blank&quot;&gt;Proximus MyThings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ordina-jworks/NodeSimpleServer&quot; target=&quot;_blank&quot;&gt;Node Simple Server on GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=BbnwrvfozUs&amp;amp;t=21s&quot; target=&quot;_blank&quot;&gt;StairWay to Health JOIN Presentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://angular.io&quot; target=&quot;_blank&quot;&gt;Angular&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot;&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://expressjs.com&quot; target=&quot;_blank&quot;&gt;Express&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van den Abeele&quot;, &quot;github&quot;=&gt;&quot;beele&quot;, &quot;twitter&quot;=&gt;&quot;_nabeele&quot;, &quot;linkedin&quot;=&gt;&quot;Mr-IoT&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-den-abeele/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-den-abeele.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Internet of Things&quot;, &quot;email&quot;=&gt;&quot;kevin.vandenabeele@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin is a Principial Java consultant at Ordina, passionate about all Java and JavaScript related technologies. In his roll as Competence Leader Internet of Things he uses his knowledge of building custom software to build innovative solutions using new technologies. Currently focussing on the internet of things and sensor networks using LoRa. Loves to tinker with gadgets.&quot;}</name><email>kevin.vandenabeele@ordina.be</email></author><category term="IoT" /><category term="JavaScript" /><category term="TypeScript" /><category term="IoT" /><category term="Internet Of Things" /><category term="Arduino" /><category term="Prototyping" /><category term="Sensors" /><category term="LoRa" /><category term="Booze" /><category term="Node.js" /><category term="Proximus" /><category term="MyThings" /><category term="smart tech" /><category term="smart" /><category term="tech" /><category term="johnny-five" /><category term="electronics" /><category term="modem" /><summary type="html">To showcase end-to-end LoRa applications we built simple yet fun, real world demo applications. These applications show a full end-to-end implementation of the LoRa technology leveraging the Proximus MyThings Internet of Things platform.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/end-to-end-iot/booze-5.jpg" /></entry><entry><title type="html">Securing your cloud-native microservice architecture in Spring: part 1</title><link href="https://ordina-jworks.github.io/microservices/2017/09/26/Secure-your-architecture-part1.html" rel="alternate" type="text/html" title="Securing your cloud-native microservice architecture in Spring: part 1" /><published>2017-09-26T00:00:00+00:00</published><updated>2017-09-26T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/microservices/2017/09/26/Secure-your-architecture-part1</id><content type="html" xml:base="https://ordina-jworks.github.io/microservices/2017/09/26/Secure-your-architecture-part1.html">&lt;p&gt;When developing cloud-native microservices, we need to think about securing the data that is being propagated from one service to another service and securing the data at rest. 
So how much security is enough to secure our architecture? Is it the user that identifies itself and decides what data he has access to?&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#our-cloud-native-architecture&quot;&gt;Our cloud-native architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#where-our-journey-begins&quot;&gt;Authentication &amp;amp; Authorization Principle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-the-oauth2-protocol&quot;&gt;Using the OAuth2 Protocol&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jwt&quot;&gt;Understanding JSON Web Tokens&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#uaa&quot;&gt;Using a User Authentication &amp;amp; Authorization Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#securing-your-microservice&quot;&gt;Securing your microservice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;our-cloud-native-architecture&quot;&gt;Our cloud-native architecture&lt;/h1&gt;
&lt;p&gt;In this blog series we will cover these questions and guide you in applying the security layer to your cloud-native blueprint.
With this blueprint, we are going to use the &lt;a href=&quot;https://spring.io/&quot; target=&quot;_blank&quot;&gt;Spring ecosystem&lt;/a&gt; throughout the series.
Solving the following problems is crucial for building a cloud-native microservices architecture, but it should be technology-agnostic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User Authentication &amp;amp; Authorization Server: &lt;a href=&quot;https://spring.io/guides/tutorials/spring-boot-oauth2/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Security OAuth2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Load Balancer &amp;amp; Routing: &lt;a href=&quot;https://spring.io/guides/gs/routing-and-filtering/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Zuul&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Communication client: &lt;a href=&quot;http://projects.spring.io/spring-cloud/spring-cloud.html#spring-cloud-feign&quot; target=&quot;_blank&quot;&gt;Spring Cloud Feign&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Externalized Config: &lt;a href=&quot;https://cloud.spring.io/spring-cloud-config/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Config Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 2.5rem auto; width: 100%;&quot;&gt;
  &lt;div class=&quot;col-md-offset-3 col-md-6&quot; style=&quot;padding: 0;&quot;&gt;
	
&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;arch&quot; src=&quot;/img/microservices/part1/cloud-architecture.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;where-our-journey-begins&quot;&gt;Where our journey begins…&lt;/h1&gt;
&lt;p&gt;When it comes to users interacting with our system, we want to verify that the person can identify him- or herself.
Most of the time this appears in a login form where you enter your credentials, or in a login page from a third party application (Facebook, Google, etc).&lt;/p&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 2.5rem auto; width: 100%;&quot;&gt;
  &lt;div class=&quot;col-md-offset-3 col-md-6&quot; style=&quot;padding: 0;&quot;&gt;
	
&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;login&quot; src=&quot;/img/microservices/part1/login.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you like more secure systems, you can add another level of complexity on top of it.
Most commonly used is &lt;a href=&quot;https://en.wikipedia.org/wiki/Multi-factor_authentication&quot; target=&quot;_blank&quot;&gt;Two-factor-authentication&lt;/a&gt;, where the client will use an external provider (Google Authenticator for example) to issue a token for your registered application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;authorization&quot;&gt;Authorization&lt;/h2&gt;
&lt;p&gt;Authorization is the mechanism that uses the user’s data to verify what he is allowed to do.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;For instance, who has access to which resources and what are his access rights (eg. read or write) to those resources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To use these two mechanisms in our system, we will be using a security protocol that fits our microservices architecture.
Since we don’t want everyone to have an account for each (micro)service, we aim to have one single identity per person so that the user needs to authenticate only once.&lt;/p&gt;

&lt;h1 id=&quot;using-the-oauth2-protocol&quot;&gt;Using the OAuth2 Protocol&lt;/h1&gt;
&lt;p&gt;When searching for a security protocol, we don’t want to reinvent the wheel and look at what is supported by the Spring framework.
Obviously, it depends on the use case of the applications that require resources from our system.
Is it a third party application like Facebook or a first party like your own application? Or both? 
I will explain both &lt;a href=&quot;#oauth2-scopes&quot; target=&quot;_blank&quot;&gt;OAuth2&lt;/a&gt; and &lt;a href=&quot;#jwt&quot; target=&quot;_blank&quot;&gt;JSON Web Token&lt;/a&gt; and how they solve these requirements.&lt;/p&gt;

&lt;p&gt;The OAuth2 delegation protocol allows us to retrieve an access token from an identity provider and gain access to a microservice by passing the token with subsequent requests.
When introducing the OAuth2 framework to our system, we will be using four grant types.
These grant types are different ways to obtain an access token, some clients are more trusted than others.&lt;/p&gt;

&lt;h3 id=&quot;oauth2-grant-types&quot;&gt;OAuth2 Grant Types&lt;/h3&gt;

&lt;h4 id=&quot;third-party-applications-authorization-code-grant-type-and-implicit-grant-type&quot;&gt;Third party applications: Authorization Code grant type and Implicit grant type&lt;/h4&gt;
&lt;p&gt;Authorization Code is the most common used grant type for third party applications, where user’s confidentiality can be maintained.
The user won’t have to share his credentials with the application that is requesting resources from our backend. 
This is a redirection-based flow, which means that the application must be capable of interacting with the user’s web browser.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The frontend (application) makes a request to the User Authentication &amp;amp; Authorization server (UAA) on behalf of the user&lt;/li&gt;
  &lt;li&gt;The UAA server redirects to a permission window of a third party for the user to grant permission, the user authenticates and grants permission&lt;/li&gt;
  &lt;li&gt;The UAA server returns an authorization code with a redirect url&lt;/li&gt;
  &lt;li&gt;The frontend uses the authorization code and an application identification to request an access token from the UAA server&lt;/li&gt;
  &lt;li&gt;The UAA verifies the authorization code and returns an access token&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Implicit grant type follows the same principle as the Authorization Code type but does not exchange an authorization code to issue an access token.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;57b5f3f256a3449b9b3038bc69bf2d5f&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;first-party-applications-password-grant-type&quot;&gt;First party applications: Password grant type&lt;/h4&gt;
&lt;p&gt;This grant type is best used for first party applications,
where the user is in a trust relationship with the application.
The application authenticates on behalf of the user and receives the proper JWT.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The user provides his credentials to the frontend, commonly done with a login form&lt;/li&gt;
  &lt;li&gt;The frontend assembles a POST request with the credentials to the UAA server&lt;/li&gt;
  &lt;li&gt;The UAA validates the user and returns a valid JWT&lt;/li&gt;
&lt;/ul&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;1a77277934e14454bf3a66f22a31a26a&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;trusted-service-to-service-communication-client-credentials-grant-type&quot;&gt;Trusted Service to Service communication: Client Credentials grant type&lt;/h4&gt;
&lt;p&gt;The trusted service can request an access token using only its client-id and client-secret.
When the client is requesting access to the protected resources under its control, 
it is very important that the client credentials grant type MUST only be used by confidential clients.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Zuul authenticates with his client-id and client-secret&lt;/li&gt;
  &lt;li&gt;The UAA validates the credentials and returns a valid JWT&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;oauth2-scopes&quot;&gt;OAuth2 Scopes&lt;/h3&gt;
&lt;p&gt;OAuth 2.0 scopes provide a way to limit the amount of access that is granted to an access token.
If the scope is not defined, the client is not limited by scope.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An access token issued to a client can be granted READ or/and WRITE access to protected resources.
If you enforce a WRITE scope to your API endpoint and it tries to call the endpoint with a token granted a READ scope, the call will fail&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;jwt&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;json-web-tokens-jwt&quot;&gt;JSON Web Tokens (JWT)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jwt.io/&quot; target=&quot;_blank&quot;&gt;JSON Web Tokens&lt;/a&gt; (JWT) is a compact URL-safe means of representing claims to be transferred between two parties.
The claims in a JWT are encoded as a JavaScript Object Notation (JSON) object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or MACed and/or encrypted.
The suggested pronunciation of JWT is the same as the English word “jot”.
The payload consists of some standard attributes (called claims), such as issuer, subject (the user’s identity), and expiration time.
The specification allows these claims to be customized, allowing additional information to be passed along.
Be careful when passing additional information, if you like to go deeper on this topic with a real use case, you can read &lt;a href=&quot;http://ordina-jworks.github.io/microservices/2016/05/01/Using-JWT-Tokens-for-State-Transfer.html&quot;&gt;Using JWT for State Transfer&lt;/a&gt;
&lt;a href=&quot;https://jwt.io/&quot; target=&quot;_blank&quot;&gt;Jwt.io&lt;/a&gt; provides a quick way to decode your JWT.&lt;/p&gt;

&lt;p&gt;One of the challenges in a microservice-based architecture is identity propagation.
After the authentication, the identity of the user needs to be propagated to the next microservice in a trusted way. &lt;br /&gt;
JWT is used here to carry along information of the user.
Based on a token, your microservice needs to be able to create a principal object. 
This principal object needs to contain all the necessary info so the system can decide whether or not the request should be executed or not.&lt;/p&gt;

&lt;div class=&quot;row&quot; style=&quot;margin: 0 auto 2.5rem auto; width: 100%;&quot;&gt;
  &lt;div class=&quot;col-md-offset-3 col-md-6&quot; style=&quot;padding: 0;&quot;&gt;
	
&lt;figure&gt;
    &lt;img class=&quot;center-block image fit&quot; alt=&quot;jwt&quot; src=&quot;/img/microservices/part1/jwt-example.png&quot; /&gt;
    
&lt;/figure&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;dealing-with-time&quot;&gt;Dealing with time&lt;/h3&gt;

&lt;p&gt;When propagating the identity of the user, you don’t want it to last for a infinite amount of time. &lt;br /&gt;
That’s why JWTs have an expiration time.
When expired, the JWT will be invalid and the client needs to request a new JWT with the refresh token.
These refresh tokens carry the needed information to issue a new JWT.
Refresh tokens can also expire but are rather long-lived.
JWTs have three fields that relate to time and expiry, all of which are optional.
In most cases, you should include these fields and validate that the token:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;is not expired (exp)&lt;/li&gt;
  &lt;li&gt;was created before the current time (iat)&lt;/li&gt;
  &lt;li&gt;should not be used before the current time (nbf)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these times are expressed as UNIX epoch timestamps, and are best checked in the order as described above.&lt;/p&gt;

&lt;h3 id=&quot;signed-jwts&quot;&gt;Signed JWTs&lt;/h3&gt;

&lt;p&gt;Signing a JWT helps establish trust between services, because it gives a recipient reason to believe that the message was created by a known sender and that the message was not altered in transit.
JWTs are being signed by a public/private key pair.
Almost all of the JWT libraries support signing. To check if yours supports it, visit &lt;a href=&quot;https://jwt.io/#libraries-io&quot;&gt;JWT Libraries&lt;/a&gt;.
For a deeper dive into signing JWT, check our tech post about &lt;a href=&quot;http://ordina-jworks.github.io/security/2016/03/12/Digitally-signing-your-JSON-documents.html&quot; target=&quot;_blank&quot;&gt;Digitally signing your JSON Documents&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The user requests a resource&lt;/li&gt;
  &lt;li&gt;The frontend assembles a request with an Authorization header and a Bearer token inside, fires off the request to Zuul&lt;/li&gt;
  &lt;li&gt;Zuul verifies the token in communication with the UAA server&lt;/li&gt;
  &lt;li&gt;If the token is valid, Zuul redirects the frontend to the correct resource on the proper microservice&lt;/li&gt;
  &lt;li&gt;The microservice checks for authorization to the resource, if access granted, the correct resource is returned&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stateless&quot;&gt;Stateless&lt;/h3&gt;
&lt;p&gt;Since we are working with cloud-native applications, we can’t have any state within them.
Because we have all the necessary information and create a new principal object for each request, the token eliminates the risk of having in-memory session state in the microservice.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;uaa&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;using-a-user-authentication--authorization-server-uaa&quot;&gt;Using a User Authentication &amp;amp; Authorization Server (UAA)&lt;/h1&gt;
&lt;p&gt;The UAA server is an identity provider. It adds authentication to applications and secures services with minimum fuss.
It’s primary role is that of an identity provider, issuing tokens for client applications to use when they act on behalf of users. 
It can also authenticate users with their credentials, and can act as an SSO service using those credentials.&lt;/p&gt;

&lt;p&gt;There are some options available as a UAA server:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Using a third party for issuing tokens (ex. GitHub, Facebook). &lt;a href=&quot;https://spring.io/guides/tutorials/spring-boot-oauth2/#_social_login_github&quot; target=&quot;_blank&quot;&gt;Tutorial Github social login&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Using &lt;a href=&quot;http://www.keycloak.org/&quot; target=&quot;_blank&quot;&gt;KeyCloak&lt;/a&gt;, an open source solution aimed to make it easy to secure your application. &lt;a href=&quot;https://dzone.com/articles/easily-secure-your-spring-boot-applications-with-k&quot; target=&quot;_blank&quot;&gt;Tutorial on how to use KeyCloak in Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Using &lt;a href=&quot;https://www.okta.com/&quot; target=&quot;_blank&quot;&gt;Okta&lt;/a&gt;, a commercial OAuth2, SAML and general identity management service in the cloud.&lt;/li&gt;
  &lt;li&gt;Implementing your own UAA is not really best practice since other providers cover most of the use cases. &lt;a href=&quot;https://youtu.be/EoK5a99Bmjc?t=4&quot; target=&quot;_blank&quot;&gt;Explanatory video of the UAA server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;enabling-single-sign-on&quot;&gt;Enabling Single Sign-On&lt;/h2&gt;
&lt;p&gt;Now that we have a way to achieve Authentication and Authorization by applying OAuth2 and JWT, we still have one problem.
Having multiple frontends in our architecture, the user will have to log in to each of these applications.
With Single Sign-On (SSO) we can eradicate this problem just by using the existing user session and requesting an access token.&lt;/p&gt;

&lt;h3 id=&quot;enable-oauth2-sso-flow-on-zuul-service&quot;&gt;Enable OAuth2 SSO flow on Zuul service&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableOAuth2Sso&lt;/code&gt;  and &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableZuulProxy&lt;/code&gt; annotation on our Zuul service will forward OAuth2 tokens to the services it is proxying.&lt;/p&gt;

&lt;h3 id=&quot;sensitive-headers&quot;&gt;Sensitive Headers&lt;/h3&gt;
&lt;p&gt;Zuul secures your sensitive headers by blocking these headers downstream (microservice).
Since the default settings for sensitive headers blocks the Authorization header, we have to open this setting and send these headers downstream.
You can choose to set the sensitive header per route or globally.&lt;/p&gt;

&lt;p&gt;How it works: &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-netflix/blob/master/docs/src/main/asciidoc/spring-cloud-netflix.adoc#cookies-and-sensitive-headers&quot; target=&quot;_blank&quot;&gt;Sensitive Headers&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;zuul-filter&quot;&gt;Zuul Filter&lt;/h3&gt;
&lt;p&gt;Based on &lt;a href=&quot;https://github.com/Netflix/Zuul&quot; target=&quot;_blank&quot;&gt;Netflix’s Zuul&lt;/a&gt;, Spring’s implementation also brings a filter mechanism.
Filters are capable of performing a range of actions during the routing of HTTP requests and responses.
This can help you customize security on your incoming and outgoing traffic.
Review the &lt;a href=&quot;https://github.com/Netflix/Zuul/wiki/How-it-Works&quot; target=&quot;_blank&quot;&gt;Zuul filter guide&lt;/a&gt; from Netflix about how filters work.&lt;/p&gt;

&lt;h1 id=&quot;securing-your-microservice&quot;&gt;Securing your microservice&lt;/h1&gt;
&lt;p&gt;When enabling security in your service, the most common issues are developer-induced.
Either there is a lack of built-in or easy security controls, or we make trade-offs for functionality over security.
Still, we have to think about who can access this functionality and what they can do with it.&lt;/p&gt;

&lt;p&gt;We got an access token, our gateway performed a coarse grained verification and proxied it to our microservice.
We are in a ‘downstream service’, where data is being load-balanced from Zuul. 
The next questions are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How do we decode this JWT?&lt;/li&gt;
  &lt;li&gt;How can we secure our code with the help of Spring Security?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;assembling-the-principal&quot;&gt;Assembling the Principal&lt;/h2&gt;
&lt;p&gt;It is the responsibility of a microservice (Resource Server) to extract information about the user from the access token.
Decoding the token allows the extraction of the user’s information.
With this information Spring Security will assemble a Principal object containing eg. the username and the user’s roles, and puts it in the security context. 
Using the security context the &lt;code class=&quot;highlighter-rouge&quot;&gt;AccessDecisionManager&lt;/code&gt; will be able to make a decision whether or not the request should be performed.
To enable this, we need to add spring security to our class path and add the &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableResourceServer&lt;/code&gt; annotation to our application.&lt;/p&gt;

&lt;h3 id=&quot;best-practices-with-keys&quot;&gt;Best practices with keys&lt;/h3&gt;
&lt;p&gt;The problem that might occur is that &lt;strong&gt;every microservice&lt;/strong&gt; would need to connect with the UAA server for verification on every request.&lt;/p&gt;

&lt;h4 id=&quot;zuul-verification&quot;&gt;Zuul verification&lt;/h4&gt;
&lt;p&gt;Obviously, we don’t want every microservice to depend on the UAA servers availability regardless of startup / testing / CI. 
The solution is to disable exposure of your microservices to the outer network and handle only incoming traffic via the gateway (eg. Zuul, HAProxy, nginx,…).
Zuul will verify the token as a trustworthy client of the UAA server and will propagate the token to the downstream services.
But what if a hacker gets inside of your platform?&lt;/p&gt;

&lt;h4 id=&quot;json-web-keys&quot;&gt;JSON Web Keys&lt;/h4&gt;
&lt;p&gt;To solve this issue, we need an extra validity check on the microservice.
When verifying a token’s validity, it comes down to verifying if the token was issued by the UAA server.
This can be done by requesting the public key used for signing the JWT. This is called a &lt;a href=&quot;http://ordina-jworks.github.io/security/2016/03/12/Digitally-signing-your-JSON-documents.html#jwk&quot; target=&quot;_blank&quot;&gt;JWK or JSON Web Key&lt;/a&gt;.
Basically, you can restrict the dependency on the UAA server to one single REST call, where the JWK is fetched from a public URI.
Once a microservice has a cached JWK, it can be used to verify any JWT completely by itself.
This greatly reduces network calls to the UAA server and still secures all of your microservices.
When you want to rotate your private/public key pair, you can use &lt;a href=&quot;https://auth0.com/docs/jwks&quot; target=&quot;_blank&quot;&gt;JWKS&lt;/a&gt;. 
We will go deeper into detail in one of our next posts.&lt;/p&gt;

&lt;h3 id=&quot;securing-api-endpoints&quot;&gt;Securing API endpoints&lt;/h3&gt;
&lt;p&gt;At last we’re going to secure our resources.
Spring Security gives us a variety of tools to secure your application at class and method level.
The one that’s used most often enables method security, which you enable by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableGlobalMethodSecurity(prePostEnabled = true)&lt;/code&gt; to your configuration.&lt;/p&gt;

&lt;h4 id=&quot;authority&quot;&gt;Authority&lt;/h4&gt;
&lt;p&gt;For the authorization, Spring Security provides us with &lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/3.0.x/reference/authz-arch.html&quot; target=&quot;_blank&quot;&gt;authorities&lt;/a&gt;, extracted from the access token.
The authorities are placed inside a &lt;a target=&quot;_blank&quot; href=&quot;http://www.baeldung.com/get-user-in-spring-security&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Principal&lt;/code&gt;&lt;/a&gt;, which will be used throughout the existing security context of your application.
You can then reference them using Spring Expression Language (SpEL) to secure your methods.
There are plenty of options you can use for method security, but we’ll highlight the most common ones.&lt;/p&gt;

&lt;p&gt;You can find a complete list in the &lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/3.0.x/reference/el-access.html&quot; target=&quot;_blank&quot;&gt;Spring documentation&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;preauthorize&quot;&gt;@PreAuthorize&lt;/h5&gt;
&lt;p&gt;Most commonly used, &lt;code class=&quot;highlighter-rouge&quot;&gt;@PreAuthorize&lt;/code&gt; will decide whether a method can actually be invoked or not.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;When a user logs in and you want the user to only access his detail information, or everyone’s data in case he’s an admin, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;@PreAuthorize&lt;/code&gt; annotation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@PreAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(authentication.principal.uuid == #uuid.toString()) or hasRole('ADMIN')&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uuid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;postauthorize&quot;&gt;@PostAuthorize&lt;/h5&gt;
&lt;p&gt;Less commonly, you may wish to perform the access-control check after the method has been invoked.
The returnObject is the returned value of that method.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A user can only view his own details and not those of someone else, but an administrator can.
You validate this by checking if the user has the admin role or if the principal’s UUID is the same as the one of the returned user object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@PreAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hasAnyRole('ADMIN','USER')&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@PostAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;returnObject!=null or hasRole('ADMIN') or returnObject.uuid.toString() == authentication.principal.uuid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uuid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;next-step&quot;&gt;Next step&lt;/h1&gt;
&lt;p&gt;In the next post we will cover how to secure your data at rest.&lt;/p&gt;

&lt;h1 id=&quot;sources&quot;&gt;Sources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2015/01/20/microservice-registration-and-discovery-with-spring-cloud-and-netflix-s-eureka&quot; target=&quot;_blank&quot;&gt;Spring Cloud Eureka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/guides/gs/circuit-breaker/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Hystrix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/guides/gs/routing-and-filtering/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Zuul&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://projects.spring.io/spring-cloud/spring-cloud.html#spring-cloud-feign&quot; target=&quot;_blank&quot;&gt;Spring Cloud Feign&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-config/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Config Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/guides/tutorials/spring-boot-oauth2/&quot; target=&quot;_blank&quot;&gt;Spring Cloud Security OAuth2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Multi-factor_authentication&quot; target=&quot;_blank&quot;&gt;Two-factor-authentication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#oauth2-scopes&quot; target=&quot;_blank&quot;&gt;OAuth2 Scopes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/EoK5a99Bmjc?t=4&quot; target=&quot;_blank&quot;&gt;Josh Long UAA intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/guides/tutorials/spring-boot-oauth2/#_social_login_github&quot; target=&quot;_blank&quot;&gt;Tutorial Github social login&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.keycloak.org/&quot; target=&quot;_blank&quot;&gt;KeyCloak&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dzone.com/articles/easily-secure-your-spring-boot-applications-with-k&quot; target=&quot;_blank&quot;&gt;Tutorial on how to use KeyCloak in Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.okta.com/&quot; target=&quot;_blank&quot;&gt;Okta&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://projects.spring.io/spring-security-oauth/docs/oauth2.html&quot; target=&quot;_blank&quot;&gt;Spring OAuth2 developers guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-netflix/blob/master/docs/src/main/asciidoc/spring-cloud-netflix.adoc#cookies-and-sensitive-headers&quot; target=&quot;_blank&quot;&gt;Sensitive Headers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Netflix/Zuul/wiki/How-it-Works&quot; target=&quot;_blank&quot;&gt;Zuul Filters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/3.0.x/reference/el-access.html&quot; target=&quot;_blank&quot;&gt;Spring Expression Language&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/3.0.x/reference/authz-arch.html&quot; target=&quot;_blank&quot;&gt;Authorities&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jwt.io/&quot; target=&quot;_blank&quot;&gt;JWT decoder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jwt.io/#libraries-io&quot;&gt;JWT Libraries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ordina-jworks.github.io/security/2016/03/12/Digitally-signing-your-JSON-documents.html#jwk&quot; target=&quot;_blank&quot;&gt;JWK or JSON Web Key&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://auth0.com/docs/jwks&quot; target=&quot;_blank&quot;&gt;JWKS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Kevin&quot;, &quot;last_name&quot;=&gt;&quot;Van Houtte&quot;, &quot;permalink&quot;=&gt;&quot;/author/kevin-van-houtte/&quot;, &quot;avatar&quot;=&gt;&quot;kevin-van-houtte.jpg&quot;, &quot;twitter&quot;=&gt;&quot;KevinVHoutte&quot;, &quot;linkedin&quot;=&gt;&quot;kevin-van-houtte-55ba936a&quot;, &quot;github&quot;=&gt;&quot;kevindahub&quot;, &quot;title&quot;=&gt;&quot;Software Consultant Java/JavaScript&quot;, &quot;email&quot;=&gt;&quot;kevin.vanhoutte@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Kevin Van Houtte is a Software Engineer at Ordina Belgium. Passionate in the Spring ecosystem and Angular framework Kevin is eager to discover new and efficient ways to solve problems. He enjoys a good challenge and is interested in cutting edge technologies. Currently he works on a project with Microservices, Spring and Angular/TypeScript.&quot;}</name><email>kevin.vanhoutte@ordina.be</email></author><category term="Microservices" /><category term="Microservices" /><category term="Security" /><category term="OAuth2" /><category term="JWT" /><category term="Spring" /><category term="Cloud" /><summary type="html">When developing cloud-native microservices, we need to think about securing the data that is being propagated from one service to another service and securing the data at rest. So how much security is enough to secure our architecture? Is it the user that identifies itself and decides what data he has access to?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/microservices/part1/securitylogo.png" /></entry><entry><title type="html">Browser Security Features</title><link href="https://ordina-jworks.github.io/conference/2017/09/18/Browser-security-features.html" rel="alternate" type="text/html" title="Browser Security Features" /><published>2017-09-18T00:00:00+00:00</published><updated>2017-09-18T00:00:00+00:00</updated><id>https://ordina-jworks.github.io/conference/2017/09/18/Browser-Security-Features</id><content type="html" xml:base="https://ordina-jworks.github.io/conference/2017/09/18/Browser-security-features.html">&lt;h1 id=&quot;browser-security-features&quot;&gt;Browser security features&lt;/h1&gt;
&lt;p&gt;Browsers nowadays come with a ton of security features built-in.
These features are there to protect the people using your application as well as protecting your application from malicious others.
Most of these features are quite easy to implement, however for some of them (such as key-pinning) you have to be careful not to break your site.
It’s this danger, combined with the lack of knowledge, that prevents people from taking full advantage of them.&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#transport-layer-security&quot;&gt;Transport Layer Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#public-key-pinning&quot;&gt;Public Key Pinning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#content-security-policy&quot;&gt;Content Security Policy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#subresource-integrity&quot;&gt;Subresource Integrity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cookie-protection&quot;&gt;Cookie Protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;transport-layer-security&quot;&gt;Transport Layer Security&lt;/h2&gt;
&lt;p&gt;The first layer of defense is not a new one at all: Transport Layer Security (TLS).
TLS is sometimes (incorrectly) referred to as SSL (Secured Socket Layer). 
In reality SSL is an obsolete technology, with TLS being its successor, but the name stuck.&lt;/p&gt;

&lt;p&gt;Having said this, why should you use TLS? 
First of all, most of the features described below &lt;em&gt;only&lt;/em&gt; work when you’re on a secured connection.
Besides that, it guarantees the end user that the site they’re communicating with is actually the site they think it is.
It also provides the guarantee that the content they see was not tampered with while travelling over the network.&lt;/p&gt;

&lt;p&gt;Another thing TLS brings to the table is speed: it used to be true that a secure connection was slower than an unsecured one.
Modern hardware however is more than up to the task of handling this efficiently for you.
Besides that, HTTP/2 is &lt;em&gt;only&lt;/em&gt; available over a secure connection and it allows for faster page loads.
Have a look at &lt;a href=&quot;http://www.httpvshttps.com/&quot; target=&quot;_blank&quot;&gt;HTTP vs HTTPS&lt;/a&gt; for a demo of the difference.&lt;/p&gt;

&lt;p&gt;Since speed should no longer prevent you from switching to HTTPS, there’s only cost.
Even that is no longer true: a simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-validated_certificate&quot; target=&quot;_blank&quot;&gt;Domain Validation&lt;/a&gt; certificate can be obtained for free.
But even if you need more protection, an &lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_Validation_Certificate&quot; target=&quot;_blank&quot;&gt;Extended Validation&lt;/a&gt; certificate can be had for as little as $300 per year.&lt;/p&gt;

&lt;h3 id=&quot;how-hard-is-it&quot;&gt;How hard is it?&lt;/h3&gt;
&lt;p&gt;The main issue is that all resources you use on your site should be served over HTTPS.
This means that all third parties should use TLS as well.
Furthermore, it depends on the complexity of your site.
Nick Craver wrote an extensive &lt;a href=&quot;https://nickcraver.com/blog/2017/05/22/https-on-stack-overflow/&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt; on their road to switching to HTTPS.&lt;/p&gt;

&lt;h3 id=&quot;should-you-activate-this-on-your-site&quot;&gt;Should you activate this on your site?&lt;/h3&gt;
&lt;p&gt;Absolutely! 
Modern browsers are shifting from notifying users that a page is secure to warning them that it isn’t.
On top of that, Google gives a slight ranking boost to HTTPS sites.&lt;/p&gt;

&lt;h2 id=&quot;http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/h2&gt;
&lt;p&gt;Once your server is properly configured to use TLS, your next step is to redirect your users to the secure version.
You could do this by simply adding a redirect-rule in your web server for the non-secure pages.
This means that users will still first connect to your non-secure site, allowing a potential attacker to intercept the request and do his nefarious deeds.
Wouldn’t it be nice if you could tell the browser to just go straight to the secure version?
That’s the thinking behind the HSTS (HTTP Strict Transport Security) header.&lt;/p&gt;

&lt;p&gt;HSTS simply tells the browser that you’re expecting it to use HTTPS for a certain time.
As a result, the browser will &lt;em&gt;automatically&lt;/em&gt; replace &lt;code class=&quot;highlighter-rouge&quot;&gt;http://&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt; &lt;strong&gt;before&lt;/strong&gt; making the call.
This means that even following a link that explicitly defines &lt;code class=&quot;highlighter-rouge&quot;&gt;http://&lt;/code&gt; will instead be called using a secure connection.&lt;/p&gt;

&lt;p&gt;The configuration of HSTS is as easy as can be: you simply add the following header to your response:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Strict-Transport-Security: max-age=31536000; includeSubDomains
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will tell the browser that for the next 365 days, it should connect to your domain using HTTPS.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;includesubdomains&lt;/code&gt; directive tells the browser that your subdomains should also be called using https.
Setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt; to 0 tells the browser that you no longer wish your domain to be HSTS-enabled.&lt;/p&gt;

&lt;h3 id=&quot;hsts-preload&quot;&gt;HSTS preload&lt;/h3&gt;
&lt;p&gt;Of course in this scenario, the user’s first connection will still take place over an unsecured connection.
This would offer an attacker a brief period in which he can still hijack the connection.
To prevent this, most major browsers (Chrome, Firefox, Safari, Edge, IE11 and Opera) offer an HSTS preload list.
Domains on this list will automatically be loaded over HTTPS from the start, without having to go through the HTTP -&amp;gt; HTTPS redirect.
If you want your domain to be included in this list, you should add the &lt;code class=&quot;highlighter-rouge&quot;&gt;preload&lt;/code&gt; directive to the HSTS header.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Afterwards, you can register yourself for the &lt;a href=&quot;https://hstspreload.org/&quot; target=&quot;_blank&quot;&gt;HSTS Preload List&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;are-there-any-risks&quot;&gt;Are there any risks?&lt;/h3&gt;
&lt;p&gt;Activating HSTS does offer some risks:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you include the &lt;code class=&quot;highlighter-rouge&quot;&gt;includesubdomains&lt;/code&gt; directive, you tell the browser that &lt;em&gt;all&lt;/em&gt; subdomains need to be retrieved over HTTPS.
If your internal applications are on a subdomain (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;internal.example.com&lt;/code&gt;), you’ll block access to those that haven’t enabled TLS yet.&lt;/li&gt;
  &lt;li&gt;Adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;preload&lt;/code&gt; directive is even more dangerous because this tells browser makers to hardcode your HSTS settings.
If you’ve made a mistake in the setup, it can take a long time to be removed from the list. 
Since this list is &lt;em&gt;in&lt;/em&gt; the browser, you’ll affect both your existing and your new users.
These risks can be mitigated through extensive testing and conservative settings. 
Start with a short &lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt; and slowly increase its length, don’t include subdomains if you’re not 100% sure that &lt;em&gt;all&lt;/em&gt; subdomains need to be included
and perhaps most importantly, &lt;strong&gt;don’t&lt;/strong&gt; activate preload unless you’re 100% sure that everything works as intended.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;should-i-activate-hsts&quot;&gt;Should I activate HSTS?&lt;/h3&gt;
&lt;p&gt;For those (subdomains) where TLS is enabled, you should start rolling out HSTS (while keeping in mind the warnings above).&lt;/p&gt;

&lt;h2 id=&quot;public-key-pinning&quot;&gt;Public key pinning&lt;/h2&gt;
&lt;p&gt;Alright, now you’ve secured your site with HTTPS, and you’ve made sure your users can’t fall victim to a Man in the Middle attack.
Or have you?
It’s true that HSTS will make sure that the user only connects using a secured connection, but that doesn’t mean the HTTPS connection is actually made to &lt;strong&gt;your&lt;/strong&gt; server.
Over the last couple of years, there were several incidents where malicious actors were able to generate valid certificates for domains they didn’t control.
When this happens, your users will think they’re safe (as their browser shows the green padlock), but the attacker can still manipulate your content.
To protect yourself against this, there’s a mechanism called “HTTP Public Key Pinning” (HPKP [&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;]).
With HPKP you “pin” the public key of your TLS certificate to the browser.
In the future, that browser will compare the public key that’s actually used for the TLS connection, with the pinned one and, if they don’t match, refuse the connection altogether.
&lt;img src=&quot;/img/2017-security-features/hpkp-error.png&quot; alt=&quot;HPPK error&quot; class=&quot;image&quot; height=&quot;245px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An HPKP header looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public-key-pins:pin-sha256=&quot;YLh1...uihg=&quot;;pin-sha256=&quot;9dNi...Dwg=&quot;;pin-sha256=&quot;Vjs...eWys=&quot;;max-age=2592000;includeSubdomains;report-uri=&quot;report-uri&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt; directive tells the browser for how long these pins are valid. 
You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt; to get a report when an invalid certificate is used.
&lt;code class=&quot;highlighter-rouge&quot;&gt;includesubdomains&lt;/code&gt; makes sure that the policy also applies to your subdomains.
Finally, there are the actual pins.
You need to pin at least 2 fingerprints: 1 that should be active at the moment and 1 that isn’t.&lt;/p&gt;

&lt;h3 id=&quot;what-to-pin&quot;&gt;What to pin?&lt;/h3&gt;
&lt;p&gt;First of all, you need to pin at least one of the keys in your certificate chain.
While you can pin the key of the actual certificate, that might not be the best idea.
Doing this means that you need to update the keys every time your certificate is changed or you will risk your users being unable to visit your site.
Alternatively, you could pin the key for the root certificate of your CA (Certificate Authority).
While this is a lot safer, it does mean that if your CA, or any of its intermediates is compromised, they could issue valid certificates for your site.
Finally, you have the option to pin the key to the intermediate certificate. 
Doing so limits the attack surface to that intermediate, while it also allows you to roll out new certificates whenever you need to.
Of course you can’t control when your CA will change their intermediate certificate, so that’s a danger in its own.&lt;/p&gt;

&lt;p&gt;Besides that you also need to have a second key pinned that’s &lt;em&gt;not&lt;/em&gt; in your current certificate chain, otherwise your HPKP header will be ignored.
Fortunately, you don’t have to have certificates ready for this.
It’s enough to pin the public key of a CSR (Certificate Signing Request).
Obviously, you can’t use the CSR of your current certificate (as that would be valid for this chain), so you’ll need to create a backup CSR.
You’ll need to keep this CSR and the associated private key in a secure location, because you don’t want these to be compromised together with the original.&lt;/p&gt;

&lt;h3 id=&quot;report-uri&quot;&gt;report-uri&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt; directive is used to tell the browser where to send reports if it encounters an invalid certificate.
The browser will POST a JSON message to the URL you specify here.
If you don’t want to implement your own processing of these reports, have a look at &lt;a href=&quot;https://report-uri.io/&quot; target=&quot;_blank&quot;&gt;report-uri.io&lt;/a&gt;
It will process the reports from your site and display the results in a nice format, allowing you to take action when you see something that’s wrong.&lt;/p&gt;

&lt;h3 id=&quot;report-only&quot;&gt;Report-only&lt;/h3&gt;
&lt;p&gt;Besides the normal HPKP header, there’s also the report-only variant: &lt;code class=&quot;highlighter-rouge&quot;&gt;Public-Key-Pins-Report-Only&lt;/code&gt;.
This header has the exact same specifications, &lt;strong&gt;but&lt;/strong&gt; it won’t block access to your site if there’s no valid pin.
As the name says, it will simply report violations to the &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt;.
Obviously, this header isn’t meant to increase the security of your site on its own, rather it’s a way to help you on your way to a full HPKP implementation.&lt;/p&gt;

&lt;h3 id=&quot;dangers&quot;&gt;Dangers&lt;/h3&gt;
&lt;p&gt;HPKP is quite a dangerous header: it’s quite easy to commit “pinning-suicide”.
Pin the wrong certificate, have a CA change keys on you or have something else go wrong and your site is inaccessible until your users’ &lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt; expires.
Be careful rolling out this one as it’s way too easy to shoot yourself in the foot.&lt;/p&gt;

&lt;h3 id=&quot;should-i-use-it&quot;&gt;Should I use it?&lt;/h3&gt;
&lt;p&gt;This header has some serious dangers associated with it.
It’s not enough to know that the current configuration is correct, you also need to be sure that you’re equipped to deal with certificate updates without breaking the site.
And then you need to be sure that you’ve got a backup in place in case you ever want to switch CAs.
Unless you’re 100% sure that this won’t be an issue, hold off for now as it’s too easy to DoS your own site.&lt;/p&gt;

&lt;h2 id=&quot;content-security-policy&quot;&gt;Content Security Policy&lt;/h2&gt;
&lt;p&gt;Even though your connection is secured with TLS, that doesn’t mean that the content can’t be tampered with in other ways (such as cross-site scripting (XSS)).
An attacker could use these kinds of attacks to load malicious content.
The Content Security Policy (CSP) header is designed to prevent this kind of attacks.
It allows you to specify exactly what content your site is allowed to load through a load of directives.&lt;/p&gt;

&lt;h3 id=&quot;fetch-directives&quot;&gt;Fetch directives&lt;/h3&gt;
&lt;p&gt;First of all, you can define what source content can be fetched from. 
There’s a specific directive for each resource type and a fallback directive &lt;code class=&quot;highlighter-rouge&quot;&gt;default-src&lt;/code&gt;.
You define the sources where the content can be loaded from as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; only load content from the same origin as the page&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;none&lt;/code&gt; don’t load any content of this type&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe-inline&lt;/code&gt; lets you use inline javascript and CSS (although it’s preferable to use a nonce)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe-eval&lt;/code&gt; allows the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout(String)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval(String)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;new Function(String)&lt;/code&gt;.
 There’s a reason it has “unsafe” in its name though: these functions are typically used as attack vectors for XSS.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https:&lt;/code&gt; allow content loaded from anywhere, as long as it’s served over HTTPS&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;example.com&lt;/code&gt; allow content loaded from anywhere on &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com&lt;/code&gt;, both HTTP and HTTPS&lt;/li&gt;
  &lt;li&gt;You can also use wildcards to control which origins are allowed. 
 E.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;*://*.example.com:*&lt;/code&gt; will allow resources to be loaded from all &lt;em&gt;subdomains&lt;/em&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com&lt;/code&gt;, using any scheme and port.
 Note that it won’t allow you to load resources from &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com&lt;/code&gt; itself.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nonce-...&lt;/code&gt; Allows you to specify a &lt;a href=&quot;#nonce&quot;&gt;nonce&lt;/a&gt;. Scripts or styles that have this nonce are then allowed to execute.
It’s also important to note that you can pass multiple values to these directives: &lt;code class=&quot;highlighter-rouge&quot;&gt;self https://example.com&lt;/code&gt; will allow resources to be loaded both from the domain itself as well as from &lt;code class=&quot;highlighter-rouge&quot;&gt;https://example.com&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use these to define &lt;code class=&quot;highlighter-rouge&quot;&gt;default-src&lt;/code&gt;, but CSP gives you more fine-grained control over where each type of resource can be loaded from.
For that you need to use the following properties instead:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;script-src&lt;/code&gt; - Javascript&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;style-src&lt;/code&gt; - CSS&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;img-src&lt;/code&gt; - images&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;font-src&lt;/code&gt; - fonts&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;object-src&lt;/code&gt; - objects (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;object&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;embed&amp;gt;&lt;/code&gt;, …)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;media-src&lt;/code&gt; - media such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;connect-src&lt;/code&gt; - where the page can connect to using &lt;code class=&quot;highlighter-rouge&quot;&gt;XmlHttpRequest&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;WebSocket&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;EventSource&lt;/code&gt;.
 The browser will immediately return a 400 status code when your page attempts to connect to a non-valid domain.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;frame-src&lt;/code&gt; - Specify which locations can be embedded in a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;frame&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;worker-src&lt;/code&gt; - Worker scripts&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;child-src&lt;/code&gt; - Is either deprecated or serves as fallback for &lt;code class=&quot;highlighter-rouge&quot;&gt;frame-src&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;worker-src&lt;/code&gt;, depending on the browser and the CSP level implemented.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;manifest-src&lt;/code&gt; - defines which &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Manifest&quot; target=&quot;_blank&quot;&gt;manifest&lt;/a&gt; can be applied to the resource. (This is still experimental though).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;navigation-directives&quot;&gt;Navigation directives&lt;/h3&gt;
&lt;p&gt;These directives tell the browser what kind of navigation is allowed:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;form-action&lt;/code&gt; limits to where forms can be submitted&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;frame-ancestors&lt;/code&gt; specifies who may embed pages using elements such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;frame&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;embed&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;object&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;applet&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-directives&quot;&gt;Other directives&lt;/h3&gt;
&lt;p&gt;Besides these, CSP allows for quite a few other directives:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt; works the same way as the &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt; directive of HPKP&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;require-sri-for&lt;/code&gt; allows you to force the use or Subresource Integrity ((SRI)[#Subresource-integrity]) for stylesheets, scripts or both. 
 Allowed values are &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; (or both).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;base-uri&lt;/code&gt; defines which URLs you can use in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;base&amp;gt;&lt;/code&gt; element&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sandbox&lt;/code&gt; to enable a sandbox for requested resources 
 (have a look at &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/sandbox&quot; target=&quot;_blank&quot;&gt;Mozilla’s documentation&lt;/a&gt; for more information)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nonce&quot;&gt;Nonce&lt;/h3&gt;
&lt;p&gt;A nonce, pronounced “/nɒns/” (nance), is a term that means “number (used) once”.
It allows you to load specific inline scripts without allowing all of them. 
Only those scripts that have a nonce attribute that matches the value specified in the CSP header will get executed.
Keep in mind though that you should &lt;strong&gt;never&lt;/strong&gt; hardcode the nonce or use a value that can be guessed.
It’s best to generate a new nonce for each request and add it to those scripts you need to execute.
E.g. if you have the following CSP setting:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Security-Policy: script-src 'nonce-randomValue'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;will only execute scripts that have the nonce attribute defined like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nonce=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;randomValue&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... script contents&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;multiple-policies&quot;&gt;Multiple policies&lt;/h3&gt;
&lt;p&gt;You are allowed to specify multiple CSP policies simply by specifying the header multiple times.
If you do this however, it’s important to keep in mind that subsequent CSPs are not allowed to loosen the rules, only to tighten them.&lt;/p&gt;

&lt;h3 id=&quot;report-only-1&quot;&gt;Report-only&lt;/h3&gt;
&lt;p&gt;As with HPKP, CSP also supports a report-only variant with &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy-Report-Only&lt;/code&gt;.
Once again the specifications are exactly the same but it won’t block loading or execution of disallowed resources and simply report violations.
You can then use the reports it generates to decide what you need to allow in your actual CSP header, before you deploy it (and break your site).&lt;/p&gt;

&lt;h3 id=&quot;should-i-use-it-1&quot;&gt;Should I use it?&lt;/h3&gt;
&lt;p&gt;CSP has some risks: it can break your site’s functionality, but overall it’s relatively easy to test it. 
The &lt;code class=&quot;highlighter-rouge&quot;&gt;report-uri&lt;/code&gt; directive allows you to monitor if there are any issues and you can use the report-only version of the header to easily validate the setup you’re planning in the wild.
If you have a system that relies a lot on third party content, it might not be for you.
For everyone else, try out the report-only header and see if you get any issues.&lt;/p&gt;

&lt;h2 id=&quot;subresource-integrity&quot;&gt;Subresource integrity&lt;/h2&gt;
&lt;p&gt;When you’re developing a web application, you’ll often depend on some JavaScript frameworks such as Angular or jQuery.
Loading these files from a CDN can speed up load times from your application, since it’s quite likely that the user already has a cached version of the script available.
Of course it’s a good idea to be careful about the content of these scripts.
Whenever you’re loading resources that aren’t under your control, you’re depending on someone else to make sure that they aren’t tampered with.
To make sure that they aren’t changed without your knowledge, you can use subresource integrity (SRI).
With SRI, you add an &lt;code class=&quot;highlighter-rouge&quot;&gt;integrity&lt;/code&gt; attribute to your &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag.
This attribute contains the hash of the file you expect.
Your browser will then download the file, hash it with the same algorithm and compare the results.
If the hash matches, the resource will be used; otherwise it will be ignored and an error will be shown in the console.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js&quot;&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;integrity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=&quot;&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see in the example above, the integrity of the script will be checked using a ‘SHA256’ hash. 
You’ll also notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;crossorigin&lt;/code&gt; attribute: this attribute is required when loading SRI validated resources from a different origin.
Possible values are &lt;code class=&quot;highlighter-rouge&quot;&gt;use-credentials&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;anonymous&lt;/code&gt;, indicating whether a request will have the credentials flag set.
If you’re using a CDN, you’ll probably want to use &lt;code class=&quot;highlighter-rouge&quot;&gt;anonymous&lt;/code&gt;.
Note that you only need to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;crossorigin&lt;/code&gt; attribute if you’re loading the resource from a different origin.
For resources coming from the same origin, you can omit the &lt;code class=&quot;highlighter-rouge&quot;&gt;crossorigin&lt;/code&gt; attribute.&lt;/p&gt;

&lt;h3 id=&quot;calculating-the-sri-value&quot;&gt;Calculating the SRI value.&lt;/h3&gt;
&lt;p&gt;In order to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;integrity&lt;/code&gt; attribute, you need to know the correct hash of the file. 
The easiest way to calculate it is by simply specifying a random value and checking the resulting error in your browser.
&lt;img src=&quot;/img/2017-security-features/integrity-error.png&quot; alt=&quot;Chrome SRI error&quot; class=&quot;image&quot; height=&quot;50px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;should-i-use-it-2&quot;&gt;Should I use it?&lt;/h3&gt;
&lt;p&gt;Most likely. 
If you’re depending on third party scripts, you should make sure that they aren’t changed without your knowledge.
This does mean that you shouldn’t just include the latest version of a script (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com/library/latest/&lt;/code&gt;) as that will change whenever a new version is released.&lt;/p&gt;

&lt;h2 id=&quot;cookie-protection&quot;&gt;Cookie protection&lt;/h2&gt;
&lt;p&gt;Most websites nowadays use a variety of cookies for different purposes.
These too can be a source of problems: session cookies grant the user access to certain content or allow them to perform certain actions.
If this cookie can be intercepted or altered, the consequences can be enormous.
Because of this, it’s a good idea to protect your cookies as much as possible.
Since you’re already running your site on HTTPS, it’s a good idea to make sure the cookies aren’t sent on insecure requests.
You can easily do this by adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;secure&lt;/code&gt; flag to the cookies you send.&lt;/p&gt;

&lt;p&gt;To make the cookies even more secure, you’ll also need to prevent them from being read/modified by scripts running in the page.
In most cases there’s no reason for a script to have access to these cookies, so you can simply mark them as &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpOnly&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;should-i-use-this&quot;&gt;Should I use this?&lt;/h3&gt;
&lt;p&gt;Yes.
Your session cookies should not be available to scripts, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpOnly&lt;/code&gt; flag should be set on those.
If you’re using TLS (and you should) you should definitely set the &lt;code class=&quot;highlighter-rouge&quot;&gt;secure&lt;/code&gt; flag as well.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Browsers nowadays support a wide array of security features you can use to keep your users safe.
But, as with all things, powerful tools require you to wield them carefully.
If you apply them without proper thought, you can easily make your website inaccessible or render it unusable.
Because of that, you need to be really careful when you implement (most of) these measures.
Do proper testing and (where possible) use the Report-Only variant for a while to spot possible issues before they become real problems.
Make sure you really understand what you’re doing and what the consequences are of getting things wrong.
When you have all that, don’t be afraid to experiment, just make sure you do so safely.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;fn1&quot;&gt;&lt;/a&gt;[1] &lt;a href=&quot;http://ordina-jworks.github.io/spring/2016/03/05/HTTP-Public-Key-Pinning-with-Spring-Security.html&quot;&gt;Public Key Pinning with Spring Security&lt;/a&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Tim&quot;, &quot;last_name&quot;=&gt;&quot;De Grande&quot;, &quot;twitter&quot;=&gt;&quot;TimDG&quot;, &quot;linkedin&quot;=&gt;&quot;timdegrande&quot;, &quot;permalink&quot;=&gt;&quot;/author/tim-de-grande/&quot;, &quot;avatar&quot;=&gt;&quot;tim-de-grande.jpg&quot;, &quot;title&quot;=&gt;&quot;Principal Consultant&quot;, &quot;title2&quot;=&gt;&quot;Competence Leader Aplication Security&quot;, &quot;email&quot;=&gt;&quot;tim.degrande@ordina.be&quot;, &quot;bio&quot;=&gt;&quot;Tim is a principal Java Consultant at Ordina who is interested in security, cryptography and privacy. As Compentence Leader Application Security, he keeps his colleagues up to date on the latest security news and works to broaden their understanding by giving workshops and classes.&quot;}</name><email>tim.degrande@ordina.be</email></author><category term="Security" /><category term="Security" /><category term="Browser features" /><category term="Response headers" /><summary type="html">Browser security features Browsers nowadays come with a ton of security features built-in. These features are there to protect the people using your application as well as protecting your application from malicious others. Most of these features are quite easy to implement, however for some of them (such as key-pinning) you have to be careful not to break your site. It’s this danger, combined with the lack of knowledge, that prevents people from taking full advantage of them.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ordina-jworks.github.io/img/security/padlock_code.jpg" /></entry></feed>